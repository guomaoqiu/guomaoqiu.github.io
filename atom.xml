<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OpsThoughts</title>
  
  <subtitle>Devops、Linux、Kubernetes、Docker、Flask、Python、Shell、SRE</subtitle>
  <link href="https://blog.sctux.cc/atom.xml" rel="self"/>
  
  <link href="https://blog.sctux.cc/"/>
  <updated>2025-09-03T16:18:17.293Z</updated>
  <id>https://blog.sctux.cc/</id>
  
  <author>
    <name>NoardGuo-Ops</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>求职-系统运维/SRE方向</title>
    <link href="https://blog.sctux.cc/2025/09/04/%E6%B1%82%E8%81%8C%E5%B8%96/"/>
    <id>https://blog.sctux.cc/2025/09/04/%E6%B1%82%E8%81%8C%E5%B8%96/</id>
    <published>2025-09-03T16:01:01.000Z</published>
    <updated>2025-09-03T16:18:17.293Z</updated>
    
    <content type="html"><![CDATA[<p>各位朋友，大家好！</p><p>我于今年7月底正式离职，结束了上一段工作旅程。目前正在寻找下一份系统运维或SRE相关的工作，希望能借助大家的力量。</p><p>我有10年左右的运维经验，从事过IDC、游戏、物联网、区块链行业。熟练使用操作系统、Kubernetes集群部署维护、监控系统部署维护以及二次卡发的能力以及一些自动化脚本工具开发。在过去的工作中，我负责维护系统的稳定运行，处理过一些故障，也参与从传统架构到云原生架构的迁移和转型。我可能不是最顶尖的大牛，但我相信自己有很强的责任心、学习能力和团队协作精神，能脚踏实地地完成任务。</p><p>我个人非常热爱运维这个事业，作为运维/SRE在为公司创造价值的同时能满足自己的成就感是非常完美的一件事情。非常渴望能加入一个优秀的团队，与大家共同成长，为公司贡献出自己的全部能力。</p><p>如果您所在团队有招聘需求，或者有相关的信息，恳请您不吝推荐或联系我。感激不尽！</p><p><strong>📞 我的联系方式</strong><br>欢迎通过以下方式与我交流：</p><ul><li>📧 邮箱：<a href="mailto:guomaoqiu@icloud.com">guomaoqiu@icloud.com</a></li><li>🍓 TG: <a href="https://t.me/noardguo_devops">@noardguo_devops</a></li><li>💻 GitHub：<a href="https://github.com/guomaoqiu">https://github.com/guomaoqiu</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;各位朋友，大家好！&lt;/p&gt;
&lt;p&gt;我于今年7月底正式离职，结束了上一段工作旅程。目前正在寻找下一份系统运维或SRE相关的工作，希望能借助大家的力量。&lt;/p&gt;
&lt;p&gt;我有10年左右的运维经验，从事过IDC、游戏、物联网、区块链行业。熟练使用操作系统、Kubernetes集群部署维护、监控系统部署维护以及二次卡发的能力以及一些自动化脚本工具开发。在过去的工作中，我负责维护系统的稳定运行，处理过一些故障，也参与从传统架构到云原生架构的迁移和转型。我可能不是最顶尖的大牛，但我相信自己有很强的责任心、学习能力和团队协作精神，能脚踏实地地完成任务。&lt;/p&gt;
&lt;p&gt;我个人非常热爱运维这个事业，作为运维/SRE在为公司创造价值的同时能满足自己的成就感是非常完美的一件事情。非常渴望能加入一个优秀的团队，与大家共同成长，为公司贡献出自己的全部能力。&lt;/p&gt;
&lt;p&gt;如果您所在团队有招聘需求，或者有相关的信息，恳请您不吝推荐或联系我。感激不尽！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;📞 我的联系方式&lt;/strong&gt;&lt;br&gt;欢迎通过以下方式与我交流：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;📧 邮箱：&lt;a href=&quot;mailto:guomaoqiu@icloud.com&quot;&gt;guomaoqiu@icloud.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🍓 TG: &lt;a href=&quot;https://t.me/noardguo_devops&quot;&gt;@noardguo_devops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💻 GitHub：&lt;a href=&quot;https://github.com/guomaoqiu&quot;&gt;https://github.com/guomaoqiu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker构建日志收集平台EFK(TLS)</title>
    <link href="https://blog.sctux.cc/2024/07/23/Docker%E6%9E%84%E5%BB%BA%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%B9%B3%E5%8F%B0EFK-TLS/"/>
    <id>https://blog.sctux.cc/2024/07/23/Docker%E6%9E%84%E5%BB%BA%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%B9%B3%E5%8F%B0EFK-TLS/</id>
    <published>2024-07-23T01:56:27.000Z</published>
    <updated>2025-09-01T01:59:08.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如题， 主要记录一下之前搭建部署的一套日志收集系统。这里采用docker-compose的方式运行，还是那句话主要是思路。</p><p>方式: <code>一台服务器上面利用docker-compose运行三个ES节点跟Kibana,并启用SSL,再使用Filebeat来收集服务器上面的应用日志到ES， 最后Kibana来做展示</code></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h3 id="目录创建"><a href="#目录创建" class="headerlink" title="目录创建"></a>目录创建</h3><figure class="highlight haskell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mkdir</span> -p /<span class="class"><span class="keyword">data</span>/{<span class="title">es</span>/<span class="title">node</span>-1/{<span class="title">data</span>,<span class="title">certs</span>,<span class="title">logs</span>,<span class="title">config</span>},plugins}</span></span><br><span class="line"><span class="title">mkdir</span> -p /<span class="class"><span class="keyword">data</span>/{<span class="title">es</span>/<span class="title">node</span>-2/{<span class="title">data</span>,<span class="title">certs</span>,<span class="title">logs</span>,<span class="title">config</span>},plugins}</span></span><br><span class="line"><span class="title">mkdir</span> -p /<span class="class"><span class="keyword">data</span>/{<span class="title">es</span>/<span class="title">node</span>-3/{<span class="title">data</span>,<span class="title">certs</span>,<span class="title">logs</span>,<span class="title">config</span>},plugins}</span></span><br><span class="line"><span class="title">mkdir</span> -p /<span class="class"><span class="keyword">data</span>/kibana/{<span class="title">certs</span>,<span class="title">config</span>} -p</span></span><br></pre></td></tr></tbody></table></figure><h3 id="部署文件"><a href="#部署文件" class="headerlink" title="部署文件"></a>部署文件</h3><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="params">services:</span></span><br><span class="line">  <span class="params">node-1:</span></span><br><span class="line">    <span class="params">image:</span> registry.cn-hangzhou.aliyuncs.com<span class="operator">/</span>bigdata_cloudnative<span class="operator">/</span>elasticsearch:<span class="number">7.17</span>.<span class="number">5</span></span><br><span class="line">    <span class="params">networks:</span> </span><br><span class="line">      <span class="params">bitdata:</span></span><br><span class="line">        <span class="params">ipv4_address:</span> <span class="number">172.20</span>.<span class="number">0.3</span></span><br><span class="line">    <span class="params">container_name:</span> node-<span class="number">1</span></span><br><span class="line">    <span class="params">hostname:</span> node-<span class="number">1</span></span><br><span class="line">    <span class="params">environment:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"ES_JAVA_OPTS=-Xms1024m -Xmx1024m"</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"TZ=Asia/Shanghai"</span></span><br><span class="line">    <span class="params">ulimits:</span></span><br><span class="line">      <span class="params">memlock:</span></span><br><span class="line">        <span class="params">soft:</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">        <span class="params">hard:</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">      <span class="params">nofile:</span></span><br><span class="line">        <span class="params">soft:</span> <span class="number">65536</span></span><br><span class="line">        <span class="params">hard:</span> <span class="number">65536</span></span><br><span class="line">    <span class="params">ports:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"9200:9200"</span></span><br><span class="line">    <span class="params">logging:</span></span><br><span class="line">      <span class="params">driver:</span> <span class="string">"json-file"</span></span><br><span class="line">      <span class="params">options:</span></span><br><span class="line">        <span class="params">max-size:</span> <span class="string">"50m"</span></span><br><span class="line">    <span class="params">volumes:</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>node-<span class="number">1</span><span class="operator">/</span>config<span class="operator">/</span>elasticsearch.yml:<span class="symbol">/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>plugins:<span class="symbol">/usr/share/elasticsearch/plugins</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>node-<span class="number">1</span><span class="operator">/</span>data:<span class="symbol">/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>node-<span class="number">1</span><span class="operator">/</span>certs:<span class="symbol">/usr/share/elasticsearch/config/certs</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>node-<span class="number">1</span><span class="operator">/</span>log:<span class="symbol">/usr/share/elasticsearch/log</span></span><br><span class="line">    <span class="params">healthcheck:</span></span><br><span class="line">      <span class="params">test:</span> [<span class="string">"CMD-SHELL"</span>, <span class="string">"curl -I http://localhost:9200 || exit 1"</span>]</span><br><span class="line">      <span class="params">interval:</span> <span class="number">10</span>s</span><br><span class="line">      <span class="params">timeout:</span> <span class="number">10</span>s</span><br><span class="line">      <span class="params">retries:</span> <span class="number">5</span></span><br><span class="line">  <span class="params">node-2:</span></span><br><span class="line">    <span class="params">image:</span> registry.cn-hangzhou.aliyuncs.com<span class="operator">/</span>bigdata_cloudnative<span class="operator">/</span>elasticsearch:<span class="number">7.17</span>.<span class="number">5</span></span><br><span class="line">    <span class="params">networks:</span> </span><br><span class="line">      <span class="params">bitdata:</span></span><br><span class="line">        <span class="params">ipv4_address:</span> <span class="number">172.20</span>.<span class="number">0.4</span></span><br><span class="line">    <span class="params">container_name:</span> node-<span class="number">2</span></span><br><span class="line">    <span class="params">hostname:</span> node-<span class="number">2</span></span><br><span class="line">    <span class="params">environment:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"ES_JAVA_OPTS=-Xms1024m -Xmx1024m"</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"TZ=Asia/Shanghai"</span></span><br><span class="line">    <span class="params">ulimits:</span></span><br><span class="line">      <span class="params">memlock:</span></span><br><span class="line">        <span class="params">soft:</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">        <span class="params">hard:</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">      <span class="params">nofile:</span></span><br><span class="line">        <span class="params">soft:</span> <span class="number">65536</span></span><br><span class="line">        <span class="params">hard:</span> <span class="number">65536</span></span><br><span class="line">    <span class="params">ports:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"9201:9200"</span></span><br><span class="line">    <span class="params">logging:</span></span><br><span class="line">      <span class="params">driver:</span> <span class="string">"json-file"</span></span><br><span class="line">      <span class="params">options:</span></span><br><span class="line">        <span class="params">max-size:</span> <span class="string">"50m"</span></span><br><span class="line">    <span class="params">volumes:</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>node-<span class="number">2</span><span class="operator">/</span>config<span class="operator">/</span>elasticsearch.yml:<span class="symbol">/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>plugins:<span class="symbol">/usr/share/elasticsearch/plugins</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>node-<span class="number">2</span><span class="operator">/</span>data:<span class="symbol">/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>node-<span class="number">2</span><span class="operator">/</span>certs:<span class="symbol">/usr/share/elasticsearch/config/certs</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>node-<span class="number">2</span><span class="operator">/</span>log:<span class="symbol">/usr/share/elasticsearch/log</span></span><br><span class="line">    <span class="params">healthcheck:</span></span><br><span class="line">      <span class="params">test:</span> [<span class="string">"CMD-SHELL"</span>, <span class="string">"curl -I http://localhost:9200 || exit 1"</span>]</span><br><span class="line">      <span class="params">interval:</span> <span class="number">10</span>s</span><br><span class="line">      <span class="params">timeout:</span> <span class="number">10</span>s</span><br><span class="line">      <span class="params">retries:</span> <span class="number">5</span></span><br><span class="line">  <span class="params">node-3:</span></span><br><span class="line">    <span class="params">image:</span> registry.cn-hangzhou.aliyuncs.com<span class="operator">/</span>bigdata_cloudnative<span class="operator">/</span>elasticsearch:<span class="number">7.17</span>.<span class="number">5</span></span><br><span class="line">    <span class="params">networks:</span> </span><br><span class="line">      <span class="params">bitdata:</span></span><br><span class="line">        <span class="params">ipv4_address:</span> <span class="number">172.20</span>.<span class="number">0.5</span></span><br><span class="line">    <span class="params">container_name:</span> node-<span class="number">3</span></span><br><span class="line">    <span class="params">hostname:</span> node-<span class="number">3</span></span><br><span class="line">    <span class="params">environment:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"ES_JAVA_OPTS=-Xms1024m -Xmx1024m"</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"TZ=Asia/Shanghai"</span></span><br><span class="line">    <span class="params">ulimits:</span></span><br><span class="line">      <span class="params">memlock:</span></span><br><span class="line">        <span class="params">soft:</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">        <span class="params">hard:</span> <span class="operator">-</span><span class="number">1</span></span><br><span class="line">      <span class="params">nofile:</span></span><br><span class="line">        <span class="params">soft:</span> <span class="number">65536</span></span><br><span class="line">        <span class="params">hard:</span> <span class="number">65536</span></span><br><span class="line">    <span class="params">ports:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"9202:9200"</span></span><br><span class="line">    <span class="params">logging:</span></span><br><span class="line">      <span class="params">driver:</span> <span class="string">"json-file"</span></span><br><span class="line">      <span class="params">options:</span></span><br><span class="line">        <span class="params">max-size:</span> <span class="string">"50m"</span></span><br><span class="line">    <span class="params">volumes:</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>node-<span class="number">3</span><span class="operator">/</span>config<span class="operator">/</span>elasticsearch.yml:<span class="symbol">/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>plugins:<span class="symbol">/usr/share/elasticsearch/plugins</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>node-<span class="number">3</span><span class="operator">/</span>data:<span class="symbol">/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>node-<span class="number">3</span><span class="operator">/</span>certs:<span class="symbol">/usr/share/elasticsearch/config/certs</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>es<span class="operator">/</span>node-<span class="number">3</span><span class="operator">/</span>log:<span class="symbol">/usr/share/elasticsearch/log</span></span><br><span class="line">    <span class="params">healthcheck:</span></span><br><span class="line">      <span class="params">test:</span> [<span class="string">"CMD-SHELL"</span>, <span class="string">"curl -I http://localhost:9200 || exit 1"</span>]</span><br><span class="line">      <span class="params">interval:</span> <span class="number">10</span>s</span><br><span class="line">      <span class="params">timeout:</span> <span class="number">10</span>s</span><br><span class="line">      <span class="params">retries:</span> <span class="number">5</span></span><br><span class="line">  <span class="params">kibana:</span></span><br><span class="line">    <span class="params">networks:</span> </span><br><span class="line">      <span class="params">bitdata:</span></span><br><span class="line">        <span class="params">ipv4_address:</span> <span class="number">172.20</span>.<span class="number">0.6</span></span><br><span class="line">    <span class="params">container_name:</span> kibana</span><br><span class="line">    <span class="params">hostname:</span> kibana</span><br><span class="line">    <span class="params">image:</span> registry.cn-hangzhou.aliyuncs.com<span class="operator">/</span>bigdata_cloudnative<span class="operator">/</span>kibana:<span class="number">7.17</span>.<span class="number">5</span></span><br><span class="line">    <span class="params">environment:</span></span><br><span class="line">      <span class="params">TZ:</span> 'Asia<span class="operator">/</span>Shanghai'</span><br><span class="line">    <span class="params">volumes:</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>kibana<span class="operator">/</span>cert:<span class="symbol">/etc/kibana/cert</span></span><br><span class="line">      <span class="operator">-</span> .<span class="operator">/</span>kibana<span class="operator">/</span>config<span class="operator">/</span>kibana.yml:<span class="symbol">/usr/share/kibana/config/kibana.yml</span></span><br><span class="line">    <span class="params">ports:</span></span><br><span class="line">      <span class="operator">-</span> <span class="number">5601</span>:<span class="number">5601</span></span><br><span class="line">    <span class="params">healthcheck:</span></span><br><span class="line">      <span class="params">test:</span> [<span class="string">"CMD-SHELL"</span>, <span class="string">"curl -I http://localhost:5601 || exit 1"</span>]</span><br><span class="line">      <span class="params">interval:</span> <span class="number">10</span>s</span><br><span class="line">      <span class="params">timeout:</span> <span class="number">10</span>s</span><br><span class="line">      <span class="params">retries:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接外部网络</span></span><br><span class="line"><span class="params">networks:</span></span><br><span class="line">  <span class="params">bitdata:</span></span><br><span class="line">    <span class="params">driver:</span> bridge</span><br><span class="line">    <span class="params">ipam:</span> </span><br><span class="line">      <span class="params">config:</span></span><br><span class="line">        <span class="operator">-</span> <span class="params">subnet:</span> <span class="number">172.20</span>.<span class="number">0.0</span><span class="operator">/</span><span class="number">24</span></span><br></pre></td></tr></tbody></table></figure><h2 id="非SSL"><a href="#非SSL" class="headerlink" title="非SSL"></a>非SSL</h2><h3 id="elasticsearch-yaml配置文件"><a href="#elasticsearch-yaml配置文件" class="headerlink" title="elasticsearch.yaml配置文件"></a>elasticsearch.yaml配置文件</h3><p>这里以<code>node-1</code>为例，其他不同的地方就是 <code>node.name</code></p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="symbol">/data/es/node-1/config/elasticsearch.yml</span></span><br><span class="line"><span class="comment">#集群名称</span></span><br><span class="line">cluster.<span class="params">name:</span> elastic</span><br><span class="line"><span class="comment">#当前该节点的名称</span></span><br><span class="line">node.<span class="params">name:</span> node-<span class="number">1</span></span><br><span class="line"><span class="comment">#是不是有资格竞选主节点</span></span><br><span class="line">node.<span class="params">master:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#是否存储数据</span></span><br><span class="line">node.<span class="params">data:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#最大集群节点数</span></span><br><span class="line">node.<span class="params">max_local_storage_nodes:</span> <span class="number">3</span></span><br><span class="line"><span class="comment">#给当前节点自定义属性（可以省略）</span></span><br><span class="line"><span class="comment">#node.attr.rack: r1</span></span><br><span class="line"><span class="comment">#数据存档位置</span></span><br><span class="line">path.<span class="params">data:</span> <span class="symbol">/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="comment">#日志存放位置</span></span><br><span class="line">path.<span class="params">logs:</span> <span class="symbol">/usr/share/elasticsearch/log</span></span><br><span class="line"><span class="comment">#是否开启时锁定内存（默认为是）</span></span><br><span class="line"><span class="comment">#bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment">#设置网关地址，我是被这个坑死了，这个地址我原先填写了自己的实际物理IP地址，</span></span><br><span class="line"><span class="comment">#然后启动一直报无效的IP地址，无法注入9300端口，这里只需要填写0.0.0.0</span></span><br><span class="line">network.<span class="params">host:</span> <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="comment">#设置映射端口</span></span><br><span class="line">http.<span class="params">port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment">#内部节点之间沟通端口</span></span><br><span class="line">transport.tcp.<span class="params">port:</span> <span class="number">9300</span></span><br><span class="line"><span class="comment">#集群发现默认值为127.0.0.1:9300,如果要在其他主机上形成包含节点的群集,如果搭建集群则需要填写</span></span><br><span class="line"><span class="comment">#es7.x 之后新增的配置，写入候选主节点的设备地址，在开启服务后可以被选为主节点，也就是说把所有的节点都写上</span></span><br><span class="line">discovery.<span class="params">seed_hosts:</span> [<span class="string">"172.20.0.3"</span>,<span class="string">"172.20.0.4"</span>,<span class="string">"172.17.0.5"</span>]</span><br><span class="line"><span class="comment">#当你在搭建集群的时候，选出合格的节点集群，有些人说的太官方了，</span></span><br><span class="line"><span class="comment">#其实就是，让你选择比较好的几个节点，在你节点启动时，在这些节点中选一个做领导者，</span></span><br><span class="line"><span class="comment">#如果你不设置呢，elasticsearch就会自己选举，这里我们把三个节点都写上</span></span><br><span class="line">cluster.<span class="params">initial_master_nodes:</span> [<span class="string">"node-1"</span>,<span class="string">"node-2"</span>,<span class="string">"node-3"</span>]</span><br><span class="line"><span class="comment">#在群集完全重新启动后阻止初始恢复，直到启动N个节点</span></span><br><span class="line"><span class="comment">#简单点说在集群启动后，至少复活多少个节点以上，那么这个服务才可以被使用，否则不可以被使用，</span></span><br><span class="line">gateway.<span class="params">recover_after_nodes:</span> <span class="number">2</span></span><br><span class="line"><span class="comment">#删除索引是是否需要显示其名称，默认为显示</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br><span class="line"><span class="comment"># 禁用安全配置</span></span><br><span class="line">xpack.security.<span class="params">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="kibana-yaml"><a href="#kibana-yaml" class="headerlink" title="kibana.yaml"></a>kibana.yaml</h3><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="symbol">/data/kibana/config/kibana.yml</span></span><br><span class="line">server.<span class="params">host:</span> <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">server.<span class="params">port:</span> <span class="number">5601</span></span><br><span class="line">server.<span class="params">name:</span> <span class="string">"kibana"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kibana访问es服务器的URL,就可以有多个，以逗号","隔开</span></span><br><span class="line">elasticsearch.<span class="params">hosts:</span> [<span class="string">"http://172.20.0.3:9200"</span>,<span class="string">"http://172.20.0.4:9200"</span>,<span class="string">"http://172.20.0.5:9200"</span>]</span><br><span class="line">monitoring.ui.container.elasticsearch.<span class="params">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># kibana访问Elasticsearch的账号与密码(如果ElasticSearch设置了的话)</span></span><br><span class="line">elasticsearch.<span class="params">username:</span> <span class="string">""</span></span><br><span class="line">elasticsearch.<span class="params">password:</span> <span class="string">""</span></span><br><span class="line"><span class="comment"># kibana web语言</span></span><br><span class="line">i18n.<span class="params">locale:</span> <span class="string">"zh-CN"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@ip-<span class="number">10</span>-<span class="number">10</span>-<span class="number">10</span>-<span class="number">29</span>:/data<span class="comment"># docker-compose up -d</span></span><br><span class="line">[+] Running <span class="number">5</span>/<span class="number">5</span></span><br><span class="line"> ⠿ Network data_bitdata  Created                                                 <span class="number">0.0s</span></span><br><span class="line"> ⠿ Container <span class="keyword">node</span><span class="title">-2</span>      <span class="literal">Started</span>                                                 <span class="number">0.6s</span></span><br><span class="line"> ⠿ Container <span class="keyword">node</span><span class="title">-3</span>      <span class="literal">Started</span>                                                 <span class="number">0.8s</span></span><br><span class="line"> ⠿ Container <span class="keyword">node</span><span class="title">-1</span>      <span class="literal">Started</span>                                                 <span class="number">0.8s</span></span><br><span class="line"> ⠿ Container kibana      <span class="literal">Started</span>                                                 <span class="number">0.5s</span></span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE                                                                        COMMAND                  CREATED              STATUS                         PORTS                                                  NAMES</span><br><span class="line"><span class="number">4</span>d5dae9021be   registry.cn-hangzhou.aliyuncs.com/bigdata_cloudnative/elasticsearch:<span class="number">7.17</span>.<span class="number">5</span>   <span class="string">"/bin/tini -- /usr/l…"</span>   About a minute ago   Up About a minute (healthy)    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9200</span>-&gt;<span class="number">9200</span>/tcp, :::<span class="number">9200</span>-&gt;<span class="number">9200</span>/tcp, <span class="number">9300</span>/tcp    <span class="keyword">node</span><span class="title">-1</span></span><br><span class="line"><span class="number">84</span>e191d6f875   registry.cn-hangzhou.aliyuncs.com/bigdata_cloudnative/elasticsearch:<span class="number">7.17</span>.<span class="number">5</span>   <span class="string">"/bin/tini -- /usr/l…"</span>   About a minute ago   Up About a minute (healthy)    <span class="number">9300</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9202</span>-&gt;<span class="number">9200</span>/tcp, :::<span class="number">9202</span>-&gt;<span class="number">9200</span>/tcp    <span class="keyword">node</span><span class="title">-3</span></span><br><span class="line"><span class="number">758</span>a4bff2a73   registry.cn-hangzhou.aliyuncs.com/bigdata_cloudnative/elasticsearch:<span class="number">7.17</span>.<span class="number">5</span>   <span class="string">"/bin/tini -- /usr/l…"</span>   About a minute ago   Up About a minute (healthy)    <span class="number">9300</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">9201</span>-&gt;<span class="number">9200</span>/tcp, :::<span class="number">9201</span>-&gt;<span class="number">9200</span>/tcp    <span class="keyword">node</span><span class="title">-2</span></span><br><span class="line">fe55f0446902   registry.cn-hangzhou.aliyuncs.com/bigdata_cloudnative/kibana:<span class="number">7.17</span>.<span class="number">5</span>          <span class="string">"/bin/tini -- /usr/l…"</span>   About a minute ago   Up About a minute (healthy)    <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5601</span>-&gt;<span class="number">5601</span>/tcp, :::<span class="number">5601</span>-&gt;<span class="number">5601</span>/tcp              kibana</span><br></pre></td></tr></tbody></table></figure><p>上面已经启动，如果有报错查看容器日志就行了，之前部署的时候报错内容还是很清晰</p><p>进入容器查看：</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch</span><span class="comment"># curl localhost:9200</span></span><br><span class="line">{</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"node-1"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elastic"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"tcKUxyWVQb-7LV4zmomsgg"</span>,</span><br><span class="line">  <span class="string">"version"</span> : {</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.17.5"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"8d61b4f7ddf931f219e3745f295ed2bbc50c8e84"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2022-06-23T21:57:28.736740635Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.11.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">}</span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch</span><span class="comment"># curl 172.20.3:9200</span></span><br><span class="line">{</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"node-1"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elastic"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"tcKUxyWVQb-7LV4zmomsgg"</span>,</span><br><span class="line">  <span class="string">"version"</span> : {</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.17.5"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"8d61b4f7ddf931f219e3745f295ed2bbc50c8e84"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2022-06-23T21:57:28.736740635Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.11.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">}</span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch</span><span class="comment"># curl 172.20.4:9200</span></span><br><span class="line">{</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"node-2"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elastic"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"tcKUxyWVQb-7LV4zmomsgg"</span>,</span><br><span class="line">  <span class="string">"version"</span> : {</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.17.5"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"8d61b4f7ddf931f219e3745f295ed2bbc50c8e84"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2022-06-23T21:57:28.736740635Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.11.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">}</span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch</span><span class="comment"># curl 172.20.5:9200</span></span><br><span class="line">{</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"node-3"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elastic"</span>,</span><br><span class="line">  <span class="string">"cluster_uuid"</span> : <span class="string">"tcKUxyWVQb-7LV4zmomsgg"</span>,</span><br><span class="line">  <span class="string">"version"</span> : {</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"7.17.5"</span>,</span><br><span class="line">    <span class="string">"build_flavor"</span> : <span class="string">"default"</span>,</span><br><span class="line">    <span class="string">"build_type"</span> : <span class="string">"docker"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"8d61b4f7ddf931f219e3745f295ed2bbc50c8e84"</span>,</span><br><span class="line">    <span class="string">"build_date"</span> : <span class="string">"2022-06-23T21:57:28.736740635Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"8.11.1"</span>,</span><br><span class="line">    <span class="string">"minimum_wire_compatibility_version"</span> : <span class="string">"6.8.0"</span>,</span><br><span class="line">    <span class="string">"minimum_index_compatibility_version"</span> : <span class="string">"6.0.0-beta1"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">}</span><br><span class="line">root<span class="variable">@ip</span><span class="number">-10</span><span class="number">-10</span><span class="number">-10</span><span class="number">-29</span><span class="symbol">:/data</span><span class="comment"># curl -s 172.20.0.3:9200/_cluster/health | python3 -m json.tool</span></span><br><span class="line">{</span><br><span class="line">    <span class="string">"cluster_name"</span>: <span class="string">"elastic"</span>,</span><br><span class="line">    <span class="string">"status"</span>: <span class="string">"green"</span>,</span><br><span class="line">    <span class="string">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"number_of_nodes"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"number_of_data_nodes"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"active_primary_shards"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"active_shards"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="string">"relocating_shards"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"initializing_shards"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"unassigned_shards"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"delayed_unassigned_shards"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"number_of_pending_tasks"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"number_of_in_flight_fetch"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"task_max_waiting_in_queue_millis"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"active_shards_percent_as_number"</span>: <span class="number">100.0</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>以上说明ES集群已经正常工作，看一下通过nginx代理转发到kibana的结果</p><p><img src="/2024/07/23/Docker%E6%9E%84%E5%BB%BA%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%B9%B3%E5%8F%B0EFK-TLS/1.png"></p><p>kibana也能正常工作，只是这里在访问的时候直接就进入了kibana，如果不加一个身份验证功能，这就等于裸奔，即便在放在内网也是极其不安全的，所以需要加一个身份验证。</p><h2 id="SSL方式"><a href="#SSL方式" class="headerlink" title="SSL方式"></a>SSL方式</h2><p>利用自带的工具生成证书，也可以自行生成证书，但注意要限制域名和IP，否则在进行https通讯时会校验失败</p><p>进入node-1容器 ，操作</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@ip</span><span class="number">-10</span><span class="number">-10</span><span class="number">-10</span><span class="number">-29</span><span class="symbol">:~</span><span class="comment"># docker exec -it node-1 bash</span></span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据实际情况配置生成证书的yaml</span></span><br><span class="line">cat &lt;&lt;<span class="title class_">EOF</span> &gt; /usr/share/elasticsearch/node.yml</span><br><span class="line"><span class="symbol">instances:</span></span><br><span class="line">  - <span class="symbol">name:</span> <span class="string">"node"</span></span><br><span class="line">    <span class="symbol">ip:</span></span><br><span class="line">      - <span class="string">"172.20.0.3"</span></span><br><span class="line">      - <span class="string">"172.20.0.4"</span></span><br><span class="line">      - <span class="string">"172.20.0.5"</span></span><br><span class="line">      - <span class="string">"127.0.0.1"</span></span><br><span class="line">      - <span class="string">"172.20.0.6"</span></span><br><span class="line">      - <span class="string">"10.10.10.29"</span> <span class="comment"># 这个IP是服务器的IP地址，因为我这里使用的是docker运行es集群，这个必须加上去</span></span><br><span class="line">    <span class="symbol">dns:</span></span><br><span class="line">      - <span class="string">"node-1"</span></span><br><span class="line">      - <span class="string">"node-2"</span></span><br><span class="line">      - <span class="string">"node-3 "</span></span><br><span class="line">      - <span class="string">"localhost"</span></span><br><span class="line">      - <span class="string">"kibana"</span></span><br><span class="line">      - <span class="string">"others"</span></span><br><span class="line"><span class="title class_">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成ca证书，默认文件名为elastic-stack-ca.p12，可添加密码</span></span><br><span class="line">bin/elasticsearch-certutil ca <span class="comment"># 一路回车即可</span></span><br><span class="line"><span class="comment"># 生成证书，默认文件名为certificate-bundle.zip</span></span><br><span class="line">bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12 --silent --<span class="keyword">in</span> node.yml  <span class="comment"># 一路回车即可</span></span><br><span class="line"><span class="comment"># 将证书复制到node-1配置目录下</span></span><br><span class="line"></span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch</span><span class="comment"># cp certificate-bundle.zip elastic-stack-ca.p12 config/certs/</span></span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch</span><span class="comment"># cd config/certs/</span></span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch/config/certs</span><span class="comment"># ls</span></span><br><span class="line">certificate-bundle.zip  elastic-stack-ca.p12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压证书，目录结构为 实例名/实例名.p12 ,此处为node/node.p12</span></span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch/config/certs</span><span class="comment"># unzip certificate-bundle.zip </span></span><br><span class="line"><span class="symbol">Archive:</span>  certificate-bundle.zip</span><br><span class="line">   <span class="symbol">creating:</span> node/</span><br><span class="line">  <span class="symbol">inflating:</span> node/node.p12           </span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch/config/certs</span><span class="comment"># ls</span></span><br><span class="line">certificate-bundle.zip  elastic-stack-ca.p12  node</span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch/config/certs</span><span class="comment"># ls node/</span></span><br><span class="line">node.p12</span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch/config/certs</span><span class="comment"># rm -rf node certificate-bundle.zip</span></span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch/config/certs</span><span class="comment"># ls</span></span><br><span class="line">certificate-bundle.zip  elastic-stack-ca.p12  node.p12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改证书访问权限</span></span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch/config</span><span class="comment"># chown -R root:elasticsearch certs/       </span></span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch/config</span><span class="comment"># chmod -R a+rx certs/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时我们需要的证书已经生成了，同样的方式复制到node-2,node3后修改权限，修改属主等操作</span></span><br><span class="line"><span class="comment"># 退出容器,进入node-1的挂在目录：</span></span><br><span class="line">root<span class="variable">@ip</span><span class="number">-10</span><span class="number">-10</span><span class="number">-10</span><span class="number">-29</span><span class="symbol">:/data/es/node-</span><span class="number">1</span>/certs<span class="comment"># pwd</span></span><br><span class="line">/data/es/node<span class="number">-1</span>/certs</span><br><span class="line"></span><br><span class="line">root<span class="variable">@ip</span><span class="number">-10</span><span class="number">-10</span><span class="number">-10</span><span class="number">-29</span><span class="symbol">:/data/es/node-</span><span class="number">1</span>/certs<span class="comment"># cd ..</span></span><br><span class="line">root<span class="variable">@ip</span><span class="number">-10</span><span class="number">-10</span><span class="number">-10</span><span class="number">-29</span><span class="symbol">:/data/es/node-</span><span class="number">1</span><span class="comment"># ls</span></span><br><span class="line">certs  config  data  log</span><br><span class="line">root<span class="variable">@ip</span><span class="number">-10</span><span class="number">-10</span><span class="number">-10</span><span class="number">-29</span><span class="symbol">:/data/es/node-</span><span class="number">1</span><span class="comment"># cp -rf certs ../node-2/</span></span><br><span class="line">root<span class="variable">@ip</span><span class="number">-10</span><span class="number">-10</span><span class="number">-10</span><span class="number">-29</span><span class="symbol">:/data/es/node-</span><span class="number">1</span><span class="comment"># cp -rf certs ../node-3/</span></span><br><span class="line">root<span class="variable">@ip</span><span class="number">-10</span><span class="number">-10</span><span class="number">-10</span><span class="number">-29</span><span class="symbol">:/data/es/node-</span><span class="number">1</span><span class="comment"># </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 证书已经准备完毕</span></span><br><span class="line">es/</span><br><span class="line">├── node<span class="number">-1</span></span><br><span class="line">│&nbsp;&nbsp; ├── certs</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── elastic-stack-ca.p12</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── node.p12</span><br><span class="line">│&nbsp;&nbsp; ├── config</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── elasticsearch.yml</span><br><span class="line">│&nbsp;&nbsp; ├── data</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── nodes</span><br><span class="line">│&nbsp;&nbsp; └── log</span><br><span class="line">├── node<span class="number">-2</span></span><br><span class="line">│&nbsp;&nbsp; ├── certs</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── elastic-stack-ca.p12</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── node.p12</span><br><span class="line">│&nbsp;&nbsp; ├── config</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── elasticsearch.yml</span><br><span class="line">│&nbsp;&nbsp; ├── data</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── nodes</span><br><span class="line">│&nbsp;&nbsp; └── log</span><br><span class="line">├── node<span class="number">-3</span></span><br><span class="line">│&nbsp;&nbsp; ├── certs</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── elastic-stack-ca.p12</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── node.p12</span><br><span class="line">│&nbsp;&nbsp; ├── config</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── elasticsearch.yml</span><br><span class="line">│&nbsp;&nbsp; ├── data</span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── nodes</span><br><span class="line">│&nbsp;&nbsp; └── log</span><br><span class="line">└── plugins</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>修改配置文件/data/es/node-1/config/elasticsearch.yml. 以节点<code>node-1</code>为例</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的内容同非ssl部署一样</span></span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line"><span class="comment"># 开启xpack安全特性</span></span><br><span class="line">xpack.security.<span class="params">enabled:</span> <span class="literal">true</span></span><br><span class="line">xpack.security.authc.api_key.<span class="params">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 开启https并配置证书</span></span><br><span class="line">xpack.security.http.ssl.<span class="params">enabled:</span> <span class="literal">true</span></span><br><span class="line">xpack.security.http.ssl.keystore.<span class="params">path:</span> certs<span class="symbol">/node.p12</span></span><br><span class="line">xpack.security.http.ssl.truststore.<span class="params">path:</span> certs<span class="symbol">/node.p12</span></span><br><span class="line"><span class="comment"># 开启节点间通讯ssl并配置证书</span></span><br><span class="line">xpack.security.transport.ssl.<span class="params">enabled:</span> <span class="literal">true</span></span><br><span class="line">xpack.security.transport.ssl.<span class="params">verification_mode:</span> certificate</span><br><span class="line">xpack.security.transport.ssl.<span class="params">client_authentication:</span> required</span><br><span class="line">xpack.security.transport.ssl.keystore.<span class="params">path:</span> certs<span class="symbol">/node.p12</span></span><br><span class="line">xpack.security.transport.ssl.truststore.<span class="params">path:</span> certs<span class="operator">/</span>node.p12</span><br></pre></td></tr></tbody></table></figure><p>每个节点都需修改后，重启一下es集群 </p><p>重启完毕后，查看状态和日志，检查是否有异常  </p><p>若无异常，可以开始设置密码， 进入容器 <code>node-1</code></p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@ip</span><span class="number">-10</span><span class="number">-10</span><span class="number">-10</span><span class="number">-29</span><span class="symbol">:/data</span><span class="comment"># docker exec -it node-1 bash</span></span><br><span class="line">root<span class="variable">@node</span><span class="number">-1</span><span class="symbol">:/usr/share/elasticsearch</span><span class="comment"># ./bin/elasticsearch-setup-passwords auto </span></span><br><span class="line"><span class="title class_">Initiating</span> the setup of passwords <span class="keyword">for</span> reserved users elastic,apm_system,kibana,kibana_system,logstash_system,beats_system,remote_monitoring_user.</span><br><span class="line"><span class="title class_">The</span> passwords will be randomly generated <span class="keyword">and</span> printed to the console.</span><br><span class="line"><span class="title class_">Please</span> confirm that you would like to continue [y/N]y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若集群没问题的话这里就会自动生成系统的一些密码：</span></span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以手动自定义密码</span></span><br><span class="line">./bin/elasticsearch-setup-passwords interactive</span><br></pre></td></tr></tbody></table></figure><p>使用 ES API 检查各个节点是否正常</p><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -k --<span class="keyword">user</span> <span class="title">elastic</span>:密码 -X GET <span class="string">"https://172.20.0.3:9200"</span> --cert-<span class="keyword">type</span> P12 --cert /usr/share/elasticsearch/config/certs/node.p12</span><br><span class="line">curl -k --<span class="keyword">user</span> <span class="title">elastic</span>:密码 -X GET <span class="string">"https://172.20.0.4:9200"</span> --cert-<span class="keyword">type</span> P12 --cert /usr/share/elasticsearch/config/certs/node.p12</span><br><span class="line">curl -k --<span class="keyword">user</span> <span class="title">elastic</span>:密码 -X GET <span class="string">"https://172.20.0.5:9200"</span> --cert-<span class="keyword">type</span> P12 --cert /usr/share/elasticsearch/config/certs/node.p12</span><br></pre></td></tr></tbody></table></figure><p>此时ssl已配置完毕，配置kibana</p><figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 把之前放在node-1下面的证书复制到kibana/cert下面：</span><br><span class="line"># 提取公钥</span><br><span class="line">openssl pkcs12 -<span class="keyword">in</span> elastic-<span class="keyword">stack</span>-<span class="keyword">ca</span>.p12 -<span class="keyword">out</span> elastic-<span class="keyword">stack</span>-<span class="keyword">ca</span>.pem -nokeys -clcerts</span><br><span class="line">openssl pkcs12 -<span class="keyword">in</span> node.p12 -<span class="keyword">out</span> node.pem -nokeys -clcerts</span><br><span class="line"># 提取私钥</span><br><span class="line">openssl pkcs12 -<span class="keyword">in</span> node.p12 -<span class="keyword">out</span> node.key -nocerts -nodes</span><br></pre></td></tr></tbody></table></figure><p>修改配置文件kibana/config/kibana.yml</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="params">host:</span> <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="comment"># 监听端口</span></span><br><span class="line">server.<span class="params">port:</span> <span class="number">5601</span></span><br><span class="line">server.<span class="params">name:</span> <span class="string">"kibana"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kibana访问es服务器的URL,就可以有多个，以逗号","隔开</span></span><br><span class="line"><span class="comment"># es 开启了 ssl，所以这里的url 必须使用https协议</span></span><br><span class="line">elasticsearch.<span class="params">hosts:</span> [<span class="string">"https://172.20.0.3:9200"</span>,<span class="string">"https://172.20.0.4:9200"</span>,<span class="string">"https://172.20.0.5:9200"</span>]</span><br><span class="line">monitoring.ui.container.elasticsearch.<span class="params">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># kibana访问Elasticsearch的账号与密码(如果ElasticSearch设置了的话)</span></span><br><span class="line">elasticsearch.<span class="params">username:</span> <span class="string">"kibana_system"</span></span><br><span class="line">elasticsearch.<span class="params">password:</span> <span class="string">"xxxxxxxxxxxx"</span></span><br><span class="line"><span class="comment"># kibana web语言</span></span><br><span class="line">i18n.<span class="params">locale:</span> <span class="string">"zh-CN"</span></span><br><span class="line"><span class="comment"># es证书配置, 这里是在docker-compose中已经挂载进容器了</span></span><br><span class="line">elasticsearch.ssl.<span class="params">certificate:</span> <span class="symbol">/etc/kibana/cert/node.pem</span></span><br><span class="line">elasticsearch.ssl.<span class="params">key:</span> <span class="symbol">/etc/kibana/cert/node.key</span></span><br><span class="line"><span class="comment"># es的ca证书</span></span><br><span class="line">elasticsearch.ssl.<span class="params">certificateAuthorities:</span> [ <span class="string">"/etc/kibana/cert/elastic-stack-ca.pem"</span> ]</span><br></pre></td></tr></tbody></table></figure><p>修改完毕后 ，重新部署一下 kibana服务即可</p><p><img src="/2024/07/23/Docker%E6%9E%84%E5%BB%BA%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%B9%B3%E5%8F%B0EFK-TLS/2.png"></p><p>以上只要登录就可以使用了。</p><h2 id="Filebeat-日志采集"><a href="#Filebeat-日志采集" class="headerlink" title="Filebeat 日志采集"></a>Filebeat 日志采集</h2><p>这里我才用的方式是 docker运行 filebeat服务，然后将网关服务器的Nginx日志挂载进filebeat</p><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="keyword">/opt/</span>filbeat/docker-compose.yaml</span><br><span class="line"><span class="symbol">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  filebeat:</span></span><br><span class="line"><span class="symbol">    container_name:</span> filebeat_test</span><br><span class="line"><span class="symbol">    image:</span> elastic/filebeat:<span class="number">7.9</span><span class="number">.0</span></span><br><span class="line"><span class="symbol">    user:</span> root</span><br><span class="line"><span class="symbol">    volumes:</span></span><br><span class="line">      - <span class="keyword">/data/</span>wwwlogs/:<span class="keyword">/var/</span>log/nginx:ro</span><br><span class="line">      - ./filebeat.yml:<span class="keyword">/usr/</span>share<span class="keyword">/filebeat/</span>filebeat.yml:ro</span><br><span class="line">      - ./ca.crt:<span class="keyword">/usr/</span>share<span class="keyword">/filebeat/</span>certs/ca.crt</span><br><span class="line">      <span class="meta"># 这个证书在接入kibana的时候已经提取出来了，即文件：elastic-stack-ca.pem</span></span><br><span class="line">      <span class="meta"># 他们内容是一样的只是文件名、格式不一样</span></span><br><span class="line"><span class="symbol">    command:</span> filebeat -e</span><br></pre></td></tr></tbody></table></figure><p>filebeat的配置文件在 /opt/filebeat/filebeat.yml</p><figure class="highlight clean"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/filebeat/filebeat.yml</span><br><span class="line">filebeat.inputs:  </span><br><span class="line">##################################################################################</span><br><span class="line">- type: log</span><br><span class="line">  paths:  </span><br><span class="line">    - /var/log/nginx/testnet-xxxxxxxxxxxx.com.log</span><br><span class="line">  tags: [<span class="string">"proxy-testnet-xxxxxxxxxxxx.com.log"</span>]  </span><br><span class="line">  fields:  </span><br><span class="line">    index: <span class="string">"proxy-testnet-xxxxxxxxxxxx.com.log"</span>  </span><br><span class="line">  json.keys_under_root: true</span><br><span class="line">  json.overwrite_keys: true</span><br><span class="line">  processors:  </span><br><span class="line">    - add_kubernetes_metadata:  </span><br><span class="line">        matchers:  </span><br><span class="line">        - logs_path:  </span><br><span class="line">            logs_path: <span class="string">"/var/log/nginx/"</span>  </span><br><span class="line">    - decode_json_fields:  </span><br><span class="line">        when:  </span><br><span class="line">           regexp:  </span><br><span class="line">             message: <span class="string">"{*}"</span>  </span><br><span class="line">        fields: [<span class="string">"message"</span>]  </span><br><span class="line">        overwrite_keys: true  </span><br><span class="line">##################################################################################</span><br><span class="line">output.elasticsearch:  </span><br><span class="line">  hosts: [<span class="string">"https://10.10.10.29:9200"</span>,<span class="string">"https://10.10.10.29:9201"</span>,<span class="string">"https://10.10.10.29:9201"</span>]</span><br><span class="line">  username: elastic</span><br><span class="line">  password: vDNnbd8FXqR2i13NYGfj</span><br><span class="line">  ssl.certificate_authorities:</span><br><span class="line">    - /usr/share/filebeat/certs/ca.crt</span><br><span class="line">  indices:  </span><br><span class="line">    - index: <span class="string">"proxy-testnet-xxxxxxxxxxxx.com.log-%{+yyyy.MM.dd}"</span>  </span><br><span class="line">      when.contains:  </span><br><span class="line">        fields:  </span><br><span class="line">          index: <span class="string">"proxy-testnet-xxxxxxxxxxxx.com.log"</span> </span><br><span class="line">setup.kibana:</span><br><span class="line">  hosts: <span class="string">"http://10.10.10.29:5601"</span></span><br><span class="line">  username: <span class="string">"elastic"</span></span><br><span class="line">  password: <span class="string">"xxxxxxxxxxxx"</span></span><br></pre></td></tr></tbody></table></figure><p>配置完毕之后，查看日志是否异常，如果没有异常，到<code>node-1</code>上面通过ES API查询是否有index生成</p><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@node-1:/usr/share/elasticsearch# curl -k --user elastic:xxxxxxxxxxxx -X GET "https://172.20.0.3:9200/<span class="emphasis">_cat/indices " --cert-type P12 --cert /usr/share/elasticsearch/config/certs/node.p12</span></span><br><span class="line"><span class="emphasis">......</span></span><br><span class="line"><span class="emphasis">......</span></span><br><span class="line"><span class="emphasis">......</span></span><br><span class="line"><span class="emphasis">green open proxy-testnet-xxxxxxxxxxxx.com.log-2024.07.23 Su-T62zGTheqbDsDZLzH_</span>A 1 1 2911    0   1.7mb 914.2kb</span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code">......</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Kibana配置"><a href="#Kibana配置" class="headerlink" title="Kibana配置"></a>Kibana配置</h2><p>上面可以看到filebeat已经正常往ES写入数据，在kibana中配置一下：</p><p><code>Stack Manager</code> - <code>Index Patterns</code> - <code>Create index pattern</code></p><p><img src="/2024/07/23/Docker%E6%9E%84%E5%BB%BA%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%B9%B3%E5%8F%B0EFK-TLS/3.png"></p><p>直接创建后菜单栏： <code>Discover</code> 选择刚刚创建的这个Index Pattern</p><p><img src="/2024/07/23/Docker%E6%9E%84%E5%BB%BA%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%B9%B3%E5%8F%B0EFK-TLS/4.png"><br>最后直接就可以看到收集到的日志kibana已经做好了字段分隔，只需要选择需要的字段，或者匹配某些字段就可以了。</p><p>比如 我想看状态码大于等于500的： <code>status &gt;= 500</code>，都可以在上面的搜索框中去定义筛选</p><p>当然也可以把这个日志做成可视化，但选择某个指标的时候，其他指标也可以联动起来，例如：<br><img src="/2024/07/23/Docker%E6%9E%84%E5%BB%BA%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%B9%B3%E5%8F%B0EFK-TLS/5.png"></p><p>最后再结合前面写过的 <a href="https://blog.sctux.cc/2024/07/16/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8ElastAlert2%E5%AF%B9ES%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97%E5%88%9B%E5%BB%BA%E5%91%8A%E8%AD%A6/">如何利用ElastAlert2对ES中的日志创建告警</a> 就可以轻松的对日志进行监控告警啦~</p><p>写在最后 </p><p>上面过程仅仅是记录，主要还是思路。</p><p><img src="/2024/07/23/Docker%E6%9E%84%E5%BB%BA%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E5%B9%B3%E5%8F%B0EFK-TLS/6.png"></p><h2 id="k8s-version"><a href="#k8s-version" class="headerlink" title="k8s version"></a>k8s version</h2><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---  </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat-config</span>  </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ops</span></span><br><span class="line">  <span class="attr">labels:</span>  </span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">filebeat</span>  </span><br><span class="line"><span class="attr">data:</span>  </span><br><span class="line">  <span class="attr">filebeat.yml:</span> <span class="string">|-  </span></span><br><span class="line"><span class="string">    #====================== input =================  </span></span><br><span class="line"><span class="string">    filebeat.inputs:  </span></span><br><span class="line"><span class="string">    # nginx-ingress  </span></span><br><span class="line"><span class="string">    - type: container  </span></span><br><span class="line"><span class="string">      paths:  </span></span><br><span class="line"><span class="string">        - /var/log/containers/*goerli-testnet-collector*.log  </span></span><br><span class="line"><span class="string">      tags: ["goerli-testnet-collector"]  </span></span><br><span class="line"><span class="string">      fields:  </span></span><br><span class="line"><span class="string">        index: "goerli-testnet-collector"  </span></span><br><span class="line"><span class="string">      processors:  </span></span><br><span class="line"><span class="string">        - add_kubernetes_metadata:  </span></span><br><span class="line"><span class="string">            host: ${NODE_NAME}  </span></span><br><span class="line"><span class="string">            matchers:  </span></span><br><span class="line"><span class="string">            - logs_path:  </span></span><br><span class="line"><span class="string">                logs_path: "/var/log/containers/"  </span></span><br><span class="line"><span class="string">        - decode_json_fields:  </span></span><br><span class="line"><span class="string">            when:  </span></span><br><span class="line"><span class="string">               regexp:  </span></span><br><span class="line"><span class="string">                 message: "{*}"  </span></span><br><span class="line"><span class="string">            fields: ["message"]  </span></span><br><span class="line"><span class="string">            overwrite_keys: true  </span></span><br><span class="line"><span class="string">            target: ""  </span></span><br><span class="line"><span class="string">    # testnet-bsc-collector  </span></span><br><span class="line"><span class="string">    - type: container  </span></span><br><span class="line"><span class="string">      paths:  </span></span><br><span class="line"><span class="string">        - /var/log/containers/*testnet-bsc-collector*.log  </span></span><br><span class="line"><span class="string">      tags: ["testnet-bsc-collector"]  </span></span><br><span class="line"><span class="string">      fields:  </span></span><br><span class="line"><span class="string">        index: "testnet-bsc-collector"  </span></span><br><span class="line"><span class="string">      processors:  </span></span><br><span class="line"><span class="string">        - add_kubernetes_metadata:  </span></span><br><span class="line"><span class="string">            host: ${NODE_NAME}  </span></span><br><span class="line"><span class="string">            matchers:  </span></span><br><span class="line"><span class="string">            - logs_path:  </span></span><br><span class="line"><span class="string">                logs_path: "/var/log/containers/"  </span></span><br><span class="line"><span class="string">        - decode_json_fields:  </span></span><br><span class="line"><span class="string">            when:  </span></span><br><span class="line"><span class="string">               regexp:  </span></span><br><span class="line"><span class="string">                 message: "{*}"  </span></span><br><span class="line"><span class="string">            fields: ["message"]  </span></span><br><span class="line"><span class="string">            #overwrite_keys: true  </span></span><br><span class="line"><span class="string">            target: ""  </span></span><br><span class="line"><span class="string">    #================ output =====================  </span></span><br><span class="line"><span class="string">    output.elasticsearch:  </span></span><br><span class="line"><span class="string">      hosts: ["https://10.10.20.23:9200", "https://10.10.20.120:9200", "https://10.10.20.160:9200"]</span></span><br><span class="line"><span class="string">      username: elastic</span></span><br><span class="line"><span class="string">      password: r40SgkMhmjwK8rIpClFM</span></span><br><span class="line"><span class="string">      ssl.certificate_authorities:</span></span><br><span class="line"><span class="string">        - /usr/share/filebeat/ca.crt</span></span><br><span class="line"><span class="string">      indices:  </span></span><br><span class="line"><span class="string">        - index: "INDEX-NAME-%{+yyyy.MM.dd}"  </span></span><br><span class="line"><span class="string">          when.contains:  </span></span><br><span class="line"><span class="string">            fields:  </span></span><br><span class="line"><span class="string">              index: "INDEX-NAME"  </span></span><br><span class="line"><span class="string">        - index: "testnet-bsc-collector-%{+yyyy.MM.dd}"  </span></span><br><span class="line"><span class="string">          when.contains:  </span></span><br><span class="line"><span class="string">            fields:  </span></span><br><span class="line"><span class="string">              index: "testnet-bsc-collector"  </span></span><br><span class="line"><span class="string"></span>  </span><br><span class="line">    <span class="comment">#============== Elasticsearch template setting ==========  </span></span><br><span class="line">    <span class="attr">setup.ilm.enabled:</span> <span class="literal">false</span>  </span><br><span class="line">    <span class="attr">setup.template.name:</span> <span class="string">'k8s-logs'</span>  </span><br><span class="line">    <span class="attr">setup.template.pattern:</span> <span class="string">'k8s-logs-*'</span>  </span><br><span class="line">    <span class="attr">processors:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">drop_fields:</span>  </span><br><span class="line">          <span class="attr">fields:</span> [<span class="string">"agent"</span>,<span class="string">"kubernetes.labels"</span>,<span class="string">"input.type"</span>,<span class="string">"log"</span>,<span class="string">"ecs.version"</span>,<span class="string">"host.name"</span>,<span class="string">"kubernetes.replicaset.name"</span>,<span class="string">"kubernetes.pod.uid"</span>,<span class="string">"kubernetes.pod.uid"</span>,<span class="string">"tags"</span>,<span class="string">"stream"</span>,<span class="string">"kubernetes.container.name"</span>]  </span><br><span class="line"><span class="meta">---  </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span>  </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ops</span></span><br><span class="line">  <span class="attr">labels:</span>  </span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">filebeat</span>  </span><br><span class="line"><span class="attr">spec:</span>  </span><br><span class="line">  <span class="attr">selector:</span>  </span><br><span class="line">    <span class="attr">matchLabels:</span>  </span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">filebeat</span>  </span><br><span class="line">  <span class="attr">template:</span>  </span><br><span class="line">    <span class="attr">metadata:</span>  </span><br><span class="line">      <span class="attr">labels:</span>  </span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">filebeat</span>  </span><br><span class="line">    <span class="attr">spec:</span>  </span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">filebeat</span>  </span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span>  </span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span>  </span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirstWithHostNet</span>  </span><br><span class="line">      <span class="attr">tolerations:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoSchedule</span>  </span><br><span class="line">        <span class="attr">operator:</span> <span class="string">Exists</span>  </span><br><span class="line">      <span class="attr">containers:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">filebeat</span>  </span><br><span class="line">        <span class="attr">image:</span> <span class="string">elastic/filebeat:7.9.0</span>  </span><br><span class="line">        <span class="attr">args:</span> [  </span><br><span class="line">          <span class="string">"-c"</span>, <span class="string">"/etc/filebeat.yml"</span>,  </span><br><span class="line">          <span class="string">"-e"</span>,  </span><br><span class="line">        ]  </span><br><span class="line">        <span class="attr">env:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_NAME</span>  </span><br><span class="line">          <span class="attr">valueFrom:</span>  </span><br><span class="line">            <span class="attr">fieldRef:</span>  </span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span>  </span><br><span class="line">        <span class="attr">securityContext:</span>  </span><br><span class="line">          <span class="attr">runAsUser:</span> <span class="number">0</span>  </span><br><span class="line">          <span class="comment"># If using Red Hat OpenShift uncomment this:  </span></span><br><span class="line">          <span class="comment">#privileged: true  </span></span><br><span class="line">        <span class="attr">resources:</span>  </span><br><span class="line">          <span class="attr">limits:</span>  </span><br><span class="line">            <span class="attr">memory:</span> <span class="string">200Mi</span>  </span><br><span class="line">          <span class="attr">requests:</span>  </span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">100m</span>  </span><br><span class="line">            <span class="attr">memory:</span> <span class="string">100Mi</span>  </span><br><span class="line">        <span class="attr">volumeMounts:</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span>  </span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/filebeat.yml</span>  </span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span>  </span><br><span class="line">          <span class="attr">subPath:</span> <span class="string">filebeat.yml</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span>  </span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/filebeat/data</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlibdockercontainers</span>  </span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/containerd/</span>  </span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span>  </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span>  </span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/log</span>  </span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span>  </span><br><span class="line">      <span class="attr">volumes:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span>  </span><br><span class="line">        <span class="attr">configMap:</span>  </span><br><span class="line">          <span class="attr">defaultMode:</span> <span class="number">0600</span>  </span><br><span class="line">          <span class="attr">name:</span> <span class="string">filebeat-config</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlibdockercontainers</span>  </span><br><span class="line">        <span class="attr">hostPath:</span>  </span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/lib/containerd/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">varlog</span>  </span><br><span class="line">        <span class="attr">hostPath:</span>  </span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/log</span>  </span><br><span class="line">      <span class="comment"># data folder stores a registry of read status for all files, so we don't send everything again on a Filebeat pod restart  </span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span>  </span><br><span class="line">        <span class="attr">hostPath:</span>  </span><br><span class="line">          <span class="attr">path:</span> <span class="string">/var/lib/filebeat-data</span>  </span><br><span class="line">          <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span>  </span><br><span class="line"><span class="meta">---  </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span>  </span><br><span class="line"><span class="attr">subjects:</span>  </span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span>  </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ops</span></span><br><span class="line"><span class="attr">roleRef:</span>  </span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span>  </span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span>  </span><br><span class="line"><span class="meta">---  </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span>  </span><br><span class="line">  <span class="attr">labels:</span>  </span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">filebeat</span>  </span><br><span class="line"><span class="attr">rules:</span>  </span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">""</span>] <span class="comment"># "" indicates the core API group  </span></span><br><span class="line">  <span class="attr">resources:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">namespaces</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span>  </span><br><span class="line">  <span class="attr">verbs:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span>  </span><br><span class="line"><span class="meta">---  </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span>  </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ops</span></span><br><span class="line">  <span class="attr">labels:</span>  </span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">filebeat</span>  </span><br><span class="line"><span class="meta">---  </span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;如题， 主要记录一下之前搭建部署的一套日志收集系统。这里采用docker-compose的方式运行，还是那句话主要是思路。&lt;/p&gt;
&lt;p&gt;方式: &lt;code&gt;一台服务器上面利用docker-compose运行三个ES节点跟Kibana,并启用SSL,再使用Filebeat来收集服务器上面的应用日志到ES， 最后Kibana来做展示&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h1&gt;&lt;h3 id=&quot;目录创建&quot;&gt;&lt;a href=&quot;#目录创建&quot; class=&quot;headerlink&quot; title=&quot;目录创建&quot;&gt;&lt;/a&gt;目录创建&lt;/h3&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;mkdir&lt;/span&gt; -p /&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/{&lt;span class=&quot;title&quot;&gt;es&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;node&lt;/span&gt;-1/{&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;certs&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;logs&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;config&lt;/span&gt;},plugins}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;mkdir&lt;/span&gt; -p /&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/{&lt;span class=&quot;title&quot;&gt;es&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;node&lt;/span&gt;-2/{&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;certs&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;logs&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;config&lt;/span&gt;},plugins}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;mkdir&lt;/span&gt; -p /&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/{&lt;span class=&quot;title&quot;&gt;es&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;node&lt;/span&gt;-3/{&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;certs&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;logs&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;config&lt;/span&gt;},plugins}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;mkdir&lt;/span&gt; -p /&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt;/kibana/{&lt;span class=&quot;title&quot;&gt;certs&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;config&lt;/span&gt;} -p&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;部署文件&quot;&gt;&lt;a href=&quot;#部署文件&quot; class=&quot;headerlink&quot; title=&quot;部署文件&quot;&gt;&lt;/a&gt;部署文件&lt;/h3&gt;&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;services:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;params&quot;&gt;node-1:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;image:&lt;/span&gt; registry.cn-hangzhou.aliyuncs.com&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;bigdata_cloudnative&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;elasticsearch:&lt;span class=&quot;number&quot;&gt;7.17&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;networks:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;bitdata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;ipv4_address:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;172.20&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;container_name:&lt;/span&gt; node-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;hostname:&lt;/span&gt; node-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;ES_JAVA_OPTS=-Xms1024m -Xmx1024m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;TZ=Asia/Shanghai&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;ulimits:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;memlock:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;soft:&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;hard:&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;nofile:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;soft:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;hard:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;9200:9200&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;logging:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;driver:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;json-file&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;options:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;max-size:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;50m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;node-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;config&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;elasticsearch.yml:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/config/elasticsearch.yml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;plugins:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/plugins&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;node-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;data:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;node-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;certs:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/config/certs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;node-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;log:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;healthcheck:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;test:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;CMD-SHELL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;curl -I http://localhost:9200 || exit 1&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;interval:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;timeout:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;retries:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;params&quot;&gt;node-2:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;image:&lt;/span&gt; registry.cn-hangzhou.aliyuncs.com&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;bigdata_cloudnative&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;elasticsearch:&lt;span class=&quot;number&quot;&gt;7.17&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;networks:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;bitdata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;ipv4_address:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;172.20&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;container_name:&lt;/span&gt; node-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;hostname:&lt;/span&gt; node-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;ES_JAVA_OPTS=-Xms1024m -Xmx1024m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;TZ=Asia/Shanghai&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;ulimits:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;memlock:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;soft:&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;hard:&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;nofile:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;soft:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;hard:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;9201:9200&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;logging:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;driver:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;json-file&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;options:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;max-size:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;50m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;node-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;config&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;elasticsearch.yml:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/config/elasticsearch.yml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;plugins:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/plugins&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;node-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;data:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;node-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;certs:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/config/certs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;node-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;log:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;healthcheck:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;test:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;CMD-SHELL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;curl -I http://localhost:9200 || exit 1&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;interval:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;timeout:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;retries:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;params&quot;&gt;node-3:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;image:&lt;/span&gt; registry.cn-hangzhou.aliyuncs.com&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;bigdata_cloudnative&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;elasticsearch:&lt;span class=&quot;number&quot;&gt;7.17&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;networks:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;bitdata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;ipv4_address:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;172.20&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;container_name:&lt;/span&gt; node-&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;hostname:&lt;/span&gt; node-&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;ES_JAVA_OPTS=-Xms1024m -Xmx1024m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;TZ=Asia/Shanghai&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;ulimits:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;memlock:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;soft:&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;hard:&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;nofile:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;soft:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;hard:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;9202:9200&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;logging:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;driver:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;json-file&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;options:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;max-size:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;50m&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;node-&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;config&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;elasticsearch.yml:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/config/elasticsearch.yml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;plugins:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/plugins&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;node-&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;data:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;node-&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;certs:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/config/certs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;es&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;node-&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;log:&lt;span class=&quot;symbol&quot;&gt;/usr/share/elasticsearch/log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;healthcheck:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;test:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;CMD-SHELL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;curl -I http://localhost:9200 || exit 1&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;interval:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;timeout:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;retries:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;params&quot;&gt;kibana:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;networks:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;bitdata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;params&quot;&gt;ipv4_address:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;172.20&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;container_name:&lt;/span&gt; kibana&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;hostname:&lt;/span&gt; kibana&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;image:&lt;/span&gt; registry.cn-hangzhou.aliyuncs.com&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;bigdata_cloudnative&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;kibana:&lt;span class=&quot;number&quot;&gt;7.17&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;TZ:&lt;/span&gt; &#39;Asia&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;Shanghai&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;kibana&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;cert:&lt;span class=&quot;symbol&quot;&gt;/etc/kibana/cert&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; .&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;kibana&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;config&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;kibana.yml:&lt;span class=&quot;symbol&quot;&gt;/usr/share/kibana/config/kibana.yml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5601&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5601&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;healthcheck:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;test:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;CMD-SHELL&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;curl -I http://localhost:5601 || exit 1&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;interval:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;timeout:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;retries:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 连接外部网络&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;networks:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;params&quot;&gt;bitdata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;driver:&lt;/span&gt; bridge&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;params&quot;&gt;ipam:&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;params&quot;&gt;config:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;subnet:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;172.20&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;非SSL&quot;&gt;&lt;a href=&quot;#非SSL&quot; class=&quot;headerlink&quot; title=&quot;非SSL&quot;&gt;&lt;/a&gt;非SSL&lt;/h2&gt;&lt;h3 id=&quot;elasticsearch-yaml配置文件&quot;&gt;&lt;a href=&quot;#elasticsearch-yaml配置文件&quot; class=&quot;headerlink&quot; title=&quot;elasticsearch.yaml配置文件&quot;&gt;&lt;/a&gt;elasticsearch.yaml配置文件&lt;/h3&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>如何利用ElastAlert2对ES中的日志创建告警</title>
    <link href="https://blog.sctux.cc/2024/07/16/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8ElastAlert2%E5%AF%B9ES%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97%E5%88%9B%E5%BB%BA%E5%91%8A%E8%AD%A6/"/>
    <id>https://blog.sctux.cc/2024/07/16/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8ElastAlert2%E5%AF%B9ES%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97%E5%88%9B%E5%BB%BA%E5%91%8A%E8%AD%A6/</id>
    <published>2024-07-16T09:56:39.000Z</published>
    <updated>2025-09-01T01:59:08.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>线上API服务出现了5xx的请求错误, 未能在第一时间发现导致用户主动向团队报告接口有异常， 由于API的接口比较多，也只是监控了部分，事后通过日志才发现的确用户侧在对某个接口访问时，频繁出现5xx告警，我这边也没有收到什么通知，目前先暂且不说出现5xx是什么造成的，而是在API接口响应状态的监控方面没有做到很到位， 所以需要对Nginx日志中的状态为5xx的请求监控告警，以便能快速响应，解决问题。</p><h1 id="ElastAlert2"><a href="#ElastAlert2" class="headerlink" title="ElastAlert2"></a>ElastAlert2</h1><p>ElastAlert 2是一个简单的框架，用于对来自 Elasticsearch 和 OpenSearch 的数据的异常、尖峰或其他感兴趣的模式发出警报。</p><p>官方文档：<a href="https://elastalert2.readthedocs.io/en/latest/">https://elastalert2.readthedocs.io/en/latest/</a></p><p>Github: <a href="https://github.com/jertel/elastalert2">https://github.com/jertel/elastalert2</a></p><h1 id="配置部署"><a href="#配置部署" class="headerlink" title="配置部署"></a>配置部署</h1><p>当然还是选择容器化方式运行，官方也提供得有镜像：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker pull jertel/elastalert2</span><br></pre></td></tr></tbody></table></figure><h3 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h3><p>可参考 <a href="https://github.com/jertel/elastalert2">https://github.com/jertel/elastalert2</a>  目录中的 <code>examples/config.yaml.example</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/opt/elastalert2/{data,rules}</span></span><br><span class="line"></span><br><span class="line"><span class="string">vim</span> <span class="string">/opt/elastalert2/config.yaml</span></span><br><span class="line"><span class="attr">rules_folder:</span> <span class="string">rules</span> <span class="comment"># 存放规则文件的目录，这个目录需要挂载到/opt/elastalert/下</span></span><br><span class="line"><span class="attr">run_every:</span></span><br><span class="line">  <span class="attr">minutes:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">buffer_time:</span></span><br><span class="line">  <span class="attr">minutes:</span> <span class="number">15</span></span><br><span class="line"><span class="attr">es_host:</span> <span class="number">10.10</span><span class="number">.20</span><span class="number">.23</span></span><br><span class="line"><span class="attr">es_port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">use_ssl:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">verify_certs:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">ca_certs:</span> <span class="string">/opt/elastalert/ca.crt</span> <span class="comment"># 如果集群启用了ssl记得要把ca证书挂在到容器的这个位置</span></span><br><span class="line"><span class="attr">ssl_show_warn:</span> <span class="literal">True</span></span><br><span class="line"><span class="attr">es_send_get_body_as:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">es_username:</span> <span class="comment"># YOUR ES USERNAME</span></span><br><span class="line"><span class="attr">es_password:</span> <span class="comment"># YOUR ES PASSWORD</span></span><br><span class="line"><span class="attr">writeback_index:</span> <span class="string">elastalert_status</span></span><br><span class="line"><span class="attr">alert_time_limit:</span></span><br><span class="line">  <span class="attr">days:</span> <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Rule规则配置"><a href="#Rule规则配置" class="headerlink" title="Rule规则配置"></a>Rule规则配置</h3><p>我们网关服务器的Nginx日志是通过filebeat写到Elasticsearch的，也做好了index，其实在ELK 界面也可以看到这些状态数据，但是仅仅只是展示，没有告警，所以才有了这篇blog。</p><p>创建一个针对 某个API域名的日志的状态监控文件： </p><figure class="highlight nestedtext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vim  /opt/elastalert2/rules/mainnet-api.xxxxx.yaml</span></span><br><span class="line"><span class="attribute">#rule名字,必须唯一</span></span><br><span class="line"><span class="attribute">name</span><span class="punctuation">:</span> <span class="string">The number of times this request responds with a status code of 5xx in the log is greater than 5 times within 1 minute, please pay attention(mainnet-api.xxxxx)!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#类型,官方提供多种类型</span></span><br><span class="line"><span class="attribute">type</span><span class="punctuation">:</span> <span class="string">frequency</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ES索引,支持通配符</span></span><br><span class="line"><span class="attribute">index</span><span class="punctuation">:</span> <span class="string">proxy-mainnet-api.xxxxx.log-*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在timeframe时间内,匹配到多少个结果便告警</span></span><br><span class="line"><span class="attribute">num_events</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#监控周期.默认是minutes: 1</span></span><br><span class="line"><span class="attribute">timeframe</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">seconds</span><span class="punctuation">:</span> <span class="string">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#匹配模式.这里我匹配的是500—599的所有可能会出现的状态码</span></span><br><span class="line"><span class="attribute">filter</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">range:</span></span><br><span class="line">    <span class="attribute">status</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">from</span><span class="punctuation">:</span> <span class="string">500</span></span><br><span class="line">      <span class="attribute">to</span><span class="punctuation">:</span> <span class="string">599</span></span><br><span class="line"><span class="comment"># 自定义发送格式(start)</span></span><br><span class="line"><span class="comment"># 说明： 以下可以自定义发送的内容，如果什么都不指定，会发送ElastAlert2原生的一大堆json格式的内容，易读性很低，所以这里为了内容简介，我这里就只是定义了这些内容：</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">alert_text_type</span><span class="punctuation">:</span> <span class="string">alert_text_only</span></span><br><span class="line"><span class="attribute">alert_text</span><span class="punctuation">:</span> <span class="string">" </span></span><br><span class="line">  <span class="attribute">响应状态码</span><span class="punctuation">:</span> <span class="string">{} \n</span></span><br><span class="line">  <span class="attribute">发生时间UTC</span><span class="punctuation">:</span> <span class="string">{} \n</span></span><br><span class="line">  <span class="attribute">ES Index</span><span class="punctuation">:</span> <span class="string">{} \n</span></span><br><span class="line">  <span class="attribute">num_hits</span><span class="punctuation">:</span> <span class="string">{} \n</span></span><br><span class="line">  <span class="attribute">请求URL</span><span class="punctuation">:</span> <span class="string">https://mainnet-api.xxxxx{} \n</span></span><br><span class="line">  <span class="attribute">ClientIP</span><span class="punctuation">:</span> <span class="string">{} \n</span></span><br><span class="line">  <span class="attribute">num_matches</span><span class="punctuation">:</span> <span class="string">{} \n</span></span><br><span class="line">  <span class="attribute">http_user_agent</span><span class="punctuation">:</span> <span class="string">{}</span></span><br><span class="line"><span class="attribute">"</span></span><br><span class="line"><span class="attribute">alert_text_args</span><span class="punctuation">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">status</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"@timestamp"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">_index</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">num_hits</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">request_uri</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http_x_forwarded_for</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">num_matches</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http_user_agent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义发送格式(end)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里选择使用的是Discord来接收通知，ElastAlert2其实很强大，支持很多渠道的告警</span></span><br><span class="line"><span class="comment"># 这里发现并不能同时多个渠道发送告警消息</span></span><br><span class="line"><span class="comment"># 如果需要多个告警渠道，可以写一个类似于AlertCenter的服务，通过这个服务整合后发送到不同的渠道，这里这是个思路，目前先满足需求</span></span><br><span class="line"><span class="attribute">alert</span><span class="punctuation">:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"discord"</span></span><br><span class="line"><span class="attribute">discord_webhook_url</span><span class="punctuation">:</span> <span class="string">"YOUR DISCORD WEBHOOK URL"</span></span><br><span class="line"><span class="attribute">discord_emoji_title</span><span class="punctuation">:</span> <span class="string">":lock:"</span></span><br><span class="line"><span class="attribute">discord_embed_color</span><span class="punctuation">:</span> <span class="string">0xE24D42</span></span><br><span class="line"><span class="attribute">discord_embed_footer</span><span class="punctuation">:</span> <span class="string">"Message sent by from api status moniotor(for @noardguo)"</span></span><br><span class="line"><span class="attribute">discord_embed_icon_url</span><span class="punctuation">:</span> <span class="string">"https://humancoders-formations.s3.amazonaws.com/uploads/course/logo/38/thumb_bigger_formation-elasticsearch.png"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="部署运行"><a href="#部署运行" class="headerlink" title="部署运行"></a>部署运行</h3><p>上面已经准备好了所需要的文件：</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@ip</span><span class="number">-10</span><span class="number">-10</span><span class="number">-10</span><span class="number">-11</span><span class="symbol">:/opt/elastalert2</span><span class="comment"># tree -L 2</span></span><br><span class="line">.</span><br><span class="line">├── ca.crt</span><br><span class="line">├── config.yaml</span><br><span class="line">├── data</span><br><span class="line">└── rules</span><br><span class="line">    ├── mainnet-api.xxxxx.yml</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> directories, <span class="number">3</span> files</span><br></pre></td></tr></tbody></table></figure><p>docker 方式运行：</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=elastalert2 \</span><br><span class="line">--env=TZ=Asia/Shanghai \</span><br><span class="line">--volume=/<span class="keyword">opt</span>/elastalert2/data:/<span class="keyword">opt</span>/elastalert/data \</span><br><span class="line">--volume=/<span class="keyword">opt</span>/elastalert2/config.yaml:/<span class="keyword">opt</span>/elastalert/config.yaml \</span><br><span class="line">--volume=/<span class="keyword">opt</span>/elastalert2/rules:/<span class="keyword">opt</span>/elastalert/rules \</span><br><span class="line">--volume=/<span class="keyword">opt</span>/elastalert2/<span class="keyword">ca</span>.crt:/<span class="keyword">opt</span>/elastalert/<span class="keyword">ca</span>.crt \</span><br><span class="line">--restart=always \</span><br><span class="line">jertel/elastalert2 </span><br><span class="line"></span><br><span class="line">root@ip-<span class="number">10</span>-<span class="number">10</span>-<span class="number">10</span>-<span class="number">11</span>:/<span class="keyword">opt</span>/elastalert2# docker logs -<span class="keyword">f</span> wonderful_tharp</span><br><span class="line">Reading Elastic <span class="number">7</span> <span class="built_in">index</span> mappings:</span><br><span class="line">Reading <span class="built_in">index</span> mapping <span class="string">'es_mappings/7/silence.json'</span></span><br><span class="line">Reading <span class="built_in">index</span> mapping <span class="string">'es_mappings/7/elastalert_status.json'</span></span><br><span class="line">Reading <span class="built_in">index</span> mapping <span class="string">'es_mappings/7/elastalert.json'</span></span><br><span class="line">Reading <span class="built_in">index</span> mapping <span class="string">'es_mappings/7/past_elastalert.json'</span></span><br><span class="line">Reading <span class="built_in">index</span> mapping <span class="string">'es_mappings/7/elastalert_error.json'</span></span><br><span class="line">Index elastalert_status already <span class="built_in">exists</span>. Skipping <span class="built_in">index</span> creation.</span><br><span class="line">WARNING:<span class="keyword">py</span>.warnings:/usr/local/lib/<span class="keyword">python3</span>.<span class="number">12</span>/site-packages/elasticsearch/connection/base.<span class="keyword">py</span>:<span class="number">193</span>: ElasticsearchDeprecationWarning: Camel case format name dateOptionalTime <span class="keyword">is</span> deprecated <span class="built_in">and</span> will <span class="keyword">be</span> removed in <span class="keyword">a</span> future <span class="keyword">version</span>. Use snake case name date_optional_time instead.</span><br><span class="line">  warnings.warn(message, category=ElasticsearchDeprecationWarning)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>如果没有报错就说明运行正常，此时从kibana面板也可以看到ElaltAlert2生成了监控告警所需要的index:<br><img src="/2024/07/16/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8ElastAlert2%E5%AF%B9ES%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97%E5%88%9B%E5%BB%BA%E5%91%8A%E8%AD%A6/1.jpeg"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>当运行起来后，此时就是是时间监控日志文件的一个状态</p><p>在网关服务器上面echo一段带有status为500的message到日志文件中：</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">echo</span> '''{<span class="string">"@timestamp"</span>:<span class="string">"2024-07-16T20:28:10+08:00"</span>,<span class="string">"server_addr"</span>:<span class="string">"110.10.30.187"</span>,<span class="string">"remote_addr"</span>:<span class="string">"10.10.10.248"</span>,<span class="string">"http_x_forwarded_for"</span>:<span class="string">"172.104.86.126, 172.68.119.188"</span>,<span class="string">"scheme"</span>:<span class="string">"http"</span>,<span class="string">"request_method"</span>:<span class="string">"POST"</span>,<span class="string">"request_uri"</span>: <span class="string">"Alert_Test"</span>,<span class="string">"request_length"</span>: <span class="string">"953"</span>,<span class="string">"uri"</span>: <span class="string">"/api/v1/alerttest"</span>, <span class="string">"request_time"</span>:<span class="number">0</span>.<span class="number">002</span>,<span class="string">"body_bytes_sent"</span>:<span class="number">0</span>,<span class="string">"bytes_sent"</span>:<span class="number">335</span>,<span class="string">"status"</span>:<span class="string">"500"</span>,<span class="string">"upstream_time"</span>:<span class="string">"0.002"</span>,<span class="string">"upstream_host"</span>:<span class="string">"10.10.10.139:31333"</span>,<span class="string">"upstream_status"</span>:<span class="string">"200"</span>,<span class="string">"host"</span>:<span class="string">"mainnet-api.xxxxxx"</span>,<span class="string">"http_referer"</span>:<span class="string">"https://test.xyz/"</span>,<span class="string">"http_user_agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"</span>}''' &gt;&gt; mainnet-api.xxxxxx.log</span><br></pre></td></tr></tbody></table></figure><p>此时查看 index已经记录到这条告警消息, 通过查询索引也找到了这个请求</p><p><img src="/2024/07/16/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8ElastAlert2%E5%AF%B9ES%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97%E5%88%9B%E5%BB%BA%E5%91%8A%E8%AD%A6/2.jpeg"></p><p><img src="/2024/07/16/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8ElastAlert2%E5%AF%B9ES%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97%E5%88%9B%E5%BB%BA%E5%91%8A%E8%AD%A6/4.png"></p><p>同时，Discord也收到了告警通知</p><p><img src="/2024/07/16/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8ElastAlert2%E5%AF%B9ES%E4%B8%AD%E7%9A%84%E6%97%A5%E5%BF%97%E5%88%9B%E5%BB%BA%E5%91%8A%E8%AD%A6/3.png"></p><p>最后，因为我们跑了k8s,下面直接把相关文件用configmap方式挂载进去，运行一个Deployment副本即可。</p><ul><li>elastalert-config.yaml</li></ul><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">data:</span></span><br><span class="line">  config.<span class="params">yaml:</span> |-</span><br><span class="line">    <span class="params">rules_folder:</span> rules</span><br><span class="line">    <span class="params">run_every:</span></span><br><span class="line">      <span class="params">minutes:</span> <span class="number">1</span></span><br><span class="line">    <span class="params">buffer_time:</span></span><br><span class="line">      <span class="params">minutes:</span> <span class="number">15</span></span><br><span class="line">    <span class="params">es_host:</span> <span class="number">10.10</span>.<span class="number">20.23</span></span><br><span class="line">    <span class="params">es_port:</span> <span class="number">9200</span></span><br><span class="line">    <span class="params">use_ssl:</span> True</span><br><span class="line">    <span class="params">verify_certs:</span> True</span><br><span class="line">    <span class="params">ca_certs:</span> <span class="symbol">/opt/elastalert/ca.crt</span></span><br><span class="line">    <span class="params">ssl_show_warn:</span> True</span><br><span class="line">    <span class="params">es_send_get_body_as:</span> GET</span><br><span class="line">    <span class="params">es_username:</span> elastic</span><br><span class="line">    <span class="params">es_password:</span> A2VdKUHHFoUmlyekVFgd</span><br><span class="line">    <span class="params">writeback_index:</span> elastalert_status</span><br><span class="line">    <span class="params">alert_time_limit:</span></span><br><span class="line">      <span class="params">days:</span> <span class="number">2</span></span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> elastalert-config</span><br><span class="line">  <span class="params">namespace:</span> monitor</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>ealstalert-rules.yaml</li></ul><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">data:</span></span><br><span class="line">  mainnet-api.xxxxxx.<span class="params">yml:</span> <span class="string">"#rule名字,必须唯一<span class="char escape_">\n</span>name: The number of times this</span></span><br><span class="line"><span class="string">    request responds with a status code of 5xx in the log is greater than 5 times</span></span><br><span class="line"><span class="string">    within 1 minute, please pay attention(mainnet-api.xxxxx)!<span class="char escape_">\n</span><span class="char escape_">\n</span>#类型,官方提供多种类型<span class="char escape_">\n</span>type:</span></span><br><span class="line"><span class="string">    frequency<span class="char escape_">\n</span><span class="char escape_">\n</span>#ES索引,支持通配符<span class="char escape_">\n</span>index: proxy-mainnet-api.xxxxx.log-*<span class="char escape_">\n</span><span class="char escape_">\n</span>#在timeframe时间内,匹配到多少个结果便告警<span class="char escape_">\n</span>num_events:</span></span><br><span class="line"><span class="string">    1<span class="char escape_">\n</span><span class="char escape_">\n</span>#监控周期.默认是minutes: 1<span class="char escape_">\n</span>timeframe:<span class="char escape_">\n</span>  seconds: 5  <span class="char escape_">\n</span>  <span class="char escape_">\n</span>#匹配模式.<span class="char escape_">\n</span>filter:<span class="char escape_">\n</span>- range:<span class="char escape_">\n</span></span></span><br><span class="line"><span class="string">    <span class="char escape_">\ </span>  status:<span class="char escape_">\n</span>      from: 500<span class="char escape_">\n</span>      to: 599<span class="char escape_">\n</span>      <span class="char escape_">\n</span>alert_text_type: alert_text_only<span class="char escape_">\n</span>alert_text:</span></span><br><span class="line"><span class="string">    <span class="char escape_">\"</span> <span class="char escape_">\n</span>  响应状态码: {} <span class="char escape_">\\</span>n<span class="char escape_">\n</span>  发生时间UTC: {} <span class="char escape_">\\</span>n<span class="char escape_">\n</span>  ES Index: {} <span class="char escape_">\\</span>n<span class="char escape_">\n</span>  num_hits: {} <span class="char escape_">\\</span>n<span class="char escape_">\n</span></span></span><br><span class="line"><span class="string">    <span class="char escape_">\ </span>请求URL: https://mainnet-api.xxxxx.org{} <span class="char escape_">\\</span>n<span class="char escape_">\n</span>  ClientIP: {} <span class="char escape_">\\</span>n<span class="char escape_">\n</span>  num_matches:</span></span><br><span class="line"><span class="string">    {} <span class="char escape_">\\</span>n<span class="char escape_">\n</span>  http_user_agent: {}<span class="char escape_">\n</span><span class="char escape_">\"</span><span class="char escape_">\n</span>alert_text_args:<span class="char escape_">\n</span>    - status<span class="char escape_">\n</span>    - <span class="char escape_">\"</span>@timestamp<span class="char escape_">\"</span><span class="char escape_">\n</span></span></span><br><span class="line"><span class="string">    <span class="char escape_">\ </span>  - _index<span class="char escape_">\n</span>    - num_hits<span class="char escape_">\n</span>    - request_uri<span class="char escape_">\n</span>    - http_x_forwarded_for<span class="char escape_">\n</span></span></span><br><span class="line"><span class="string">    <span class="char escape_">\ </span>  - num_matches<span class="char escape_">\n</span>    - http_user_agent<span class="char escape_">\n</span>      <span class="char escape_">\n</span>      <span class="char escape_">\n</span>alert:<span class="char escape_">\n</span>- <span class="char escape_">\"</span>discord<span class="char escape_">\"</span><span class="char escape_">\n</span>#discord_webhook_url:</span></span><br><span class="line"><span class="string">    <span class="char escape_">\"</span>DISCORD_WEBHOOK_URL"</span>\<span class="params">ndiscord_webhook_url:</span></span><br><span class="line">    \<span class="string">"https://https://discord.com/api/webhooks/1196752947493752933/VRQ01W1pT0PHpl55z0hayqsyjWzt3bzXUMSA4-_5W56fn9j5Nl1zDQT7ZtU_CQWnnlYH<span class="char escape_">\"</span><span class="char escape_">\n</span>discord_emoji_title:</span></span><br><span class="line"><span class="string">    <span class="char escape_">\"</span>:lock:<span class="char escape_">\"</span><span class="char escape_">\n</span>discord_embed_color: 0xE24D42<span class="char escape_">\n</span>discord_embed_footer: <span class="char escape_">\"</span>Message sent</span></span><br><span class="line"><span class="string">    by from api status moniotor(for @Ops-NoardGuo)<span class="char escape_">\"</span><span class="char escape_">\n</span>discord_embed_icon_url: <span class="char escape_">\"</span>https://humancoders-formations.s3.amazonaws.com/uploads/course/logo/38/thumb_bigger_formation-elasticsearch.png<span class="char escape_">\"</span></span></span><br><span class="line"><span class="string">kind: ConfigMap</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: ealstalert-rules</span></span><br><span class="line"><span class="string">  namespace: monitor</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>ca.crt<br>略</p></li><li><p>elastalert-deployment.yaml</p></li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">k8s.kuboard.cn/displayName:</span> <span class="string">elastalert</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s.kuboard.cn/name:</span> <span class="string">elastalert</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">elastalert</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s.kuboard.cn/name:</span> <span class="string">elastalert</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">25</span><span class="string">%</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">k8s.kuboard.cn/name:</span> <span class="string">elastalert</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'--verbose'</span> <span class="comment"># 这里指定参数是默认镜像里面可以获取的参数，用于定义日志记录 排错或者运行状态查看</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">jertel/elastalert2</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">elastalert</span></span><br><span class="line">          <span class="attr">resources:</span> {}</span><br><span class="line">          <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">          <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/opt/elastalert/config.yaml</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">volume-ps74r</span></span><br><span class="line">              <span class="attr">subPath:</span> <span class="string">config.yaml</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/opt/elastalert/rules/</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">rules</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/opt/elastalert/ca.crt</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">volume-zmdx7</span></span><br><span class="line">              <span class="attr">subPath:</span> <span class="string">ca.crt</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> {}</span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">defaultMode:</span> <span class="number">420</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">elastalert-config</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">volume-ps74r</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">defaultMode:</span> <span class="number">420</span></span><br><span class="line">            <span class="attr">items:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">mainnet-api.xxxxx.yml</span></span><br><span class="line">                <span class="attr">path:</span> <span class="string">mainnet-api.xxxxx.yml</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">ealstalert-rules</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">rules</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">configMap:</span></span><br><span class="line">            <span class="attr">defaultMode:</span> <span class="number">420</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">elasticsearch-ca.crt</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">volume-zmdx7</span></span><br></pre></td></tr></tbody></table></figure><p>至此告警功能已经实现，以上只是一个大体的思路，不仅仅监控的可以是状态码，应该是你能想到的，他能提供的都可以监控起来。</p><p>好啦，我要去看5xx的报错原因了😀</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;线上API服务出现了5xx的请求错误, 未能在第一时间发现导致用户主动向团队报告接口有异常， 由于API的接口比较多，也只是监控了部分，事后通过日志才发现的确用户侧在对某个接口访问时，频繁出现5xx告警，我这边也没有收到什么通知，目前先暂且不说出现5xx是什么造成的，而是在API接口响应状态的监控方面没有做到很到位， 所以需要对Nginx日志中的状态为5xx的请求监控告警，以便能快速响应，解决问题。&lt;/p&gt;
&lt;h1 id=&quot;ElastAlert2&quot;&gt;&lt;a href=&quot;#ElastAlert2&quot; class=&quot;headerlink&quot; title=&quot;ElastAlert2&quot;&gt;&lt;/a&gt;ElastAlert2&lt;/h1&gt;&lt;p&gt;ElastAlert 2是一个简单的框架，用于对来自 Elasticsearch 和 OpenSearch 的数据的异常、尖峰或其他感兴趣的模式发出警报。&lt;/p&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://elastalert2.readthedocs.io/en/latest/&quot;&gt;https://elastalert2.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/jertel/elastalert2&quot;&gt;https://github.com/jertel/elastalert2&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;配置部署&quot;&gt;&lt;a href=&quot;#配置部署&quot; class=&quot;headerlink&quot; title=&quot;配置部署&quot;&gt;&lt;/a&gt;配置部署&lt;/h1&gt;&lt;p&gt;当然还是选择容器化方式运行，官方也提供得有镜像：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull docker pull jertel/elastalert2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;配置文件配置&quot;&gt;&lt;a href=&quot;#配置文件配置&quot; class=&quot;headerlink&quot; title=&quot;配置文件配置&quot;&gt;&lt;/a&gt;配置文件配置&lt;/h3&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>如何利用Python获取所有pod容器状态</title>
    <link href="https://blog.sctux.cc/2024/07/09/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Python%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89pod%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81/"/>
    <id>https://blog.sctux.cc/2024/07/09/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Python%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89pod%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81/</id>
    <published>2024-07-09T09:38:00.000Z</published>
    <updated>2025-09-01T07:57:25.123Z</updated>
    
    <content type="html"><![CDATA[<p>在日常巡检过程当中，不需要登录服务器去查看，通过调用k8s api的方式获取所有pod的状态</p><p>然后在每天9点执行本脚本即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> kubernetes <span class="keyword">import</span> client, config</span><br><span class="line"><span class="keyword">from</span> kubernetes.client.rest <span class="keyword">import</span> ApiException</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timezone</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"><span class="comment"># 加载 Kubernetes 配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认会在master节点去读取 ~/.kube/config 文件</span></span><br><span class="line">config.load_kube_config()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Kubernetes API 客户端实例</span></span><br><span class="line">api_instance = client.CoreV1Api()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定要获取的命名空间列表</span></span><br><span class="line">target_namespaces = [sys.argv[<span class="number">1</span>]]  <span class="comment"># 替换为你的目标命名空间列表</span></span><br><span class="line"></span><br><span class="line">filtered_keywords = [<span class="string">"mysql"</span>, <span class="string">"redis"</span>, <span class="string">"memcached"</span>, <span class="string">"postgres"</span>, <span class="string">"backend"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Discord Webhook URL</span></span><br><span class="line">discord_webhook_url = <span class="string">""</span> <span class="comment"># FOR TEST</span></span><br><span class="line"><span class="comment"># 替换为你的 Discord Webhook URL</span></span><br><span class="line">containers_without_restart = []  <span class="comment"># 没有重启原因的容器列表</span></span><br><span class="line">containers_with_restart = []  <span class="comment"># 具有重启原因的容器列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> target_namespace <span class="keyword">in</span> target_namespaces:</span><br><span class="line">        <span class="comment"># 获取命名空间下的所有 Pod</span></span><br><span class="line">        pods = api_instance.list_namespaced_pod(namespace=target_namespace).items</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> pod <span class="keyword">in</span> pods:</span><br><span class="line">            pod_name = pod.metadata.name</span><br><span class="line">            pod_status = pod.status.phase</span><br><span class="line">            pod_restart_reason = <span class="string">""</span></span><br><span class="line">            pod_start_time = pod.metadata.creation_timestamp</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(keyword <span class="keyword">in</span> pod_name <span class="keyword">for</span> keyword <span class="keyword">in</span> filtered_keywords):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取当前时间</span></span><br><span class="line">            cst_timezone = pytz.timezone(<span class="string">"Asia/Shanghai"</span>)</span><br><span class="line">            current_time = datetime.now(timezone.utc)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算运行时长</span></span><br><span class="line">            <span class="keyword">if</span> pod_start_time <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                pod_duration = current_time - pod_start_time</span><br><span class="line">                pod_duration_str = <span class="built_in">str</span>(pod_duration).split(<span class="string">"."</span>)[<span class="number">0</span>]  <span class="comment"># 格式化为字符串，去掉小数部分</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pod_duration_str = <span class="string">"Unknown"</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 检查 Pod 是否有重启记录</span></span><br><span class="line">            <span class="keyword">if</span> pod.status.container_statuses <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">for</span> container_status <span class="keyword">in</span> pod.status.container_statuses:</span><br><span class="line">                    restart_count = container_status.restart_count</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 如果重启次数大于 0，则获取重启原因</span></span><br><span class="line">                    <span class="keyword">if</span> restart_count &gt; <span class="number">0</span>:</span><br><span class="line">                        pod_restart_reason = container_status.last_state.terminated.reason</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> pod_restart_reason:</span><br><span class="line">                containers_with_restart.append(</span><br><span class="line">                    (pod_name, pod_status, pod_duration_str, pod_restart_reason, restart_count)</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                containers_without_restart.append(</span><br><span class="line">                    (pod_name, pod_status, pod_duration_str)</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成消息</span></span><br><span class="line">    message = <span class="string">"环境: {0} 获取时间：{1}\n\n"</span>.<span class="built_in">format</span>(target_namespace,datetime.now(cst_timezone).strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>) + <span class="string">" CST"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加没有重启原因的容器信息</span></span><br><span class="line">    <span class="keyword">for</span> container <span class="keyword">in</span> containers_without_restart:</span><br><span class="line">        pod_name, pod_status, pod_duration_str = container</span><br><span class="line">        message += <span class="string">"容器名称: {0}  当前状态: {1}  运行时长: {2}\n"</span>.<span class="built_in">format</span>(</span><br><span class="line">            pod_name, pod_status, pod_duration_str</span><br><span class="line">        )</span><br><span class="line">    message += <span class="string">"------------------------------------------------------\n"</span></span><br><span class="line">    <span class="comment"># 添加具有重启原因的容器信息</span></span><br><span class="line">    <span class="keyword">for</span> container <span class="keyword">in</span> containers_with_restart:</span><br><span class="line">        pod_name, pod_status, pod_duration_str, pod_restart_reason, restart_count = container</span><br><span class="line">        message += <span class="string">"容器名称: {0}  当前状态: {1}  运行时长: {2}  重启原因: {3} 重启次数：{4}\n"</span>.<span class="built_in">format</span>(</span><br><span class="line">            pod_name, pod_status, pod_duration_str, pod_restart_reason, restart_count</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    message = <span class="string">"```{0}```"</span>.<span class="built_in">format</span>(message)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送消息到 Discord</span></span><br><span class="line">    payload = {<span class="string">"content"</span>: message}</span><br><span class="line">    headers = {<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>}</span><br><span class="line">    response = requests.post(</span><br><span class="line">        discord_webhook_url, data=json.dumps(payload), headers=headers</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response.content)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">204</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Message sent to Discord successfully"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"Failed to send message to Discord. Status code: <span class="subst">{response.status_code}</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> ApiException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"Exception when calling CoreV1Api: <span class="subst">{e}</span>\n"</span>)</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在日常巡检过程当中，不需要登录服务器去查看，通过调用k8s api的方式获取所有pod的状态&lt;/p&gt;
&lt;p&gt;然后在每天9点执行本脚本即可。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; kubernetes &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; client, config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; kubernetes.client.rest &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ApiException&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; datetime &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime, timezone&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pytz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 加载 Kubernetes 配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#默认会在master节点去读取 ~/.kube/config 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;config.load_kube_config()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 创建 Kubernetes API 客户端实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;api_instance = client.CoreV1Api()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 指定要获取的命名空间列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target_namespaces = [sys.argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]]  &lt;span class=&quot;comment&quot;&gt;# 替换为你的目标命名空间列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filtered_keywords = [&lt;span class=&quot;string&quot;&gt;&quot;mysql&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;redis&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;memcached&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;postgres&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;backend&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Discord Webhook URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;discord_webhook_url = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# FOR TEST&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 替换为你的 Discord Webhook URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;containers_without_restart = []  &lt;span class=&quot;comment&quot;&gt;# 没有重启原因的容器列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;containers_with_restart = []  &lt;span class=&quot;comment&quot;&gt;# 具有重启原因的容器列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; target_namespace &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; target_namespaces:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 获取命名空间下的所有 Pod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pods = api_instance.list_namespaced_pod(namespace=target_namespace).items&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; pod &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; pods:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pod_name = pod.metadata.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pod_status = pod.status.phase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pod_restart_reason = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pod_start_time = pod.metadata.creation_timestamp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;(keyword &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; pod_name &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; keyword &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; filtered_keywords):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# 获取当前时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cst_timezone = pytz.timezone(&lt;span class=&quot;string&quot;&gt;&quot;Asia/Shanghai&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            current_time = datetime.now(timezone.utc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# 计算运行时长&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; pod_start_time &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                pod_duration = current_time - pod_start_time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                pod_duration_str = &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;(pod_duration).split(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;# 格式化为字符串，去掉小数部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                pod_duration_str = &lt;span class=&quot;string&quot;&gt;&quot;Unknown&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# 检查 Pod 是否有重启记录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; pod.status.container_statuses &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; container_status &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; pod.status.container_statuses:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    restart_count = container_status.restart_count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;# 如果重启次数大于 0，则获取重启原因&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; restart_count &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        pod_restart_reason = container_status.last_state.terminated.reason&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; pod_restart_reason:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                containers_with_restart.append(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (pod_name, pod_status, pod_duration_str, pod_restart_reason, restart_count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                containers_without_restart.append(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    (pod_name, pod_status, pod_duration_str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 生成消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message = &lt;span class=&quot;string&quot;&gt;&quot;环境: {0} 获取时间：{1}&#92;n&#92;n&quot;&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;(target_namespace,datetime.now(cst_timezone).strftime(&lt;span class=&quot;string&quot;&gt;&quot;%Y-%m-%d %H:%M:%S&quot;&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&quot; CST&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 添加没有重启原因的容器信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; container &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; containers_without_restart:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pod_name, pod_status, pod_duration_str = container&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        message += &lt;span class=&quot;string&quot;&gt;&quot;容器名称: {0}  当前状态: {1}  运行时长: {2}&#92;n&quot;&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pod_name, pod_status, pod_duration_str&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message += &lt;span class=&quot;string&quot;&gt;&quot;------------------------------------------------------&#92;n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 添加具有重启原因的容器信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; container &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; containers_with_restart:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pod_name, pod_status, pod_duration_str, pod_restart_reason, restart_count = container&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        message += &lt;span class=&quot;string&quot;&gt;&quot;容器名称: {0}  当前状态: {1}  运行时长: {2}  重启原因: {3} 重启次数：{4}&#92;n&quot;&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pod_name, pod_status, pod_duration_str, pod_restart_reason, restart_count&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message = &lt;span class=&quot;string&quot;&gt;&quot;```{0}```&quot;&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;(message)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 发送消息到 Discord&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    payload = {&lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;: message}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    headers = {&lt;span class=&quot;string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;application/json&quot;&lt;/span&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response = requests.post(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        discord_webhook_url, data=json.dumps(payload), headers=headers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(response.content)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; response.status_code == &lt;span class=&quot;number&quot;&gt;204&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Message sent to Discord successfully&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;f&quot;Failed to send message to Discord. Status code: &lt;span class=&quot;subst&quot;&gt;{response.status_code}&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ApiException &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;f&quot;Exception when calling CoreV1Api: &lt;span class=&quot;subst&quot;&gt;{e}&lt;/span&gt;&#92;n&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
</summary>
    
    
    
    <category term="k8s" scheme="https://blog.sctux.cc/categories/k8s/"/>
    
    
    <category term="k8s,pod" scheme="https://blog.sctux.cc/tags/k8s-pod/"/>
    
  </entry>
  
  <entry>
    <title>K8S中MySQL使用NFS挂载的异常问题处理</title>
    <link href="https://blog.sctux.cc/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <id>https://blog.sctux.cc/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</id>
    <published>2024-05-10T12:58:02.000Z</published>
    <updated>2025-09-01T01:59:08.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>在k8s中使用nfs作为持久存储方式，根据不同环境对应不同名称空间的pod使用的存储类/存储卷 相对应，发现mysql8.0.23 在启动时挂载NFS会卡住的情况：</p><h1 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h1><p>这里在某台宿主机上面创建了一个本地目录，然后按照默认方式：</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t nfs   <span class="number">10.10</span>.<span class="number">10.142</span><span class="symbol">:/data/bbb</span> /tmp/cc</span><br></pre></td></tr></tbody></table></figure><p>将nfs挂载到本地，然后映射到容器中去，所以这里跟k8s环境没多大联系，主要是nfs挂载问题：</p><p> <img src="/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/1.png"></p><p>初始化一直卡着，而且在挂载目录发现只有这个文件：</p><p> <img src="/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/0.png"></p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>检查一下nfs挂载的参数情况：</p><figure class="highlight jboss-cli"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount -v  | grep nfs</span><br><span class="line"></span><br><span class="line">10.10.10.137:<span class="string">/data/nfs_share_137</span> on <span class="string">/tmp/fans</span> type nfs <span class="params">(rw,relatime,<span class="attr">vers</span>=3,<span class="attr">rsize</span>=1048576,<span class="attr">wsize</span>=1048576,<span class="attr">namlen</span>=255,hard,<span class="attr">proto</span>=tcp,<span class="attr">timeo</span>=600,<span class="attr">retrans</span>=2,<span class="attr">sec</span>=sys,<span class="attr">mountaddr</span>=10.10.10.137,<span class="attr">mountvers</span>=3,<span class="attr">mo</span>=udp,<span class="attr">local_lock</span>=none,<span class="attr">addr</span>=10.10.10.137)</span></span><br><span class="line"></span><br><span class="line">10.10.10.142:<span class="string">/data/bbb</span> on <span class="string">/tmp/cc</span> type nfs <span class="params">(rw,relatime,<span class="attr">vers</span>=3,<span class="attr">rsize</span>=1048576,<span class="attr">wsize</span>=1048576,<span class="attr">namlen</span>=255,hard,<span class="attr">proto</span>=tcp,<span class="attr">timeo</span>=600,<span class="attr">retrans</span>=2,<span class="attr">sec</span>=sys,<span class="attr">mountaddr</span>=10.10.10.142,<span class="attr">mountvers</span>=3,<span class="attr">mountport</span>=<span class="attr">569lock</span>=none,<span class="attr">addr</span>=10.10.10.142)</span></span><br></pre></td></tr></tbody></table></figure><p>如上可以看出我们如果使用默认的方式直接挂载，它会有一些默认参数</p><p>后面也是通过该容器运行的宿主机上的内核日志才发现，这个问题：<br> <img src="/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/3.png"></p><h1 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h1><p>这个错误提示实际上是NFS客户端无法获得文件锁定，而不是无法与NFS服务器建立联系。当NFS客户端无法获得文件锁定时，它会尝试向NFS服务器发送锁定请求，并等待服务器响应。如果NFS服务器没有响应，则可能会出现类似的错误提示。可能造成这个错误的原因如下：</p><ol><li>检查NFS服务器的负载情况，如果负载过高，则可能需要优化服务器配置或增加服务器数量。</li><li>检查NFS客户端与服务器之间的网络连接，如果存在网络故障，则可能需要修复网络问题或更改网络配置。</li><li>考虑使用NFS挂载选项来优化NFS客户端的行为，例如使用soft选项而不是hard选项，或者使用intr选项允许中断NFS操作。</li><li>如果NFS客户端和服务器在不同的时区中运行，则可能需要使用noac选项来禁用NFS客户端的属性缓存，以确保文件锁定请求和响应的时间戳是正确的。</li><li>如果您的NFS客户端和服务器运行的是不同的操作系统，则可能需要使用适当的挂载选项来确保文件锁定机制得到正确支持，例如使用nolock选项来禁用文件锁定机制。</li></ol><p>因为我们使用了kuboard, 无法全局对这个存储类做暂时不能影响业务，不能所有变更：<br> <img src="/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/4.png"><br>这里只是单独这个mysql服务没有办法挂在使用，是由需要添加挂载参数：<br> <img src="/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/5.png"></p><p> 找到我们在页面上新建的pv:</p> <figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> kubectl edit pv <span class="operator">-</span>n testnet pvc-b0de2c7f-<span class="number">49</span>de-<span class="number">4</span>e16-<span class="number">83</span>cc-<span class="number">492</span>de8292e5f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a '#' will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> PersistentVolume</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">annotations:</span></span><br><span class="line">    pv.kubernetes.io<span class="operator">/</span><span class="params">provisioned-by:</span> nfs-testnet</span><br><span class="line">  <span class="params">creationTimestamp:</span> <span class="string">"2023-07-20T16:29:30Z"</span></span><br><span class="line">  <span class="params">finalizers:</span></span><br><span class="line">  <span class="operator">-</span> kubernetes.io<span class="symbol">/pv-protection</span></span><br><span class="line">  <span class="params">name:</span> pvc-b0de2c7f-<span class="number">49</span>de-<span class="number">4</span>e16-<span class="number">83</span>cc-<span class="number">492</span>de8292e5f</span><br><span class="line">  <span class="params">resourceVersion:</span> <span class="string">"147600146"</span></span><br><span class="line">  <span class="params">uid:</span> e9f111ac-<span class="number">293</span>2-<span class="number">46</span>a0-b6bc-<span class="number">876275</span>dfa02f</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">accessModes:</span></span><br><span class="line">  <span class="operator">-</span> ReadWriteOnce</span><br><span class="line">  <span class="params">capacity:</span></span><br><span class="line">    <span class="params">storage:</span> <span class="number">2</span>G</span><br><span class="line">  <span class="params">claimRef:</span></span><br><span class="line">    <span class="params">apiVersion:</span> v1</span><br><span class="line">    <span class="params">kind:</span> PersistentVolumeClaim</span><br><span class="line">    <span class="params">name:</span> dassssssssssssssss</span><br><span class="line">    <span class="params">namespace:</span> testnet</span><br><span class="line">    <span class="params">resourceVersion:</span> <span class="string">"147600141"</span></span><br><span class="line">    <span class="params">uid:</span> b0de2c7f-<span class="number">49</span>de-<span class="number">4</span>e16-<span class="number">83</span>cc-<span class="number">492</span>de8292e5f</span><br><span class="line">  <span class="params">nfs:</span></span><br><span class="line">    <span class="params">path:</span> <span class="symbol">/data/testnet-dassssssssssssssss-pvc-b0de2c7f-49de-4e16-83cc-492de8292e5f</span></span><br><span class="line">    <span class="params">server:</span> <span class="number">10.10</span>.<span class="number">10.142</span></span><br><span class="line">  <span class="params">persistentVolumeReclaimPolicy:</span> Retain</span><br><span class="line">  <span class="params">storageClassName:</span> testnet</span><br><span class="line">  <span class="params">volumeMode:</span> Filesystem</span><br><span class="line"><span class="params">status:</span></span><br><span class="line">  <span class="params">phase:</span> Bound</span><br></pre></td></tr></tbody></table></figure><p>然后我们在<code>volumeMode同级</code> 就可以定义挂载参数(具体参数：<a href="https://poe.com/s/FyTCOkthr3VREHU3mByA)%EF%BC%9A">https://poe.com/s/FyTCOkthr3VREHU3mByA)：</a></p><figure class="highlight ldif"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mountOptions</span>:</span><br><span class="line"><span class="literal">-</span> nolock</span><br><span class="line"><span class="literal">-</span> timeo=120</span><br><span class="line"><span class="literal">-</span> intr</span><br><span class="line"><span class="literal">-</span> retrans=10</span><br></pre></td></tr></tbody></table></figure><p>这样我们单独为MySQL服务创建的这个pvc就拥有了这些挂载参数，初始化，运行正常：<br> <img src="/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/6.png"></p><p>在这个pod运行的宿主机上 查看结果，可以看到我们修改pv后的参数已经生效，并且在nfs服务端可以看到我们的MySQL初始化文件已经生成：<br> <img src="/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/7.png"><br> <img src="/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/8.png"></p><p>最终该挂载问题完美解决。</p><p>对于特殊，不同的deployment 可能需要特殊处理，这里按照mysql的部署，记录一下顺序</p><ol><li>创建pvc</li><li>修改默认pvc配置，增加nfs挂载参数</li><li>启动pod</li><li>检查挂载目录数据是否正常生成</li><li>检查挂载选项是否已经增加</li></ol><p> <img src="/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/00.jpeg"></p><p>By the way:<br>谁说的K8S不能跑MySQL， 我嫩死TA 🔪🔪🔪</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;问题原因&quot;&gt;&lt;a href=&quot;#问题原因&quot; class=&quot;headerlink&quot; title=&quot;问题原因&quot;&gt;&lt;/a&gt;问题原因&lt;/h1&gt;&lt;p&gt;在k8s中使用nfs作为持久存储方式，根据不同环境对应不同名称空间的pod使用的存储类/存储卷 相对应，发现mysql8.0.23 在启动时挂载NFS会卡住的情况：&lt;/p&gt;
&lt;h1 id=&quot;问题复现&quot;&gt;&lt;a href=&quot;#问题复现&quot; class=&quot;headerlink&quot; title=&quot;问题复现&quot;&gt;&lt;/a&gt;问题复现&lt;/h1&gt;&lt;p&gt;这里在某台宿主机上面创建了一个本地目录，然后按照默认方式：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mount -t nfs   &lt;span class=&quot;number&quot;&gt;10.10&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;10.142&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:/data/bbb&lt;/span&gt; /tmp/cc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;p&gt;将nfs挂载到本地，然后映射到容器中去，所以这里跟k8s环境没多大联系，主要是nfs挂载问题：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;初始化一直卡着，而且在挂载目录发现只有这个文件：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/2024/05/10/K8S%E4%B8%ADMySQL%E4%BD%BF%E7%94%A8NFS%E6%8C%82%E8%BD%BD%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/0.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题排查&quot;&gt;&lt;a href=&quot;#问题排查&quot; class=&quot;headerlink&quot; title=&quot;问题排查&quot;&gt;&lt;/a&gt;问题排查&lt;/h1&gt;</summary>
    
    
    
    
    <category term="NFS" scheme="https://blog.sctux.cc/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>Prometheus+Consul实现企业级宿主机+容器监控告警</title>
    <link href="https://blog.sctux.cc/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/"/>
    <id>https://blog.sctux.cc/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/</id>
    <published>2022-09-12T06:45:26.000Z</published>
    <updated>2025-09-01T01:59:08.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>因公司历史遗留原因有个别环境暂时没有使用kubernets, 现在需要将这批服务器的监控系统从zabbix替换到Prometheus, 于是乎这边有个问题就是需要将所有服务器上面的所有的exporter mertics（即 target）地址写到Prometheus配置文件中，这样一来，维护一个文件，似乎还算可以，但是这里我采用Prometheus+Consul的方式来管理服务器上的所有exporter， 那么这样做的好处是我们能更清晰的通过Consul来管理上面的每个exporter url , 以及通过consul自带的自定义元数据，再结合Promethues无疑是个很灵活的方式。</p><h1 id="二、架构"><a href="#二、架构" class="headerlink" title="二、架构"></a>二、架构</h1><p><img src="/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/arch.png"></p><ol><li>promtheus配置数据源为consu_sd_configs 地址指向一个consul客户端地址；</li><li>通过脚本调用consulapi的方式将宿主机上面的cadvisor-exporter,node-exporter metrics的地址注册到consul中；</li><li>promtheus 检测到了新增服务后，会通过这个<a href="http://xxxxxx:xxx/metrics">http://xxxxxx:xxx/metrics</a> url 抓取采集数据；</li><li>后续的数据采集就跟平常我们使用的方式一样了，采集到的数据时序保存在promtheus；</li><li>Grafana作为采集数据的一个展示,通过各种label，更加方便的对面板进行配置；</li><li>添加node-exporter， cadvisor-exporter的指标报警规则，通过Alertmanager 发出主机或容器的告警；</li></ol><h1 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h1><h2 id="Prometheus以及周边组件部署"><a href="#Prometheus以及周边组件部署" class="headerlink" title="Prometheus以及周边组件部署"></a>Prometheus以及周边组件部署</h2><p>该编排文件中部署了</p><ol><li>Prometheus: 监控系统主程序</li><li>Alertmanager: 告警发送</li><li>Grafana: 数据展示</li><li>Prometheus-dingding-webhook: 钉钉告警推送</li><li>alertmanager-dashboard: 主要用于告警条目展示，该软件是开源项目，随意下载部署</li></ol><figure class="highlight nestedtext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cat &gt; docker-compose.yaml &lt;&lt; EOF</span></span><br><span class="line"><span class="attribute">version</span><span class="punctuation">:</span> <span class="string">'3.7'</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">services</span><span class="punctuation">:</span></span><br><span class="line"><span class="punctuation"></span></span><br><span class="line">  <span class="attribute">prometheus</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">prom/prometheus:latest</span></span><br><span class="line">    <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus/:/etc/prometheus/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/prometheus-data:/prometheus</span></span><br><span class="line">    <span class="attribute">command</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--config.file=/etc/prometheus/prometheus.yml'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--storage.tsdb.path=/prometheus'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--web.console.libraries=/usr/share/prometheus/console_libraries'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--web.console.templates=/usr/share/prometheus/consoles'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--web.enable-lifecycle'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--web.external-url=http://192.168.18.178:9090'</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">9090:9090</span></span><br><span class="line">    <span class="attribute">links</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">alertmanager:alertmanager</span></span><br><span class="line">    <span class="attribute">restart</span><span class="punctuation">:</span> <span class="string">always</span></span><br><span class="line">    <span class="attribute">deploy</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">resources</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">limits</span><span class="punctuation">:</span></span><br><span class="line">          <span class="attribute">cpus</span><span class="punctuation">:</span> <span class="string">"1.0"</span></span><br><span class="line">          <span class="attribute">memory</span><span class="punctuation">:</span> <span class="string">500M</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">alertmanager</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">prom/alertmanager</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">9093:9093</span></span><br><span class="line">    <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./alertmanager/:/etc/alertmanager/</span></span><br><span class="line">    <span class="attribute">restart</span><span class="punctuation">:</span> <span class="string">always</span></span><br><span class="line">    <span class="attribute">command</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--config.file=/etc/alertmanager/config.yml'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--storage.path=/alertmanager'</span></span><br><span class="line">    <span class="attribute">deploy</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">resources</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">limits</span><span class="punctuation">:</span></span><br><span class="line">          <span class="attribute">cpus</span><span class="punctuation">:</span> <span class="string">"1.0"</span></span><br><span class="line">          <span class="attribute">memory</span><span class="punctuation">:</span> <span class="string">500M</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">grafana</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">grafana/grafana:8.4.0</span></span><br><span class="line">    <span class="attribute">depends_on</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">3000:3000</span></span><br><span class="line">    <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/grafana-data:/var/lib/grafana</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana/provisioning/:/etc/grafana/provisioning/</span></span><br><span class="line">    <span class="attribute">env_file</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana/config.monitoring</span></span><br><span class="line">    <span class="attribute">restart</span><span class="punctuation">:</span> <span class="string">always</span></span><br><span class="line">    <span class="attribute">deploy</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">resources</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">limits</span><span class="punctuation">:</span></span><br><span class="line">          <span class="attribute">cpus</span><span class="punctuation">:</span> <span class="string">"1.0"</span></span><br><span class="line">          <span class="attribute">memory</span><span class="punctuation">:</span> <span class="string">500M</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attribute">webhook</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">timonwong/prometheus-webhook-dingtalk</span></span><br><span class="line">    <span class="attribute">depends_on</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus-webhook-dingtalk/config.yml:/config/config.yml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./prometheus-webhook-dingtalk/dingding.tmpl:/config/dingding.tmpl</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">9060:8060</span></span><br><span class="line">    <span class="attribute">command</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--web.listen-address=:8060'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--config.file=/config/config.yml'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--web.enable-ui'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--web.enable-lifecycle'</span></span><br><span class="line">    <span class="attribute">restart</span><span class="punctuation">:</span> <span class="string">always</span></span><br><span class="line">    <span class="attribute">deploy</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">resources</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">limits</span><span class="punctuation">:</span></span><br><span class="line">          <span class="attribute">cpus</span><span class="punctuation">:</span> <span class="string">"1.0"</span></span><br><span class="line">          <span class="attribute">memory</span><span class="punctuation">:</span> <span class="string">500M</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">alertmanager-dashboard</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">ghcr.io/prymitive/karma:latest</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">9094:8080</span></span><br><span class="line">    <span class="attribute">restart</span><span class="punctuation">:</span> <span class="string">always</span></span><br><span class="line">    <span class="attribute">environment</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALERTMANAGER_URI=http://192.168.18.178:9093</span></span><br><span class="line">    <span class="attribute">deploy</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">resources</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">limits</span><span class="punctuation">:</span></span><br><span class="line">          <span class="attribute">cpus</span><span class="punctuation">:</span> <span class="string">"1.0"</span></span><br><span class="line">          <span class="attribute">memory</span><span class="punctuation">:</span> <span class="string">500M</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># run起来</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>以上运行起来后，基本的功能已经完成，此时只需要将target添加到prometheus中就可以了</p><h2 id="3-2-exporter-数据采集器-部署"><a href="#3-2-exporter-数据采集器-部署" class="headerlink" title="3.2 exporter(数据采集器)部署"></a>3.2 exporter(数据采集器)部署</h2><p>上面提到我们这部分环境没有迁移到k8s，所有微服务都是docker方式运行在宿主机上面的，所以，这里需要单独需要去部署对宿主机跟容器的eporter(数据采集器), 目前的需求就是监控宿主机以及容器，并将采集到的数据进行展示、告警等。</p><ul><li>宿主机的监控：利用Prometheus搭建部署监控系统，那么对于服务器层面的数据采集我们首选的是node-exporter；</li><li>容器的监控：在调研容器监控这块儿的时候发现container-exporter监控指标虽然能满足我们的需求，但是发现采集的数据过于简洁且在运行过程中会造成内存积压最终导致服务不可用，除非是人为干涉重启一下，释放内存，但是这种事儿不应该发生。因此还是采用cadvisor exporter来进行容器的数据采集</li></ul><p>需要在每台宿主机上面部署两个exporter</p><h3 id="创建目录-一般放到普通用户app家目录即可"><a href="#创建目录-一般放到普通用户app家目录即可" class="headerlink" title="创建目录(一般放到普通用户app家目录即可)"></a>创建目录(一般放到普通用户app家目录即可)</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> exporter-deploy &amp;&amp; <span class="built_in">cd</span> exporter-deploy</span><br></pre></td></tr></tbody></table></figure><h3 id="编排文件准备"><a href="#编排文件准备" class="headerlink" title="编排文件准备"></a>编排文件准备</h3><figure class="highlight nestedtext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cat &gt; docker-compose.yaml &lt;&lt; EOF</span></span><br><span class="line"><span class="attribute">version</span><span class="punctuation">:</span> <span class="string">'3.7'</span></span><br><span class="line"><span class="attribute">services</span><span class="punctuation">:</span></span><br><span class="line">  <span class="comment"># 宿主机数据采集</span></span><br><span class="line">  <span class="attribute">node-exporter</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">bitnami/node-exporter:latest</span></span><br><span class="line">    <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/proc:/host/proc:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/sys:/host/sys:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/:/rootfs:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/:/host:ro,rslave</span></span><br><span class="line">    <span class="attribute">command</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--path.rootfs=/host'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--path.procfs=/host/proc'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'--path.sysfs=/host/sys'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--web.disable-exporter-metrics</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">--collector.filesystem.ignored-mount-points</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">9100:9100</span></span><br><span class="line">    <span class="attribute">restart</span><span class="punctuation">:</span> <span class="string">always</span></span><br><span class="line">    <span class="attribute">deploy</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">resources</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">limits</span><span class="punctuation">:</span></span><br><span class="line">          <span class="attribute">cpus</span><span class="punctuation">:</span> <span class="string">"1.0"</span></span><br><span class="line">          <span class="attribute">memory</span><span class="punctuation">:</span> <span class="string">500M</span></span><br><span class="line">          </span><br><span class="line">  <span class="comment"># 容器数据采集</span></span><br><span class="line">  <span class="attribute">cadvisor-exporter</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">gcr.io/cadvisor/cadvisor/cadvisor:v0.45.0</span></span><br><span class="line">    <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/:/rootfs:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run:/var/run:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/sys:/sys:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/lib/docker/:/var/lib/docker:ro</span></span><br><span class="line">    <span class="attribute">command</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"-docker_only=true"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"-housekeeping_interval=10s"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"-docker_only=true"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"--allow_dynamic_housekeeping=false"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"--storage_duration=20s"</span></span><br><span class="line">    <span class="attribute">ports</span><span class="punctuation">:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">9105:8080</span></span><br><span class="line">    <span class="attribute">restart</span><span class="punctuation">:</span> <span class="string">always</span></span><br><span class="line">    <span class="attribute">deploy</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">mode</span><span class="punctuation">:</span> <span class="string">global</span></span><br><span class="line">      <span class="attribute">resources</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">limits</span><span class="punctuation">:</span></span><br><span class="line">          <span class="attribute">cpus</span><span class="punctuation">:</span> <span class="string">"2.0"</span></span><br><span class="line">          <span class="attribute">memory</span><span class="punctuation">:</span> <span class="string">500M</span></span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="comment"># run起来</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>以上，只需要此配置文件就部署好了 “exporter客户端” </p><p>下面就是 将这台服务器以及连个exporter的url 注册到consul中，如果有批量安装需求，直接在jump上面通过ansible 推送即可</p><h2 id="3-3-consul-集群部署"><a href="#3-3-consul-集群部署" class="headerlink" title="3.3 consul 集群部署"></a>3.3 consul 集群部署</h2><h3 id="手动创建一个docker-网络"><a href="#手动创建一个docker-网络" class="headerlink" title="手动创建一个docker 网络"></a>手动创建一个docker 网络</h3><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> network create --driver bridge --subnet <span class="number">10.10.0.0</span>/<span class="number">24</span>  consul-network</span><br></pre></td></tr></tbody></table></figure><h3 id="创建consul的数据、配置目录"><a href="#创建consul的数据、配置目录" class="headerlink" title="创建consul的数据、配置目录"></a>创建consul的数据、配置目录</h3><figure class="highlight haskell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> mkdir  -p /<span class="class"><span class="keyword">data</span>/consul/consul-server{1..3}/{<span class="title">data</span>,<span class="title">config</span>}</span></span><br><span class="line"><span class="title">sudo</span> mkdir  -p /<span class="class"><span class="keyword">data</span>/consul/consul-client{1..2}/{<span class="title">data</span>,<span class="title">config</span>}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="编辑docker-compose配置"><a href="#编辑docker-compose配置" class="headerlink" title="编辑docker-compose配置"></a>编辑docker-compose配置</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; docker-compose-consul-cluster.yaml &lt;&lt; \EOF</span><br><span class="line">version: <span class="string">'3.7'</span></span><br><span class="line"> </span><br><span class="line">services:</span><br><span class="line">  consul-server1:</span><br><span class="line">    image: consul:latest</span><br><span class="line">    network_mode: consul-network</span><br><span class="line">    container_name: consul-server1</span><br><span class="line">    restart: always</span><br><span class="line">    <span class="built_in">command</span>: agent -server -client=0.0.0.0 -bootstrap-expect=3 -node=consul-server1  -<span class="built_in">bind</span>=0.0.0.0  -config-dir=/consul/config</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/consul/consul-server1/data:/consul/data</span><br><span class="line">      - /data/consul/consul-server1/config:/consul/config</span><br><span class="line"> </span><br><span class="line">  consul-server2:</span><br><span class="line">    image: consul:latest</span><br><span class="line">    network_mode: consul-network</span><br><span class="line">    container_name: consul-server2</span><br><span class="line">    restart: always</span><br><span class="line">    <span class="built_in">command</span>: agent -server -client=0.0.0.0 -retry-join=consul-server1 -node=consul-server2  -<span class="built_in">bind</span>=0.0.0.0   -config-dir=/consul/config</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/consul/consul-server2/data:/consul/data</span><br><span class="line">      - /data/consul/consul-server2/config:/consul/config</span><br><span class="line">    depends_on:</span><br><span class="line">      - consul-server1</span><br><span class="line"> </span><br><span class="line">  consul-server3:</span><br><span class="line">    image: consul:latest</span><br><span class="line">    network_mode: consul-network</span><br><span class="line">    container_name: consul-server3</span><br><span class="line">    restart: always</span><br><span class="line">    <span class="built_in">command</span>: agent -server -client=0.0.0.0 -retry-join=consul-server1 -node=consul-server3  -<span class="built_in">bind</span>=0.0.0.0   -config-dir=/consul/config</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/consul/consul-server3/data:/consul/data</span><br><span class="line">      - /data/consul/consul-server3/config:/consul/config</span><br><span class="line">    depends_on:</span><br><span class="line">      - consul-server1</span><br><span class="line"> </span><br><span class="line">  consul-client1:</span><br><span class="line">    image: consul:latest</span><br><span class="line">    network_mode: consul-network</span><br><span class="line">    container_name: consul-client1</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 8500:8500</span><br><span class="line">    <span class="built_in">command</span>: agent -client=0.0.0.0 -retry-join=consul-server1 -ui -node=consul-client1  -<span class="built_in">bind</span>=0.0.0.0   -config-dir=/consul/config</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/consul/consul-client1/data:/consul/data</span><br><span class="line">      - /data/consul/consul-client1/config:/consul/config</span><br><span class="line">    depends_on:</span><br><span class="line">      - consul-server2</span><br><span class="line">      - consul-server3</span><br><span class="line"> </span><br><span class="line">  consul-client2:</span><br><span class="line">    image: consul:latest</span><br><span class="line">    network_mode: consul-network</span><br><span class="line">    container_name: consul-client2</span><br><span class="line">    restart: always</span><br><span class="line">    ports:</span><br><span class="line">      - 8501:8500</span><br><span class="line">    <span class="built_in">command</span>: agent -client=0.0.0.0 -retry-join=consul-server1 -ui -node=consul-client2  -<span class="built_in">bind</span>=0.0.0.0  -config-dir=/consul/config</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/consul/consul-client2/data:/consul/data</span><br><span class="line">      - /data/consul/consul-client2/config:/consul/config</span><br><span class="line">    depends_on:</span><br><span class="line">      - consul-server2</span><br><span class="line">      - consul-server3</span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 运行起来：</span></span><br><span class="line">docker-compose -f docker-compose-consul-cluster.yaml up -d</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE                                                                COMMAND                  CREATED         STATUS                     PORTS                                                                                         NAMES</span><br><span class="line">223826237a7b   consul:latest                                                        <span class="string">"docker-entrypoint.s…"</span>   3 seconds ago   Up 2 seconds               8300-8302/tcp, 8301-8302/udp, 8600/tcp, 8600/udp, 0.0.0.0:8501-&gt;8500/tcp, :::8501-&gt;8500/tcp   consul-client2</span><br><span class="line">337a3188fb75   consul:latest                                                        <span class="string">"docker-entrypoint.s…"</span>   3 seconds ago   Up 2 seconds               8300-8302/tcp, 8301-8302/udp, 8600/tcp, 8600/udp, 0.0.0.0:8500-&gt;8500/tcp, :::8500-&gt;8500/tcp   consul-client1</span><br><span class="line">685440aefca3   consul:latest                                                        <span class="string">"docker-entrypoint.s…"</span>   4 seconds ago   Up 3 seconds               8300-8302/tcp, 8500/tcp, 8301-8302/udp, 8600/tcp, 8600/udp                                    consul-server2</span><br><span class="line">5f9927f2ecac   consul:latest                                                        <span class="string">"docker-entrypoint.s…"</span>   4 seconds ago   Up 3 seconds               8300-8302/tcp, 8500/tcp, 8301-8302/udp, 8600/tcp, 8600/udp                                    consul-server3</span><br><span class="line">612b93b95ad9   consul:latest                                                        <span class="string">"docker-entrypoint.s…"</span>   5 seconds ago   Up 4 seconds               8300-8302/tcp, 8500/tcp, 8301-8302/udp, 8600/tcp, 8600/udp                                    consul-server1</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看集群状态：</span></span><br><span class="line">docker <span class="built_in">exec</span> -it consul-server1 consul  members</span><br><span class="line">Node            Address         Status  Type    Build   Protocol  DC   Partition  Segment</span><br><span class="line">consul-server1  10.10.0.2:8301  alive   server  1.13.1  2         dc1  default    &lt;all&gt;</span><br><span class="line">consul-server2  10.10.0.3:8301  alive   server  1.13.1  2         dc1  default    &lt;all&gt;</span><br><span class="line">consul-server3  10.10.0.4:8301  alive   server  1.13.1  2         dc1  default    &lt;all&gt;</span><br><span class="line">consul-client1  10.10.0.6:8301  alive   client  1.13.1  2         dc1  default    &lt;default&gt;</span><br><span class="line">consul-client2  10.10.0.5:8301  alive   client  1.13.1  2         dc1  default    &lt;default&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="访问consul的web页面"><a href="#访问consul的web页面" class="headerlink" title="访问consul的web页面"></a>访问consul的web页面</h3><p><a href="http://192.168.18.179:8501/ui/dc1/overview/server-status">http://192.168.18.179:8501/ui/dc1/overview/server-status</a><br><img src="/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/consul.png"></p><p>此时集群已经搭建完毕</p><h3 id="将服务器的exporter注册到consul"><a href="#将服务器的exporter注册到consul" class="headerlink" title="将服务器的exporter注册到consul"></a>将服务器的exporter注册到consul</h3><p>在consul ui中可以看到以下结果</p><p>以上就是将191.168.18.21主机上的cadvisor服务注册到了consu上面，将这类服务的名称统称为 cadvisor-exporter ,因为服务实例id必须唯一，所以这里需要特殊定义一下 exporter type - 主机名 - ip地址</p><p>最后就是将两个epxorter都将21这台主机的两个exporter都注册到了consul.</p><h3 id="配置promeheus-使其支持consul"><a href="#配置promeheus-使其支持consul" class="headerlink" title="配置promeheus 使其支持consul"></a>配置promeheus 使其支持consul</h3><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line"><span class="params">scrape_configs:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">job_name:</span> 'prometheus'</span><br><span class="line">    <span class="params">scrape_interval:</span> <span class="number">15</span>s</span><br><span class="line">    <span class="params">static_configs:</span></span><br><span class="line">         <span class="operator">-</span> <span class="params">targets:</span> ['localhost:<span class="number">9090</span>']</span><br><span class="line"></span><br><span class="line">  <span class="operator">-</span> <span class="params">job_name:</span> <span class="string">"cnosul-prometheus"</span></span><br><span class="line">    <span class="params">consul_sd_configs:</span></span><br><span class="line">      <span class="operator">-</span> <span class="params">server:</span> <span class="string">"192.168.18.178:8501"</span></span><br><span class="line">        <span class="params">services:</span> []</span><br><span class="line">    <span class="params">relabel_configs:</span> <span class="comment"># relabe 重写</span></span><br><span class="line">      <span class="operator">-</span> <span class="params">source_labels:</span> [__meta_consul_service] <span class="comment"># service源标签</span></span><br><span class="line">        <span class="params">regex:</span> <span class="string">"consul"</span> <span class="comment"># service匹配</span></span><br><span class="line">        <span class="params">action:</span> drop  <span class="comment"># 执行的动作, 这里不需要consul的metrics，所以drop掉</span></span><br><span class="line">      <span class="operator">-</span> <span class="params">source_labels:</span> [__meta_consul_service_metadata_hostname] <span class="comment"># 将此标签的值重写为instance</span></span><br><span class="line">        <span class="params">target_label:</span> instance</span><br><span class="line">        <span class="params">action:</span> replace</span><br><span class="line">      <span class="operator">-</span> <span class="params">source_labels:</span> [__meta_consul_service_metadata_group]</span><br><span class="line">        <span class="params">target_label:</span> group</span><br><span class="line">        <span class="params">action:</span> replace</span><br><span class="line">      <span class="operator">-</span> <span class="params">source_labels:</span> [__scheme__, __address__, __metrics_path__]</span><br><span class="line">        <span class="params">regex:</span> <span class="string">"(http|https)(.*)"</span>    <span class="comment"># 两个分组</span></span><br><span class="line">        <span class="params">separator:</span> <span class="string">""</span></span><br><span class="line">        <span class="params">target_label:</span> <span class="string">"endpoint"</span></span><br><span class="line">        <span class="params">replacement:</span> <span class="string">"<span class="subst">${<span class="number">1</span>}</span>://<span class="subst">${<span class="number">2</span>}</span>"</span>   <span class="comment"># 引用两个分组</span></span><br><span class="line">        <span class="params">action:</span> replace</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><p>新增加以上配置以后重新加载配置promtheus服务</p><p>curl -I -X POST <a href="http://127.0.0.1:9090/-/reload">http://127.0.0.1:9090/-/reload</a></p><p>注意：prometheus开启api热加载，需要加上启动参数： –web.enable-lifecycle</p><p>consul注册服务/实例的时候就需要添加这两个元标签，再通过标签重新 为我们需要的label，便于后面prometheus/grafana使用</p><p>以上，通过配置 prometheus 为 consul_sd_configs，之后能够正确通过服务发现获取到两个服务得metircs url。</p><p>服务器众多的情况下，可以那么这里也可以通过脚本的方式去添加，因为consul有以下元标签，那么更容易使得我们的数据可控，例如上面我们在注册服务的时候加了一个 group ，hostname, consul传递到promtheus之后我们可以通过relable的方式去重写, 以上代表的就是这个主机属于哪个分组，后续可以作为grafan面板中，或者报警中的一个关键指标。</p><h3 id="如何批量注册cadvisor-node-exporter-到-consul"><a href="#如何批量注册cadvisor-node-exporter-到-consul" class="headerlink" title="如何批量注册cadvisor/node exporter 到 consul"></a>如何批量注册cadvisor/node exporter 到 consul</h3><p>consul 自身提供了API， 就像上面一样做成脚本以后，批量注册服务/实例即可：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; register_exporter_to_consul.py &lt;&lt; \EOF</span><br><span class="line"> </span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># date: 2022-09-06</span></span><br><span class="line"><span class="comment"># author: guomaoqiu</span></span><br><span class="line"><span class="comment"># desc: 批量注册cadvisor-exporter, node-exporter服务到consul</span></span><br><span class="line"> </span><br><span class="line">import json</span><br><span class="line">import requests</span><br><span class="line">import  json</span><br><span class="line"> </span><br><span class="line">consul_url = <span class="string">"http://192.168.18.179:8501/v1/agent/service/register"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注册node-exporter</span></span><br><span class="line">def register_node_exporter(ip,hostname,group):</span><br><span class="line">    nodedata = {</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"node-exporter-{0}-{1}"</span>.format(hostname,ip),</span><br><span class="line">            # <span class="string">"id"</span>: hostname,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"node-exporter"</span>,</span><br><span class="line">            <span class="string">"address"</span>: ip,</span><br><span class="line">            <span class="string">"port"</span>: 9100,</span><br><span class="line">            <span class="string">"tags"</span>: [],</span><br><span class="line">            <span class="string">"meta"</span>: {</span><br><span class="line">                <span class="string">"hostname"</span>: hostname,</span><br><span class="line">                <span class="string">"group"</span>:<span class="built_in"> group</span></span><br><span class="line"><span class="built_in"></span>            },</span><br><span class="line">            <span class="string">"checks"</span>: [</span><br><span class="line">                {</span><br><span class="line">                <span class="string">"http"</span>: <span class="string">"http://{0}:9100/metrics"</span>.format(ip),</span><br><span class="line">                <span class="string">"interval"</span>: <span class="string">"5s"</span></span><br><span class="line">                }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">print</span>(nodedata)</span><br><span class="line">    try:</span><br><span class="line">        r = requests.put(<span class="attribute">url</span>=consul_url, <span class="attribute">data</span>=json.dumps(nodedata))</span><br><span class="line">        <span class="keyword">if</span> r.status_code == 200:</span><br><span class="line">            <span class="built_in">print</span>(ip, <span class="string">"Node Exporter 注册成功"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(ip, <span class="string">"Node Exporter 注册失败"</span>)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 注册cadvisor-exporter</span></span><br><span class="line">def register_container_exporter(ip,hostname,group):</span><br><span class="line">    container_data = {</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"cadvisor-exporter-{0}-{1}"</span>.format(hostname,ip),</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"cadvisor-exporter"</span>,</span><br><span class="line">            <span class="string">"address"</span>: ip,</span><br><span class="line">            <span class="string">"port"</span>: 9105,</span><br><span class="line">            <span class="string">"tags"</span>: [],</span><br><span class="line">            <span class="string">"meta"</span>: {</span><br><span class="line">                <span class="string">"hostname"</span>: hostname,</span><br><span class="line">            <span class="string">"group"</span>:<span class="built_in"> group</span></span><br><span class="line"><span class="built_in"></span>            },</span><br><span class="line">            <span class="string">"checks"</span>: [</span><br><span class="line">                {</span><br><span class="line">                <span class="string">"http"</span>: <span class="string">"http://{0}:9105/metrics"</span>.format(ip),</span><br><span class="line">                <span class="string">"interval"</span>: <span class="string">"5s"</span></span><br><span class="line">                }</span><br><span class="line">        ]</span><br><span class="line">    }</span><br><span class="line">    try:</span><br><span class="line">        r = requests.put(<span class="attribute">url</span>=consul_url, <span class="attribute">data</span>=json.dumps(container_data))</span><br><span class="line">        <span class="built_in">print</span>(r.status_code,r.content)</span><br><span class="line">        <span class="keyword">if</span> r.status_code == 200:</span><br><span class="line">            <span class="built_in">print</span>(ip, <span class="string">"Container Exporter 注册成功"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(ip, <span class="string">"Container Exporter 注册失败"</span>)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def register():</span><br><span class="line">    with open(<span class="string">"server_list.txt"</span>,<span class="string">"r"</span>) as f:</span><br><span class="line">        lines = (f.readlines())</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> lines:</span><br><span class="line">           <span class="built_in"> ip </span>=  (str(data).split(<span class="string">"\t"</span>)[1].strip(<span class="string">"\n"</span>))</span><br><span class="line">           <span class="built_in"> group </span>=  (str(data).split(<span class="string">"\t"</span>)[2].strip(<span class="string">"\n"</span>))</span><br><span class="line">            hostname =  (str(data).split(<span class="string">"\t"</span>)[0])</span><br><span class="line">            register_node_exporter(<span class="attribute">ip</span>=ip,hostname=hostname,group=group)</span><br><span class="line">            register_container_exporter(<span class="attribute">ip</span>=ip,hostname=hostname,group=group)</span><br><span class="line"> </span><br><span class="line">register()</span><br><span class="line"> </span><br><span class="line">EOF</span><br><span class="line"> </span><br><span class="line"><span class="comment">### 以上需要提前准备好一个文本文件，每行一条数据里面格式如下：</span></span><br><span class="line"> </span><br><span class="line">cat server_list.txt</span><br><span class="line">hostname1 192.168.18.21   IDE</span><br><span class="line">hostname2 192.168.18.22   IDE</span><br><span class="line">hostname3 192.168.18.31   IDE</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这里是线下环境的一个配置，所以单纯只是将环境作为分组，这里可以自定义，但是不能少了或多了字段数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行脚本：</span></span><br><span class="line">python3 register_exporter_to_consul.py </span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/p8.png"></p><p>执行以上脚本以后就可以在consul以及promtheus web页面进行查看检验了：</p><p><img src="/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/p9.png"></p><p>从上面可以看到已经注册了54个，但是这其实只添加了27台服务器而已，因为每台服务器上面运行了两个exporter,一个是node-exporter,一个是cadvisor-exporter， 他们有各自的metrics URL ,最后再到prometheus检查是否添加即可。</p><p><img src="/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/p10.png"></p><p><img src="/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/p11.png"><br>以上可以看到 ，服务数量、exporter数据获取正常。</p><p>至此，consul的部署，服务/实例的注册，promtheus的consul_sd_configs服务自动发现 ，数据采集已经完成，后续就是将prometheus 接入到 grafana：</p><p><img src="/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/p12.png"></p><p>上图中可以看到通过自定义的label进行分组</p><p><img src="/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/p13.png"></p><h2 id="告警系统接入"><a href="#告警系统接入" class="headerlink" title="告警系统接入"></a>告警系统接入</h2><p>已经可以看到容器&amp;宿主机的数据已经正常采集并且已经能够在grafan面板上进行展示</p><p>报警系统使用的是Alertmanager 搭配 Webhook来实现：</p><h3 id="alertmanager配置"><a href="#alertmanager配置" class="headerlink" title="alertmanager配置"></a>alertmanager配置</h3><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="operator">&gt;</span> alertmanager<span class="symbol">/config.yml</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">global:</span> <span class="comment"># 全局配置</span></span><br><span class="line">  <span class="params">resolve_timeout:</span> <span class="number">10</span>m <span class="comment"># 超时时间 默认10m</span></span><br><span class="line"><span class="params">inhibit_rules:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">source_match:</span>      <span class="comment">## 源报警规则</span></span><br><span class="line">      <span class="params">alertname:</span> 'critical'</span><br><span class="line">    <span class="params">target_match:</span></span><br><span class="line">      <span class="params">alertname:</span> 'warning'</span><br><span class="line">    <span class="params">equal:</span> ['alertname']  <span class="comment"># 通过alertname去抑制</span></span><br><span class="line"><span class="params">route:</span></span><br><span class="line">  <span class="params">receiver:</span> default-receiver</span><br><span class="line">  <span class="params">group_wait:</span> <span class="number">30</span>s</span><br><span class="line">  <span class="params">group_interval:</span> <span class="number">5</span>m</span><br><span class="line">  <span class="params">repeat_interval:</span> <span class="number">3</span>h</span><br><span class="line">  <span class="params">group_by:</span> ['alertname']</span><br><span class="line">  <span class="params">routes:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">receiver:</span> webhook-ide</span><br><span class="line">    <span class="params">matchers:</span></span><br><span class="line">    <span class="operator">-</span> group <span class="operator">=</span> IDE  <span class="comment"># 通过prometehus alert rule 查询出来的结果必须包含 group字段，否则该条报警不能发送出来</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">receiver:</span> webhook-stage</span><br><span class="line">    <span class="params">matchers:</span></span><br><span class="line">    <span class="operator">-</span> group <span class="operator">=</span> Stage</span><br><span class="line">  <span class="operator">-</span> <span class="params">receiver:</span> webhook-Pet</span><br><span class="line">    <span class="params">matchers:</span></span><br><span class="line">    <span class="operator">-</span> group <span class="operator">=</span> Pet</span><br><span class="line"><span class="params">receivers:</span></span><br><span class="line"><span class="operator">-</span> <span class="params">name:</span> default-receiver <span class="comment"># 这里不需要设置，需要精确匹配到每一条告规则 ，但是这里必须要存在，上面强调了必须要有一个默认的receiver</span></span><br><span class="line"><span class="operator">-</span> <span class="params">name:</span> webhook-ide</span><br><span class="line">  <span class="params">webhook_configs:</span> <span class="comment"># webhook告警配置</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">url:</span> 'http:<span class="operator">//</span><span class="number">192.168</span>.<span class="number">18.178</span>:<span class="number">9060</span><span class="operator">/</span>dingtalk<span class="operator">/</span>webhook-ide<span class="operator">/</span>send'</span><br><span class="line">    <span class="params">send_resolved:</span> <span class="literal">true</span></span><br><span class="line"><span class="operator">-</span> <span class="params">name:</span> webhook-stage</span><br><span class="line">  <span class="params">webhook_configs:</span> <span class="comment"># webhook告警配置</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">url:</span> 'http:<span class="operator">//</span><span class="number">192.168</span>.<span class="number">18.178</span>:<span class="number">9060</span><span class="operator">/</span>dingtalk<span class="operator">/</span>webhook-stage<span class="operator">/</span>send'</span><br><span class="line">    <span class="params">send_resolved:</span> <span class="literal">true</span></span><br><span class="line"><span class="operator">-</span> <span class="params">name:</span> webhook-Pet</span><br><span class="line">  <span class="params">webhook_configs:</span> <span class="comment"># webhook告警配置</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">url:</span> 'http:<span class="operator">//</span><span class="number">192.168</span>.<span class="number">18.178</span>:<span class="number">9060</span><span class="operator">/</span>dingtalk<span class="operator">/</span>webhook-Pet<span class="operator">/</span>send'</span><br><span class="line">    <span class="params">send_resolved:</span> <span class="literal">true</span> </span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务加载</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="dingding-webhook配置"><a href="#dingding-webhook配置" class="headerlink" title="dingding-webhook配置"></a>dingding-webhook配置</h3><p>这里按照环境进行了分组，将不同的告警信息通过环境发送到不同的钉钉群</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="operator">&gt;</span> prometheus-dingding-webhook<span class="symbol">/config.yml</span> <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="comment">## Request timeout</span></span><br><span class="line"><span class="comment"># timeout: 5s</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">## Uncomment following line in order to write template from scratch (be careful!)</span></span><br><span class="line"><span class="comment">#no_builtin_template: false</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">## Customizable templates path</span></span><br><span class="line"><span class="comment">#templates:</span></span><br><span class="line"><span class="comment">#     - /config/dingding.tmpl</span></span><br><span class="line"><span class="params">templates:</span></span><br><span class="line">  <span class="operator">-</span> <span class="symbol">/config/template.tmpl</span></span><br><span class="line"><span class="comment">## You can also override default template using `default_message`</span></span><br><span class="line"><span class="comment">## The following example to use the 'legacy' template from v0.3.0</span></span><br><span class="line"><span class="comment">#default_message:      </span></span><br><span class="line"><span class="comment">#  title: '{{ template "legacy.title" . }}'</span></span><br><span class="line"><span class="comment">#  text: '{{ template "legacy.content" . }}'</span></span><br><span class="line"><span class="comment">## Targets, previously was known as "profiles"</span></span><br><span class="line"><span class="comment">#    text: '{{ template "_dingtalk.link.content" . }}'</span></span><br><span class="line"><span class="params">targets:</span></span><br><span class="line"></span><br><span class="line">  <span class="params">webhook1:</span></span><br><span class="line">    <span class="params">url:</span> https:<span class="operator">//</span>oapi.dingtalk.com<span class="operator">/</span>robot<span class="operator">/</span>send<span class="operator">?</span>access_token<span class="operator">=</span><span class="number">92268</span>cd2c48db0ec2a10a753213dda6a11e4d54ea8fdbce356f217fa44925a7f</span><br><span class="line">    <span class="params">secret:</span> 填写你的钉钉secret</span><br><span class="line">    </span><br><span class="line">  <span class="params">webhook-ide:</span></span><br><span class="line">    <span class="params">url:</span> https:<span class="operator">//</span>oapi.dingtalk.com<span class="operator">/</span>robot<span class="operator">/</span>send<span class="operator">?</span>access_token<span class="operator">=</span><span class="number">92268</span>cd2c48db0ec2a10a753213dda6a11e4d54ea8fdbce356f217fa44925a7f</span><br><span class="line">    <span class="params">secret:</span> 填写你的钉钉secret</span><br><span class="line"> </span><br><span class="line">  <span class="params">webhook-stage:</span></span><br><span class="line">    <span class="params">url:</span> https:<span class="operator">//</span>oapi.dingtalk.com<span class="operator">/</span>robot<span class="operator">/</span>send<span class="operator">?</span>access_token<span class="operator">=</span><span class="number">9</span>d7172785d72f50ab335367bd7db8cb013073f62bd0fd7bfc9605020a6a4b95c</span><br><span class="line">    <span class="params">secret:</span> 填写你的钉钉secret</span><br><span class="line"> </span><br><span class="line">  <span class="params">webhook-Pet:</span></span><br><span class="line">    <span class="params">url:</span> https:<span class="operator">//</span>oapi.dingtalk.com<span class="operator">/</span>robot<span class="operator">/</span>send<span class="operator">?</span>access_token<span class="operator">=</span><span class="number">89</span>b881f5798ec7cdff1538ecf3a7001dd30d19c7e5281e5e8329cb1e243b813e</span><br><span class="line">    <span class="params">secret:</span> 你的钉钉secret</span><br><span class="line">    </span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><p>这里还自定义了报警模板，上述文件中需要引入：</p><figure class="highlight handlebars"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">cat &gt; dingding.tmpl &lt;&lt; EOF</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">define</span> <span class="string">"__subject"</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">[</span><span class="template-variable">{{ <span class="name">.Status</span> | toUpper }}</span><span class="template-variable">{{ <span class="name"><span class="built_in">if</span></span> eq .Status <span class="string">"firing"</span> }}</span><span class="language-xml">:</span><span class="template-variable">{{ <span class="name">.Alerts.Firing</span> | len }}</span><span class="template-variable">{{ <span class="name">end</span> }}</span><span class="language-xml">]</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">end</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">define</span> <span class="string">"__alert_list"</span> }}</span><span class="template-variable">{{ <span class="name">range</span> . }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">---</span></span><br><span class="line"><span class="language-xml">**告警名称**: </span><span class="template-variable">{{ <span class="name">index</span> .Annotations <span class="string">"title"</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**告警级别**: </span><span class="template-variable">{{ <span class="name">.Labels.severity</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**告警主机组**: </span><span class="template-variable">{{ <span class="name">.Labels.group</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**告警主机**: </span><span class="template-variable">{{ <span class="name">.Labels.instance</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**图表数据**: [Click](</span><span class="template-variable">{{ <span class="name">.GeneratorURL</span> }}</span><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**告警信息**: </span><span class="template-variable">{{ <span class="name">index</span> .Annotations <span class="string">"description"</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**告警时间**: </span><span class="template-variable">{{ <span class="name">dateInZone</span> <span class="string">"2006.01.02 15:04:05"</span> (<span class="name">.StartsAt</span>) <span class="string">"Asia/Shanghai"</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**预案链接**: [CONF文档](</span><span class="template-variable">{{ <span class="name">index</span> .Annotations <span class="string">"plan_url"</span> }}</span><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">end</span> }}</span><span class="template-variable">{{ <span class="name">end</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">define</span> <span class="string">"__resolved_list"</span> }}</span><span class="template-variable">{{ <span class="name">range</span> . }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">---</span></span><br><span class="line"><span class="language-xml">**告警名称**: </span><span class="template-variable">{{ <span class="name">index</span> .Annotations <span class="string">"title"</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**告警级别**: </span><span class="template-variable">{{ <span class="name">.Labels.severity</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**告警主机**: </span><span class="template-variable">{{ <span class="name">.Labels.instance</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**图表数据**: [Click](</span><span class="template-variable">{{ <span class="name">.GeneratorURL</span> }}</span><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**告警信息**: </span><span class="template-variable">{{ <span class="name">index</span> .Annotations <span class="string">"description"</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**告警时间**: </span><span class="template-variable">{{ <span class="name">dateInZone</span> <span class="string">"2006.01.02 15:04:05"</span> (<span class="name">.StartsAt</span>) <span class="string">"Asia/Shanghai"</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**恢复时间**: </span><span class="template-variable">{{ <span class="name">dateInZone</span> <span class="string">"2006.01.02 15:04:05"</span> (<span class="name">.EndsAt</span>) <span class="string">"Asia/Shanghai"</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">end</span> }}</span><span class="template-variable">{{ <span class="name">end</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">define</span> <span class="string">"default.title"</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name"><span class="built_in">template</span></span> <span class="string">"__subject"</span> . }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">end</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">define</span> <span class="string">"default.content"</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name"><span class="built_in">if</span></span> gt (<span class="name">len</span> .Alerts.Firing) <span class="number">0</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**💔💔💔侦测到</span><span class="template-variable">{{ <span class="name">.Alerts.Firing</span> | len  }}</span><span class="language-xml">个告警💔💔💔**</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name"><span class="built_in">template</span></span> <span class="string">"__alert_list"</span> .Alerts.Firing }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">---</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">end</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name"><span class="built_in">if</span></span> gt (<span class="name">len</span> .Alerts.Resolved) <span class="number">0</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">**💚💚💚恢复</span><span class="template-variable">{{ <span class="name">.Alerts.Resolved</span> | len  }}</span><span class="language-xml">个告警💚💚💚**</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name"><span class="built_in">template</span></span> <span class="string">"__resolved_list"</span> .Alerts.Resolved }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">end</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">end</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">define</span> <span class="string">"ding.link.title"</span> }}</span><span class="template-variable">{{ <span class="name"><span class="built_in">template</span></span> <span class="string">"default.title"</span> . }}</span><span class="template-variable">{{ <span class="name">end</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name">define</span> <span class="string">"ding.link.content"</span> }}</span><span class="template-variable">{{ <span class="name"><span class="built_in">template</span></span> <span class="string">"default.content"</span> . }}</span><span class="template-variable">{{ <span class="name">end</span> }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name"><span class="built_in">template</span></span> <span class="string">"default.title"</span> . }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">{{ <span class="name"><span class="built_in">template</span></span> <span class="string">"default.content"</span> . }}</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">EOF</span></span><br></pre></td></tr></tbody></table></figure><p>这里需要注意的是，这个模板中我们加了自定义的一些自己想要的东西：</p><ul><li><p>需要在告警的时候加上针对每个告警的日常处理方式的一个预案，那么这个就给出一个文档的链接就行了，日常运维人员看到告警之后，一般都会进行一个故障处理过程或记录吧，这样能更加友好。那如何定义？<br>首先在告警规则中去定义字段,比如这里我添加了一个 <code>plan_url</code>:<br><img src="/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/p15.png"><br>然后再模板中引用即可.</p></li><li><p>Prometheus中需要开启 外部url 访问，即在启动的时候加入参数<code>- '--web.external-url=http://192.168.18.178:9090'</code>, 否则告警模板中的 <code>.GeneratorURL </code>这个值应用的是prometheus的主机名，即运行prometheus的那个容器的主机名，那样访问是访问不到的，所以需要修改</p></li></ul><p>另外在部署prometheus 我们还部署了一个容器上是github上有人开源了一个接入alertmanager api 的方式获取报警内容并进行展示。比起alertmanager这个组件自身的那个ui更加好用。出处：(<a href="https://github.com/prymitive/karma%EF%BC%89">https://github.com/prymitive/karma）</a></p><p><img src="/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/p17.png"></p><p><img src="/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/p18.png"></p><p>至此整个监控系统就搭建完毕，还是有比较细节的地方需要处理比如告警规则、告警频率这些需要去优化。</p><hr><p><img src="/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/111.jpeg"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;因公司历史遗留原因有个别环境暂时没有使用kubernets, 现在需要将这批服务器的监控系统从zabbix替换到Prometheus, 于是乎这边有个问题就是需要将所有服务器上面的所有的exporter mertics（即 target）地址写到Prometheus配置文件中，这样一来，维护一个文件，似乎还算可以，但是这里我采用Prometheus+Consul的方式来管理服务器上的所有exporter， 那么这样做的好处是我们能更清晰的通过Consul来管理上面的每个exporter url , 以及通过consul自带的自定义元数据，再结合Promethues无疑是个很灵活的方式。&lt;/p&gt;
&lt;h1 id=&quot;二、架构&quot;&gt;&lt;a href=&quot;#二、架构&quot; class=&quot;headerlink&quot; title=&quot;二、架构&quot;&gt;&lt;/a&gt;二、架构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/09/12/Prometheus-Consul%E5%AE%9E%E7%8E%B0%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%AE%BF%E4%B8%BB%E6%9C%BA-%E5%AE%B9%E5%99%A8%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/arch.png&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;promtheus配置数据源为consu_sd_configs 地址指向一个consul客户端地址；&lt;/li&gt;
&lt;li&gt;通过脚本调用consulapi的方式将宿主机上面的cadvisor-exporter,node-exporter metrics的地址注册到consul中；&lt;/li&gt;
&lt;li&gt;promtheus 检测到了新增服务后，会通过这个&lt;a href=&quot;http://xxxxxx:xxx/metrics&quot;&gt;http://xxxxxx:xxx/metrics&lt;/a&gt; url 抓取采集数据；&lt;/li&gt;
&lt;li&gt;后续的数据采集就跟平常我们使用的方式一样了，采集到的数据时序保存在promtheus；&lt;/li&gt;
&lt;li&gt;Grafana作为采集数据的一个展示,通过各种label，更加方便的对面板进行配置；&lt;/li&gt;
&lt;li&gt;添加node-exporter， cadvisor-exporter的指标报警规则，通过Alertmanager 发出主机或容器的告警；&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;三、实现&quot;&gt;&lt;a href=&quot;#三、实现&quot; class=&quot;headerlink&quot; title=&quot;三、实现&quot;&gt;&lt;/a&gt;三、实现&lt;/h1&gt;&lt;h2 id=&quot;Prometheus以及周边组件部署&quot;&gt;&lt;a href=&quot;#Prometheus以及周边组件部署&quot; class=&quot;headerlink&quot; title=&quot;Prometheus以及周边组件部署&quot;&gt;&lt;/a&gt;Prometheus以及周边组件部署&lt;/h2&gt;&lt;p&gt;该编排文件中部署了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prometheus: 监控系统主程序&lt;/li&gt;
&lt;li&gt;Alertmanager: 告警发送&lt;/li&gt;
&lt;li&gt;Grafana: 数据展示&lt;/li&gt;
&lt;li&gt;Prometheus-dingding-webhook: 钉钉告警推送&lt;/li&gt;
&lt;li&gt;alertmanager-dashboard: 主要用于告警条目展示，该软件是开源项目，随意下载部署&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight nestedtext&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;cat &amp;gt; docker-compose.yaml &amp;lt;&amp;lt; EOF&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;3.7&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;prometheus&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;prom/prometheus:latest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./prometheus/:/etc/prometheus/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/data/prometheus-data:/prometheus&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;--config.file=/etc/prometheus/prometheus.yml&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;--storage.tsdb.path=/prometheus&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;--web.console.libraries=/usr/share/prometheus/console_libraries&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;--web.console.templates=/usr/share/prometheus/consoles&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;--web.enable-lifecycle&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;--web.external-url=http://192.168.18.178:9090&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;9090:9090&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;alertmanager:alertmanager&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;always&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;500M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;alertmanager&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;prom/alertmanager&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;9093:9093&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./alertmanager/:/etc/alertmanager/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;always&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;--config.file=/etc/alertmanager/config.yml&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;--storage.path=/alertmanager&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;500M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;grafana&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;grafana/grafana:8.4.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;prometheus&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;3000:3000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/data/grafana-data:/var/lib/grafana&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./grafana/provisioning/:/etc/grafana/provisioning/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./grafana/config.monitoring&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;always&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;500M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;webhook&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;timonwong/prometheus-webhook-dingtalk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;prometheus&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./prometheus-webhook-dingtalk/config.yml:/config/config.yml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./prometheus-webhook-dingtalk/dingding.tmpl:/config/dingding.tmpl&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;9060:8060&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;--web.listen-address=:8060&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;--config.file=/config/config.yml&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;--web.enable-ui&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;--web.enable-lifecycle&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;always&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;500M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;alertmanager-dashboard&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ghcr.io/prymitive/karma:latest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;9094:8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;always&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ALERTMANAGER_URI=http://192.168.18.178:9093&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attribute&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;500M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EOF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# run起来&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker-compose up -d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="monitor" scheme="https://blog.sctux.cc/categories/monitor/"/>
    
    
    <category term="Prometheus" scheme="https://blog.sctux.cc/tags/Prometheus/"/>
    
    <category term="Consul" scheme="https://blog.sctux.cc/tags/Consul/"/>
    
    <category term="Alertmanager" scheme="https://blog.sctux.cc/tags/Alertmanager/"/>
    
  </entry>
  
  <entry>
    <title>基于容器化部署Nacos集群</title>
    <link href="https://blog.sctux.cc/2022/06/22/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/"/>
    <id>https://blog.sctux.cc/2022/06/22/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/</id>
    <published>2022-06-22T14:41:33.000Z</published>
    <updated>2025-09-01T01:59:08.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、搭建架构"><a href="#一、搭建架构" class="headerlink" title="一、搭建架构"></a>一、搭建架构</h1><p><img src="/2022/06/22/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/arch-1.png"><br>● 3个或3个以上Nacos节点才能构成集群；<br>● Nacos Nginx Proxy用于代理转发；</p><hr><h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><p><em><strong>Nacos2.0版本相比1.X新增了gRPC的通信方式，因此需要增加2个端口。新增端口是在配置的主端口(server.port)基础上，进行一定偏移量自动生成。</strong></em></p><table><thead><tr><th>端口</th><th>与主端口的偏移量</th><th>描述</th></tr></thead><tbody><tr><td>8848</td><td>0</td><td>Nacos程序主配置端口</td></tr><tr><td>9848</td><td>+1000</td><td>客户端gRPC请求服务端端口，用于客户端向服务端发起连接和请求</td></tr><tr><td>9849</td><td>+1001</td><td>服务端gRPC请求服务端端口，用于服务间同步等</td></tr><tr><td>7848</td><td>-1000</td><td>Nacos 集群通信端口，用于Nacos 集群间进行选举，检测等</td></tr></tbody></table><p><em><strong>使用VIP/nginx请求时，需要配置成TCP转发，不能配置http2转发，否则连接会被nginx断开</strong></em><br><img src="/2022/06/22/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/arch-2.png"></p><p>按照上述官方的端口分配要求 ，此处部署的使用三台服务器上面创建的Nacos集群端口分配如下：</p><table><thead><tr><th>节点</th><th>IP</th><th>端口（所需暴露）</th><th>备注</th><th>版本</th><th>当前线下环境部署文件路径</th></tr></thead><tbody><tr><td>Nacos_1</td><td>192168.18.73</td><td>宿主机：8858，9858，9859，7858  容器：8858，9858，9859，7858</td><td>Nacos 节点一</td><td>nacos/nacos-server:2.0.2</td><td>/root/nacos-deploy/</td></tr><tr><td>Nacos_2</td><td>192168.18.74</td><td>宿主机：8858，9858，9859，7858  容器：8858，9858，9859，7858</td><td>Nacos 节点二</td><td>nacos/nacos-server:2.0.2</td><td>/root/nacos-deploy/</td></tr><tr><td>Nacos_3</td><td>192168.18.75</td><td>宿主机：8858，9858，9859，7858  容器：8858，9858，9859，7858</td><td>Nacos 节点三</td><td>nacos/nacos-server:2.0.2</td><td>/root/nacos-deploy/</td></tr><tr><td>Nacos DB</td><td>192168.18.75</td><td>宿主机：3306 容器：3306</td><td>Nacos所需数据库</td><td>mysql:5.7.34</td><td>/root/nacos-mysql-deploy</td></tr><tr><td>Nacos  Nginx Proxy</td><td>192168.18.75</td><td>宿主机：80  容器：80</td><td>Nacos代理</td><td>nginx:stable-alpine</td><td>/root/nacos-proxy-deploy</td></tr></tbody></table><h2 id="2-1-创建Nacos数据库"><a href="#2-1-创建Nacos数据库" class="headerlink" title="2.1  创建Nacos数据库"></a>2.1  创建Nacos数据库</h2><p>这里使用的是容器化运行nacos，需要创建一个数据库，并从官方对应的版本中去导入基本数据库结构的数据文件</p><h2 id="2-1-1-获取nacos-2-0-2-包文件中的基础表结构数据"><a href="#2-1-1-获取nacos-2-0-2-包文件中的基础表结构数据" class="headerlink" title="2.1.1 获取nacos 2.0.2 包文件中的基础表结构数据"></a>2.1.1 获取nacos 2.0.2 包文件中的基础表结构数据</h2><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/alibaba/nacos/releases/download/<span class="number">2.0</span><span class="number">.2</span>/nacos-<span class="keyword">server</span><span class="number">-2.0</span><span class="number">.2</span>.tar.gz</span><br><span class="line"></span><br><span class="line"># tar -xf nacos-<span class="keyword">server</span><span class="number">-2.0</span><span class="number">.2</span>.tar.gz</span><br><span class="line"># cd  nacos</span><br><span class="line"># tree -L <span class="number">2</span></span><br><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">│   ├── shutdown.cmd</span><br><span class="line">│   ├── shutdown.sh</span><br><span class="line">│   ├── startup.cmd</span><br><span class="line">│   └── startup.sh</span><br><span class="line">├── conf</span><br><span class="line">│   ├── <span class="number">1.4</span><span class="number">.0</span>-ipv6_support-<span class="keyword">update</span>.<span class="keyword">sql</span></span><br><span class="line">│   ├── application.properties</span><br><span class="line">│   ├── application.properties.example</span><br><span class="line">│   ├── <span class="keyword">cluster</span>.conf.example</span><br><span class="line">│   ├── nacos-logback.xml</span><br><span class="line">│   ├── nacos-mysql.<span class="keyword">sql</span></span><br><span class="line">│   └── <span class="keyword">schema</span>.<span class="keyword">sql</span></span><br><span class="line">├── LICENSE</span><br><span class="line">├── <span class="keyword">NOTICE</span></span><br><span class="line">└── target</span><br><span class="line">    └── nacos-<span class="keyword">server</span>.jar</span><br><span class="line">以上是nacos的二进制包文件 ，这里只用到了 nacos-mysql.<span class="keyword">sql</span>  这个文件</span><br></pre></td></tr></tbody></table></figure><h2 id="2-1-2-创建mysql服务"><a href="#2-1-2-创建mysql服务" class="headerlink" title="2.1.2 创建mysql服务"></a>2.1.2 创建mysql服务</h2><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 192.168.18.75</span></span><br><span class="line">sudo <span class="operator">-</span>i </span><br><span class="line">mkdir <span class="symbol">/data/mysql</span></span><br><span class="line">cat <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF <span class="operator">&gt;</span> <span class="symbol">/root/nacos-mysql-deploy/mysql.yaml</span></span><br><span class="line"><span class="params">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="params">services:</span></span><br><span class="line">  <span class="params">mysql-db:</span></span><br><span class="line">    <span class="params">container_name:</span> nacos-mysql</span><br><span class="line">    <span class="params">image:</span> mysql:<span class="number">5.7</span>.<span class="number">34</span></span><br><span class="line">    <span class="params">ports:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"3306:3306"</span></span><br><span class="line">    <span class="params">environment:</span></span><br><span class="line">      <span class="params">MYSQL_ROOT_PASSWORD:</span> xxxxxxxxxxxx</span><br><span class="line">    <span class="params">volumes:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"/data/mysql:/var/lib/mysql"</span></span><br><span class="line">    <span class="params">restart:</span> always</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">docker-compose <span class="operator">-</span>f  <span class="symbol">/root/nacos-mysql-deploy/mysql.yaml</span> up <span class="operator">-</span>d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入官方表数据</span></span><br><span class="line">docker cp <span class="symbol">/root/nacos/conf/nacos-mysql.sql</span> nacos-mysql:<span class="symbol">/tmp</span></span><br><span class="line"></span><br><span class="line">docker exec <span class="operator">-</span>it nacos-mysql sh</span><br><span class="line"></span><br><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>pxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">create database nacos;</span><br><span class="line"></span><br><span class="line">use nacos;</span><br><span class="line"></span><br><span class="line">source <span class="symbol">/tmp/nacos-mysql.sql</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-Naocs服务"><a href="#2-2-Naocs服务" class="headerlink" title="2.2  Naocs服务"></a>2.2  Naocs服务</h2><h2 id="2-2-1-创建、编写yaml文件"><a href="#2-2-1-创建、编写yaml文件" class="headerlink" title="2.2.1 创建、编写yaml文件"></a>2.2.1 创建、编写yaml文件</h2><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">mkdir /data/nacos2.0.2_1/logs -p</span><br><span class="line">mkdir /root/nacos-deploy/</span><br><span class="line">cat &lt;&lt; EOF &gt; /root/nacos-deploy/nacos1.yaml</span><br><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  nacos1:</span><br><span class="line">    hostname: nacos2.0.2_1</span><br><span class="line">    container_name: nacos2.0.2_1</span><br><span class="line">    image: nacos/nacos-server:2.0.2</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/nacos2.0.2_1/logs:/home/nacos/logs</span><br><span class="line">      - /data/nacos2.0.2_1/custom.properties:/home/nacos/init.d/custom.properties</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"8858:8858"</span></span><br><span class="line">      - <span class="string">"9858:9858"</span></span><br><span class="line">      - <span class="string">"9859:9859"</span></span><br><span class="line">      - <span class="string">"7858:7858"</span></span><br><span class="line">    environment:</span><br><span class="line">      - <span class="attribute">MODE</span>=cluster</span><br><span class="line">      - <span class="attribute">PREFER_HOST_MODE</span>=hostname</span><br><span class="line">      - <span class="attribute">NACOS_SERVER_IP</span>=192.168.18.73</span><br><span class="line">      - <span class="attribute">NACOS_APPLICATION_PORT</span>=8858</span><br><span class="line">      - <span class="attribute">NACOS_SERVERS</span>=192.168.18.73:8858 192.168.18.74:8858 192.168.18.75:8858</span><br><span class="line">      - <span class="attribute">SPRING_DATASOURCE_PLATFORM</span>=mysql</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_HOST</span>=192.168.18.75</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_DB_NAME</span>=nacos</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_PORT</span>=3306</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_USER</span>=root</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_PASSWORD</span>=xxxxxxxxxxx</span><br><span class="line">      - <span class="attribute">NACOS_AUTH_ENABLE</span>=<span class="literal">true</span></span><br><span class="line">      - <span class="attribute">MYSQL_DATABASE_NUM</span>=1</span><br><span class="line">    restart: always</span><br><span class="line">EOF</span><br><span class="line"><span class="comment">######################</span></span><br><span class="line">sudo -i</span><br><span class="line">mkdir /data/nacos2.0.2_2/logs -p</span><br><span class="line">mkdir /root/nacos-deploy/</span><br><span class="line">cat &lt;&lt; EOF &gt; /root/nacos-deploy/nacos2.yaml</span><br><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  nacos2:</span><br><span class="line">    hostname: nacos2.0.2_2</span><br><span class="line">    container_name: nacos2.0.2_2</span><br><span class="line">    image: nacos/nacos-server:2.0.2</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/nacos2.0.2_2/logs:/home/nacos/logs</span><br><span class="line">      - /data/nacos2.0.2_2/custom.properties:/home/nacos/init.d/custom.properties</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"8858:8858"</span></span><br><span class="line">      - <span class="string">"9858:9858"</span></span><br><span class="line">      - <span class="string">"9859:9859"</span></span><br><span class="line">      - <span class="string">"7858:7858"</span></span><br><span class="line">    environment:</span><br><span class="line">      - <span class="attribute">MODE</span>=cluster</span><br><span class="line">      - <span class="attribute">PREFER_HOST_MODE</span>=hostname</span><br><span class="line">      - <span class="attribute">NACOS_SERVER_IP</span>=192.168.18.74</span><br><span class="line">      - <span class="attribute">NACOS_APPLICATION_PORT</span>=8858</span><br><span class="line">      - <span class="attribute">NACOS_SERVERS</span>=192.168.18.73:8858 192.168.18.74:8858 192.168.18.75:8858</span><br><span class="line">      - <span class="attribute">SPRING_DATASOURCE_PLATFORM</span>=mysql</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_HOST</span>=192.168.18.75</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_DB_NAME</span>=nacos</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_PORT</span>=3306</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_USER</span>=root</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_PASSWORD</span>=xxxxxxxxxxx</span><br><span class="line">      - <span class="attribute">NACOS_AUTH_ENABLE</span>=<span class="literal">true</span></span><br><span class="line">      - <span class="attribute">MYSQL_DATABASE_NUM</span>=1</span><br><span class="line">    restart: always</span><br><span class="line">EOF</span><br><span class="line"><span class="comment">######################</span></span><br><span class="line">sudo -i</span><br><span class="line">mkdir /data/nacos2.0.2_3/logs -p</span><br><span class="line">mkdir /root/nacos-deploy/</span><br><span class="line">cat &lt;&lt; EOF &gt; /root/nacos-deploy/nacos3.yaml</span><br><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  nacos3:</span><br><span class="line">    hostname: nacos2.0.2_3</span><br><span class="line">    container_name: nacos2.0.2_3</span><br><span class="line">    image: nacos/nacos-server:2.0.2</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/nacos2.0.2_3/logs:/home/nacos/logs</span><br><span class="line">      - /data/nacos2.0.2_3/custom.properties:/home/nacos/init.d/custom.properties</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"8858:8858"</span></span><br><span class="line">      - <span class="string">"9858:9858"</span></span><br><span class="line">      - <span class="string">"9859:9859"</span></span><br><span class="line">      - <span class="string">"7858:7858"</span></span><br><span class="line">    environment:</span><br><span class="line">      - <span class="attribute">MODE</span>=cluster</span><br><span class="line">      - <span class="attribute">PREFER_HOST_MODE</span>=hostname</span><br><span class="line">      - <span class="attribute">NACOS_SERVER_IP</span>=192.168.18.75</span><br><span class="line">      - <span class="attribute">NACOS_APPLICATION_PORT</span>=8858</span><br><span class="line">      - <span class="attribute">NACOS_SERVERS</span>=192.168.18.73:8858 192.168.18.74:8858 192.168.18.75:8858</span><br><span class="line">      - <span class="attribute">SPRING_DATASOURCE_PLATFORM</span>=mysql</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_HOST</span>=192.168.18.75</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_DB_NAME</span>=nacos</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_PORT</span>=3306</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_USER</span>=root</span><br><span class="line">      - <span class="attribute">MYSQL_SERVICE_PASSWORD</span>=xxxxxxxxxxx</span><br><span class="line">      - <span class="attribute">NACOS_AUTH_ENABLE</span>=<span class="literal">true</span></span><br><span class="line">      - <span class="attribute">MYSQL_DATABASE_NUM</span>=1</span><br><span class="line">    restart: always</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><p>以上 各配置中的端口非标准端口，需要注意环境变量 NACOS_APPLICATION_PORT  如果不指定为非特定端口，那么缺省在配置中的环境变量则为 8848 ，在同一台机器上运行三个节点会出现问题！</p><h2 id="2-2-2-运行Nacos"><a href="#2-2-2-运行Nacos" class="headerlink" title="2.2.2 运行Nacos"></a>2.2.2 运行Nacos</h2><p>各节点运行即可</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 192.168.18.73</span></span><br><span class="line">docker-compose -f <span class="regexp">/root/</span>nacos-deploy/nacos1.yaml up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 192.168.18.74</span></span><br><span class="line">docker-compose -f <span class="regexp">/root/</span>nacos-deploy/nacos2.yaml up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 192.168.18.75</span></span><br><span class="line">docker-compose -f <span class="regexp">/root/</span>nacos-deploy/nacos3.yaml up -d</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/06/22/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/3.png"></p><p>上图 三个节点单独访问页面正常；通过代理访问正常；</p><p>注意：web页面并没有使用到客户端，服务端gRPC调用服务，但是在程序中需要请求对应的端口，所以务必需要暴露出来，因为使用了非标准端口，那么在nginx做代理时就直接(伪装)映射成标准端口即可。</p><h2 id="2-3-Nginx代理配置"><a href="#2-3-Nginx代理配置" class="headerlink" title="2.3 Nginx代理配置"></a>2.3 Nginx代理配置</h2><p>此处仍然使用容器化方式运行。<br>配置nginx代理</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/nacos-proxy-deploy</span><br><span class="line">cd /root/nacos-proxy-deploy</span><br><span class="line">cat &lt;&lt;EOF &gt; nginx.conf  </span><br><span class="line"><span class="keyword">user</span>  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"> </span><br><span class="line">error_log  /var/<span class="keyword">log</span>/nginx/error.<span class="keyword">log</span> <span class="keyword">notice</span>;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">events {</span><br><span class="line">    worker_connections  <span class="number">65535</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">stream {</span><br><span class="line">    upstream nacos-<span class="keyword">server</span>-grpc9848 {</span><br><span class="line">      <span class="keyword">server</span> <span class="number">192.168</span><span class="number">.18</span><span class="number">.73</span>:<span class="number">9858</span> max_fails=<span class="number">1</span> fail_timeout=<span class="number">30</span>s;</span><br><span class="line">      <span class="keyword">server</span> <span class="number">192.168</span><span class="number">.18</span><span class="number">.74</span>:<span class="number">9858</span> max_fails=<span class="number">1</span> fail_timeout=<span class="number">30</span>s;</span><br><span class="line">      <span class="keyword">server</span> <span class="number">192.168</span><span class="number">.18</span><span class="number">.75</span>:<span class="number">9858</span> max_fails=<span class="number">1</span> fail_timeout=<span class="number">30</span>s</span><br><span class="line">     }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">server</span> {</span><br><span class="line">        <span class="keyword">listen</span> <span class="number">9848</span>;</span><br><span class="line">        proxy_pass nacos-<span class="keyword">server</span>-grpc9848;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    upstream nacos-<span class="keyword">server</span>-grpc9849 {</span><br><span class="line">      <span class="keyword">server</span> <span class="number">192.168</span><span class="number">.18</span><span class="number">.73</span>:<span class="number">9859</span> max_fails=<span class="number">1</span> fail_timeout=<span class="number">30</span>s;</span><br><span class="line">      <span class="keyword">server</span> <span class="number">192.168</span><span class="number">.18</span><span class="number">.74</span>:<span class="number">9859</span> max_fails=<span class="number">1</span> fail_timeout=<span class="number">30</span>s;      </span><br><span class="line">      <span class="keyword">server</span> <span class="number">192.168</span><span class="number">.18</span><span class="number">.75</span>:<span class="number">9859</span> max_fails=<span class="number">1</span> fail_timeout=<span class="number">30</span>s;</span><br><span class="line">     }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">server</span> {</span><br><span class="line">        <span class="keyword">listen</span> <span class="number">9849</span>;</span><br><span class="line">        proxy_pass nacos-<span class="keyword">server</span>-grpc9849;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">http {</span><br><span class="line">    <span class="keyword">include</span>       /etc/nginx/mime.<span class="keyword">types</span>;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"> </span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"> </span><br><span class="line">    access_log  /var/<span class="keyword">log</span>/nginx/<span class="keyword">access</span>.<span class="keyword">log</span>  main;</span><br><span class="line"> </span><br><span class="line">    sendfile        <span class="keyword">on</span>;</span><br><span class="line">    #tcp_nopush     <span class="keyword">on</span>;</span><br><span class="line"> </span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"> </span><br><span class="line">    #gzip  <span class="keyword">on</span>;</span><br><span class="line"> </span><br><span class="line">    upstream NACOS {</span><br><span class="line">      <span class="keyword">server</span>  <span class="number">192.168</span><span class="number">.18</span><span class="number">.73</span>:<span class="number">8858</span> max_fails=<span class="number">1</span> fail_timeout=<span class="number">30</span>s;</span><br><span class="line">      <span class="keyword">server</span>  <span class="number">192.168</span><span class="number">.18</span><span class="number">.74</span>:<span class="number">8858</span> max_fails=<span class="number">1</span> fail_timeout=<span class="number">30</span>s;</span><br><span class="line">      <span class="keyword">server</span>  <span class="number">192.168</span><span class="number">.18</span><span class="number">.75</span>:<span class="number">8858</span> max_fails=<span class="number">1</span> fail_timeout=<span class="number">30</span>s;</span><br><span class="line">   }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">server</span> {</span><br><span class="line">      <span class="keyword">listen</span>       <span class="number">8848</span> default_server;</span><br><span class="line">      server_name  _;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">location</span> / {</span><br><span class="line">        proxy_pass http://NACOS;</span><br><span class="line">      }</span><br><span class="line"> </span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">include</span> /etc/nginx/conf.d<span class="comment">/*.conf;</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">EOF</span></span><br></pre></td></tr></tbody></table></figure><p>代理容器yaml文件编写</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&gt;</span> <span class="string">nacos-nginx-proxy.yaml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span>  </span><br><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos_proxy:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nacos_nginx_proxy</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">"nginx:stable-alpine"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">80:</span> <span class="number">8848</span>  <span class="comment">#这里定义一个80是为了前端访问，或客户端配置定义时无需再加端口，一个ip或者域名即可</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8848</span><span class="string">:8848</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9848</span><span class="string">:9848</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9849</span><span class="string">:9849</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/nacos-proxy-deploy/nginx.conf:/etc/nginx/nginx.conf:ro</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器运行</span></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">-f</span> <span class="string">nacos-proxy.yaml</span> <span class="string">up</span> <span class="string">-d</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/06/22/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/4.png"><br>至此搭建完毕，但是容器运行正常不一定服务就是正常，这时需要测试实例服务注册是否正常</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; nacos_check_status.py &lt;&lt; EOF</span><br><span class="line"><span class="comment"># author: maoqiu.guo</span></span><br><span class="line"><span class="comment"># desc: Nacos服务注册功能测试、状态监控</span></span><br><span class="line"><span class="comment"># date：2022-06-11</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line"><span class="comment"># 创建日志记录器，指明日志保存的路径，每个日志文件的最大值，保存的日志文件个数上限</span></span><br><span class="line">log_handle = RotatingFileHandler(<span class="string">'./log.txt'</span>, maxBytes=<span class="number">1024</span>*<span class="number">1024</span>, backupCount=<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 创建日志记录的格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">"format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s-%(funcName)s',"</span>)</span><br><span class="line"><span class="comment"># 为创建的日志记录器设置日志记录格式</span></span><br><span class="line">log_handle.setFormatter(formatter)</span><br><span class="line"><span class="comment"># 为全局的日志工具对象添加日志记录器</span></span><br><span class="line">logging.getLogger().addHandler(log_handle)</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进度条</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress_bar</span>(<span class="params">timmer</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\r"</span>, end=<span class="string">""</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Waiting: {}%: "</span>.<span class="built_in">format</span>(i), <span class="string">"▋"</span> * (i // <span class="number">2</span>), end=<span class="string">""</span>)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">        time.sleep(timmer)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Nacos</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.webhookurl=<span class="string">"https://oapi.dingtalk.com/robot/send?access_token=1968dd11647dfd686c4e1107cf1ad3d0d21c3813a824ee632728327722d9fa82"</span></span><br><span class="line">        <span class="variable language_">self</span>.login_url = <span class="string">"/nacos/v1/auth/users/login"</span></span><br><span class="line">        <span class="variable language_">self</span>.accessToken=<span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.service_url =  <span class="string">"/nacos/v1/ns/catalog/services"</span></span><br><span class="line">        <span class="variable language_">self</span>.instance_url = <span class="string">"/nacos/v1/ns/instance"</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dingding</span>(<span class="params">self, content</span>):</span><br><span class="line">         </span><br><span class="line">        data = {</span><br><span class="line">            <span class="string">"msgtype"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="string">"text"</span>: {</span><br><span class="line">                <span class="string">"content"</span>: <span class="string">"Nacos-"</span> + content,</span><br><span class="line">            },</span><br><span class="line">        }</span><br><span class="line">        headers = {<span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8'</span>}</span><br><span class="line">        response = requests.post(<span class="variable language_">self</span>.webhookurl, data=json.dumps(data), headers=headers)</span><br><span class="line">        <span class="built_in">print</span>(response.content)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_access_token</span>(<span class="params">self, nacos_server</span>):</span><br><span class="line">        logging.info(<span class="string">"\n\n************** NacosServer: {0} **************"</span>.<span class="built_in">format</span>(nacos_server))</span><br><span class="line">        <span class="string">"登录获取nacos accessToken"</span></span><br><span class="line">        params= <span class="string">"username=nacos&amp;password=nacos"</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = json.loads(requests.post(params=params, url=<span class="string">"http://"</span> + nacos_server + <span class="variable language_">self</span>.login_url, timeout=<span class="number">5</span>).text)</span><br><span class="line">            accessToken = <span class="built_in">str</span>((r[<span class="string">'accessToken'</span>]))</span><br><span class="line">            <span class="keyword">return</span> {<span class="string">"accessToken"</span>: accessToken, <span class="string">"result"</span>: <span class="literal">True</span>, <span class="string">"server"</span>: nacos_server, <span class="string">"msg"</span>: <span class="string">"Login Nacos Success...[{0}]"</span>.<span class="built_in">format</span>(nacos_server)}</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> {<span class="string">"accessToken"</span>: <span class="literal">None</span>, <span class="string">"result"</span>: <span class="literal">False</span>, <span class="string">"server"</span>: nacos_server, <span class="string">"msg"</span>: <span class="string">"Login Nacos Falied...[{0}] Error: {1}"</span>.<span class="built_in">format</span>(nacos_server, <span class="built_in">str</span>(e))}</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">register_test</span>(<span class="params">self, accessToken, nacos_server</span>):</span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        1. 创建实例</span></span><br><span class="line"><span class="string">        2. 注册服务</span></span><br><span class="line"><span class="string">        3. 删除实例</span></span><br><span class="line"><span class="string">        4. 删除服务</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        data={</span><br><span class="line">            <span class="string">"serviceName"</span>: <span class="string">"test_service_instance"</span>,</span><br><span class="line">            <span class="string">"namespaceId"</span>: <span class="string">"public"</span>,</span><br><span class="line">            <span class="string">"accessToken"</span>: accessToken,</span><br><span class="line">            <span class="string">"ip"</span>: nacos_server.split(<span class="string">":"</span>)[<span class="number">0</span>],</span><br><span class="line">            <span class="string">"port"</span>: nacos_server.split(<span class="string">":"</span>)[<span class="number">1</span>],</span><br><span class="line">            <span class="string">"ephemeral"</span>: <span class="literal">False</span></span><br><span class="line">        }</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 创建服务(注册实例)</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = (requests.post(params=data, url=<span class="string">"http://"</span> + nacos_server + <span class="variable language_">self</span>.instance_url, timeout=<span class="number">5</span>).text)</span><br><span class="line">            <span class="keyword">if</span> r == <span class="string">"ok"</span>:</span><br><span class="line">                msg = <span class="string">"[注册实例&amp;创建服务成功] Service: {0} NameSpace: {1} {2} InstanceIP: {3}"</span>.<span class="built_in">format</span>(data[<span class="string">'serviceName'</span>], data[<span class="string">'namespaceId'</span>], nacos_server, data[<span class="string">'ip'</span>])</span><br><span class="line">                logging.info(msg)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                msg = <span class="string">"[注册实例&amp;创建服务失败] Service: {0} NameSpace: {1} {2} {3}"</span>.<span class="built_in">format</span>(data[<span class="string">'serviceName'</span>], data[<span class="string">'namespaceId'</span>], nacos_server, r)</span><br><span class="line">                logging.error(msg)</span><br><span class="line">                <span class="variable language_">self</span>.dingding(<span class="variable language_">self</span>, content=msg)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                msg = <span class="string">"[注册实例&amp;创建服务失败] Service: {0} NameSpace: {1} {2} {3}"</span>.<span class="built_in">format</span>(data[<span class="string">'serviceName'</span>], data[<span class="string">'namespaceId'</span>], nacos_server, r)</span><br><span class="line">                logging.error(msg)</span><br><span class="line">                <span class="variable language_">self</span>.dingding(<span class="variable language_">self</span>, content=msg)</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># 删除实例</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_instance_service</span>(<span class="params">self, accessToken, nacos_server</span>):</span><br><span class="line">        data={</span><br><span class="line">            <span class="string">"serviceName"</span>: <span class="string">"test_service_instance"</span>,</span><br><span class="line">            <span class="string">"namespaceId"</span>: <span class="string">"public"</span>,</span><br><span class="line">            <span class="string">"accessToken"</span>: accessToken,</span><br><span class="line">            <span class="string">"ip"</span>: nacos_server.split(<span class="string">":"</span>)[<span class="number">0</span>],</span><br><span class="line">            <span class="string">"port"</span>: nacos_server.split(<span class="string">":"</span>)[<span class="number">1</span>],</span><br><span class="line">            <span class="string">"ephemeral"</span>: <span class="literal">False</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment"># 注销实例</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = (requests.delete(params=data, url=<span class="string">"http://"</span> + nacos_server + <span class="variable language_">self</span>.instance_url, timeout=<span class="number">5</span>).text)           </span><br><span class="line">            <span class="keyword">if</span> r == <span class="string">"ok"</span>:</span><br><span class="line">                msg = <span class="string">"[注销实例成功] Service: {0} NameSpace: {1} {2} "</span>.<span class="built_in">format</span>(data[<span class="string">'serviceName'</span>], data[<span class="string">'namespaceId'</span>], nacos_server)</span><br><span class="line">                logging.info(msg)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                msg = <span class="string">"[注销实例失败] Service: {0} NameSpace: {1} {2} {3}"</span>.<span class="built_in">format</span>(data[<span class="string">'serviceName'</span>], data[<span class="string">'namespaceId'</span>], nacos_server, r)</span><br><span class="line">                logging.error(msg)</span><br><span class="line">                <span class="variable language_">self</span>.dingding(<span class="variable language_">self</span>, content=msg)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                msg = <span class="string">"[注销实例失败] Service: {0} NameSpace: {1} {2} {3}"</span>.<span class="built_in">format</span>(data[<span class="string">'serviceName'</span>], data[<span class="string">'namespaceId'</span>], nacos_server, r)</span><br><span class="line">                logging.error(msg)</span><br><span class="line">                <span class="variable language_">self</span>.dingding(<span class="variable language_">self</span>, content=msg)</span><br><span class="line"> </span><br><span class="line">        progress_bar(timmer=<span class="number">0.08</span>)</span><br><span class="line">        <span class="comment"># 删除服务</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = (requests.delete(params=data, url=<span class="string">"http://"</span> + nacos_server + <span class="string">"/nacos/v1/ns/service"</span>, timeout=<span class="number">5</span>).text)</span><br><span class="line">            <span class="keyword">if</span> r == <span class="string">"ok"</span>:</span><br><span class="line">                msg = <span class="string">"[删除服务成功] Service: {0} NameSpace: {1} {2} "</span>.<span class="built_in">format</span>(data[<span class="string">'serviceName'</span>], data[<span class="string">'namespaceId'</span>], nacos_server)</span><br><span class="line">                logging.info(msg)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                msg = <span class="string">"[删除服务失败] Service: {0} NameSpace: {1} {2} {3}"</span>.<span class="built_in">format</span>(data[<span class="string">'serviceName'</span>], data[<span class="string">'namespaceId'</span>], nacos_server, r)</span><br><span class="line">                logging.error(msg)</span><br><span class="line">                <span class="variable language_">self</span>.dingding(<span class="variable language_">self</span>, content=msg)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                msg = <span class="string">"[删除服务失败] Service: {0} NameSpace: {1} {2} {3}"</span>.<span class="built_in">format</span>(data[<span class="string">'serviceName'</span>], data[<span class="string">'namespaceId'</span>], nacos_server, r)</span><br><span class="line">                logging.error(msg)</span><br><span class="line">                <span class="variable language_">self</span>.dingding(<span class="variable language_">self</span>, content=msg)</span><br><span class="line">        progress_bar(timmer=<span class="number">0.1</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_service_list</span>(<span class="params">self, accessToken, nacos_server</span>):</span><br><span class="line">        <span class="string">"请求访问某个环境的某一个服务列表, 检查返回数据是否为空,为空则为不正常"</span></span><br><span class="line">        payload={</span><br><span class="line">            <span class="string">"accessToken"</span>: accessToken,</span><br><span class="line">            <span class="string">"pageNo"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"pageSize"</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">"namespaceId"</span>: <span class="string">"stage"</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = json.loads(requests.get(params=payload, url=<span class="string">"http://"</span> + nacos_server + <span class="variable language_">self</span>.service_url).text)</span><br><span class="line">            <span class="keyword">if</span> r[<span class="string">'count'</span>] == <span class="number">0</span>:</span><br><span class="line">                msg = <span class="string">"[获取注册服务数据失败] Nacos Server {0} 当前Stage服务列表为空!"</span>.<span class="built_in">format</span>(nacos_server)</span><br><span class="line">                logging.info(msg)</span><br><span class="line">                <span class="variable language_">self</span>.dingding(<span class="variable language_">self</span>, content=msg)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># print("Nacos 注册服务数据正常...[{0}]".format(nacos_server))</span></span><br><span class="line">                logging.info(<span class="string">"[获取注册服务数据成功] ServiceTotal {1} on {0} - SercieName: stage "</span>.<span class="built_in">format</span>(nacos_server,r[<span class="string">'count'</span>]))</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">letsgo</span>(<span class="params">self, nacos_server</span>):</span><br><span class="line">        <span class="comment"># 登录获取token</span></span><br><span class="line">        login_nacos_res = (<span class="variable language_">self</span>.get_access_token(nacos_server))</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span> login_nacos_res[<span class="string">"result"</span>]:</span><br><span class="line">            logging.info(<span class="string">"[登录获取accessToken 成功] Nacos Server {0} "</span>.<span class="built_in">format</span>((login_nacos_res[<span class="string">'server'</span>])))</span><br><span class="line"> </span><br><span class="line">            <span class="variable language_">self</span>.get_service_list(login_nacos_res[<span class="string">'accessToken'</span>], login_nacos_res[<span class="string">'server'</span>] )</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 创建实例&amp;服务</span></span><br><span class="line">            <span class="variable language_">self</span>.register_test(login_nacos_res[<span class="string">'accessToken'</span>], login_nacos_res[<span class="string">'server'</span>] )</span><br><span class="line"> </span><br><span class="line">            <span class="comment">#time.sleep(60 * 2)</span></span><br><span class="line">            progress_bar(timmer=<span class="number">0.1</span>)</span><br><span class="line">            <span class="variable language_">self</span>.delete_instance_service(login_nacos_res[<span class="string">'accessToken'</span>], login_nacos_res[<span class="string">'server'</span>] )</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg = <span class="string">"[登录获取accessToken 失败] {0} "</span>.<span class="built_in">format</span>((login_nacos_res[<span class="string">'msg'</span>]))</span><br><span class="line">            logging.info(msg)</span><br><span class="line">            <span class="variable language_">self</span>.dingding(<span class="variable language_">self</span>, content=msg)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        nacos_server_list=[</span><br><span class="line">        <span class="comment">#"nacos.axiba.com",</span></span><br><span class="line">            <span class="string">"192.168.18.75:80"</span>,</span><br><span class="line">            <span class="string">"192.168.18.75:8848"</span>,</span><br><span class="line">            <span class="string">"192.168.18.73:8858"</span>,</span><br><span class="line">            <span class="string">"192.168.18.74:8858"</span>,</span><br><span class="line">            <span class="string">"192.168.18.75:8858"</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nacos_server_list:</span><br><span class="line">            Nacos().letsgo(i)</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><p>运行后：</p><p>以上脚本通过Nacos的OpenApi循环式通过从每个节点访问后发起以及通过Nginx代理发起服务实例的查询、注册、删除操作。<br><img src="/2022/06/22/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/5.png"></p><ol><li>登录获取AccessToke(每个请求需要携带)</li><li>在 获取stage环境的服务列表数据，这是为了监测返回数据是否正常，因为这里刚搭建起来，如果里面服务数据不正常则会出现上面提示，并发送消息到钉钉；</li></ol><p> <img src="/2022/06/22/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/6.png">  </p><p>上图是通过代理访问获取stage中的服务为0，后发送通知，说明此时可能(因为通过负载并不知道该请求是落在了哪一个Nacos节点)集群中某个节点出现故障数据不正常了，但是在检测脚本中会通过每个节点去注册，那么一定会在出现通知某个节点故障。<br>4. 在public环境中通过调用OpenApi方式创建、注册一个实例 test_service_instance 跟服务，然后注销实例，并删除服务，这是为了监测集群是否正常。</p><h1 id="三、小记"><a href="#三、小记" class="headerlink" title="三、小记"></a>三、小记</h1><ol><li>虽然文档给出的描述是只有当服务下实例数为0时允许删除，但是实际上并没有强制检查校验服务下的实例数是否为0。Nacos的服务创建有多种方式，可以主动创建可以在注册实例的时候创建，可以在实例发送心跳时创建，所以哪怕主动删除了还会自动创建回来。；</li><li>所有已注册服务在容器重启后会丢失，但是只要保证集群中有一个节点正常，那么重启后的服务数据会同步其他正常节点的，即需要客户端重新注册；</li><li>正常情况在某个节点注册了服务后会同步到其他节点。</li><li>各节点无法选举一个leader时 查看日志：/data/nacos2.0.2_1/logs/alipay-jraft.log</li><li>实例服务相关日志:  /data/nacos2.0.2_1/naming-raft.log</li><li>通过日志发现，暴露8848端口是为了nacos客户端登陆获取Token，后续操作都会携带Token进行资源操作；然后暴露9848端口是客户端用于gRPC的请求，所以如果是设置了代理转发，务必将其暴露，否则连接失败失败。</li></ol><h1 id="四、吐槽"><a href="#四、吐槽" class="headerlink" title="四、吐槽"></a>四、吐槽</h1><p>Nacos 官方为了推商业版，社区版几乎毛病百出，不管不顾，文档也是写得一团糟~ 无力吐槽</p><p> <img src="/2022/06/22/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/7.jpg">  </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、搭建架构&quot;&gt;&lt;a href=&quot;#一、搭建架构&quot; class=&quot;headerlink&quot; title=&quot;一、搭建架构&quot;&gt;&lt;/a&gt;一、搭建架构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/06/22/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/arch-1.png&quot;&gt;&lt;br&gt;● 3个或3个以上Nacos节点才能构成集群；&lt;br&gt;● Nacos Nginx Proxy用于代理转发；&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;二、准备工作&quot;&gt;&lt;a href=&quot;#二、准备工作&quot; class=&quot;headerlink&quot; title=&quot;二、准备工作&quot;&gt;&lt;/a&gt;二、准备工作&lt;/h1&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Nacos2.0版本相比1.X新增了gRPC的通信方式，因此需要增加2个端口。新增端口是在配置的主端口(server.port)基础上，进行一定偏移量自动生成。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;端口&lt;/th&gt;
&lt;th&gt;与主端口的偏移量&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;8848&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Nacos程序主配置端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9848&lt;/td&gt;
&lt;td&gt;+1000&lt;/td&gt;
&lt;td&gt;客户端gRPC请求服务端端口，用于客户端向服务端发起连接和请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9849&lt;/td&gt;
&lt;td&gt;+1001&lt;/td&gt;
&lt;td&gt;服务端gRPC请求服务端端口，用于服务间同步等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7848&lt;/td&gt;
&lt;td&gt;-1000&lt;/td&gt;
&lt;td&gt;Nacos 集群通信端口，用于Nacos 集群间进行选举，检测等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;使用VIP/nginx请求时，需要配置成TCP转发，不能配置http2转发，否则连接会被nginx断开&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;&lt;img src=&quot;/2022/06/22/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2Nacos%E9%9B%86%E7%BE%A4/arch-2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;按照上述官方的端口分配要求 ，此处部署的使用三台服务器上面创建的Nacos集群端口分配如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;节点&lt;/th&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;th&gt;端口（所需暴露）&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;当前线下环境部署文件路径&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Nacos_1&lt;/td&gt;
&lt;td&gt;192168.18.73&lt;/td&gt;
&lt;td&gt;宿主机：8858，9858，9859，7858  容器：8858，9858，9859，7858&lt;/td&gt;
&lt;td&gt;Nacos 节点一&lt;/td&gt;
&lt;td&gt;nacos/nacos-server:2.0.2&lt;/td&gt;
&lt;td&gt;/root/nacos-deploy/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nacos_2&lt;/td&gt;
&lt;td&gt;192168.18.74&lt;/td&gt;
&lt;td&gt;宿主机：8858，9858，9859，7858  容器：8858，9858，9859，7858&lt;/td&gt;
&lt;td&gt;Nacos 节点二&lt;/td&gt;
&lt;td&gt;nacos/nacos-server:2.0.2&lt;/td&gt;
&lt;td&gt;/root/nacos-deploy/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nacos_3&lt;/td&gt;
&lt;td&gt;192168.18.75&lt;/td&gt;
&lt;td&gt;宿主机：8858，9858，9859，7858  容器：8858，9858，9859，7858&lt;/td&gt;
&lt;td&gt;Nacos 节点三&lt;/td&gt;
&lt;td&gt;nacos/nacos-server:2.0.2&lt;/td&gt;
&lt;td&gt;/root/nacos-deploy/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nacos DB&lt;/td&gt;
&lt;td&gt;192168.18.75&lt;/td&gt;
&lt;td&gt;宿主机：3306 容器：3306&lt;/td&gt;
&lt;td&gt;Nacos所需数据库&lt;/td&gt;
&lt;td&gt;mysql:5.7.34&lt;/td&gt;
&lt;td&gt;/root/nacos-mysql-deploy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nacos  Nginx Proxy&lt;/td&gt;
&lt;td&gt;192168.18.75&lt;/td&gt;
&lt;td&gt;宿主机：80  容器：80&lt;/td&gt;
&lt;td&gt;Nacos代理&lt;/td&gt;
&lt;td&gt;nginx:stable-alpine&lt;/td&gt;
&lt;td&gt;/root/nacos-proxy-deploy&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;2-1-创建Nacos数据库&quot;&gt;&lt;a href=&quot;#2-1-创建Nacos数据库&quot; class=&quot;headerlink&quot; title=&quot;2.1  创建Nacos数据库&quot;&gt;&lt;/a&gt;2.1  创建Nacos数据库&lt;/h2&gt;</summary>
    
    
    
    <category term="基础组件" scheme="https://blog.sctux.cc/categories/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/"/>
    
    <category term="部署" scheme="https://blog.sctux.cc/categories/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="nacos" scheme="https://blog.sctux.cc/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>运维工作中自动化巡检的必要性以及重要性</title>
    <link href="https://blog.sctux.cc/2022/05/12/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A1%E6%A3%80%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7%E4%BB%A5%E5%8F%8A%E9%87%8D%E8%A6%81%E6%80%A7/"/>
    <id>https://blog.sctux.cc/2022/05/12/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A1%E6%A3%80%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7%E4%BB%A5%E5%8F%8A%E9%87%8D%E8%A6%81%E6%80%A7/</id>
    <published>2022-05-12T02:42:13.000Z</published>
    <updated>2025-09-01T01:59:08.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、为什么要进行巡检"><a href="#一、为什么要进行巡检" class="headerlink" title="一、为什么要进行巡检"></a>一、为什么要进行巡检</h1><ol><li>当前平台架构复杂，中间件繁多，组件之间耦合度高，微服务还未达到故障自愈水平，所以需要通过告警或巡检等手段发现问题来保障平台持续稳定运行。</li><li>当前有客户对平台及上层应用使用频率低，例如三四天登录查看一次数据，但是设备是正常运转的，一旦平台出现问题，刚好客户发现问题，运维 才去解决就为时已晚。</li><li>定期巡检方案是模拟人工登录各业务页面，而非接口调用，更能真实地发现问题，并通过截图真实保留平台运行状态。</li><li>Prometheus平台的监控报警功能还未覆盖到整个业务系统，部分问题还未能实时监控到，导致平台出现异常后而无法感知。</li><li>当前并不能保证客户环境的Prometheus平台本身不存在问题，针对这种不确定性，定期巡检是一个保障平台稳定性的方案，实现平台双保障。</li><li>部分客户环境不能够连接外网，Prometheus的监控告警信息无法同步到微信、飞书等，但可以通过定期巡检方案来保障平台稳定运行。</li></ol><p>由于以上原因，为了保证SLA，必须进行定期巡检。</p><h1 id="二、巡检检查项"><a href="#二、巡检检查项" class="headerlink" title="二、巡检检查项"></a>二、巡检检查项</h1><h2 id="2-1-服务器基础信息"><a href="#2-1-服务器基础信息" class="headerlink" title="2.1  服务器基础信息"></a>2.1  服务器基础信息</h2><pre><code>cpu 利用率磁盘利用率内存利用率服务器时间同步日常数据备份文件检查</code></pre><h2 id="2-2-k8s集群状态"><a href="#2-2-k8s集群状态" class="headerlink" title="2.2  k8s集群状态"></a>2.2  k8s集群状态</h2><pre><code>证书过期检查API通信是否正常各名称空间下的pod运行状态ceph共享存储是否正常</code></pre><h2 id="2-3-业务状态"><a href="#2-3-业务状态" class="headerlink" title="2.3  业务状态"></a>2.3  业务状态</h2><pre><code>业务平台登录是否正常kafka是否积压kafka消费速率</code></pre><h1 id="三、实现方式"><a href="#三、实现方式" class="headerlink" title="三、实现方式"></a>三、实现方式</h1><p><strong>前期</strong>：前期巡检同事登录各客户环境进行人工手动巡检(登录VPN、连接跳板机、登录业务平台、登录grafana平台等等)一些列操作下来，一轮巡检工作大约在2-3hours。</p><p><strong>目前</strong>：通过自动化的方式(shell+python+web框架flask)实现了，人工在windows跳板机上、Linux服务器中的模拟人工操作连接VPN、登录业务平台、登录grafana平台等一系列操作，定期定时将巡检任务结果发送至企业微信群内；从单人单次巡检的2-3小时，直接提效到了5-10min，极大程度上提高了日常巡检的工作效率。<br><img src="/2022/05/12/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A1%E6%A3%80%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7%E4%BB%A5%E5%8F%8A%E9%87%8D%E8%A6%81%E6%80%A7/1.png"><br><img src="/2022/05/12/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A1%E6%A3%80%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7%E4%BB%A5%E5%8F%8A%E9%87%8D%E8%A6%81%E6%80%A7/2.png"></p><p><img src="/2022/05/12/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A1%E6%A3%80%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7%E4%BB%A5%E5%8F%8A%E9%87%8D%E8%A6%81%E6%80%A7/3.png"></p><p>那么，在客户环境数量达到一定体量时，群消息接收也会造成巡检遗漏的情况，在这种情况下需要一个集中化的平台作为展示，于是将巡检结果发送到群内的同时也会将消息格式化(注：图片是通过Python截图生成后将其转换为base64编码，然后将其他巡检结果内容格式化为json后post到web后端，再在web前端进行展示)</p><p><img src="/2022/05/12/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A1%E6%A3%80%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7%E4%BB%A5%E5%8F%8A%E9%87%8D%E8%A6%81%E6%80%A7/4.png"></p><p>Detail: 通过点击后弹出整个巡检过程以及结果信息；</p><p>Screenshoot: 通过点击后将会弹出base64编码转换为图片的业务平台及grafana截图</p><p>最后，巡检人员只需要定期浏览此汇总展示平台即可！</p><p>(人工操作是基础，自动化操作才是王道😀 )</p><h3 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h3><ul><li>Python自动化</li><li>Selenium爬虫技术(网页内容获取)</li><li>Windows端UI自动化(用于自动启动VPN程序，并填写账号密码后进行登录操作)</li><li>Flask前后端开发(平台展示，内容接收入库)</li><li>企业微信机器人Webhook集成</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、为什么要进行巡检&quot;&gt;&lt;a href=&quot;#一、为什么要进行巡检&quot; class=&quot;headerlink&quot; title=&quot;一、为什么要进行巡检&quot;&gt;&lt;/a&gt;一、为什么要进行巡检&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;当前平台架构复杂，中间件繁多，组件之间耦合度高，微服务还未达到故障自愈水平，所以需要通过告警或巡检等手段发现问题来保障平台持续稳定运行。&lt;/li&gt;
&lt;li&gt;当前有客户对平台及上层应用使用频率低，例如三四天登录查看一次数据，但是设备是正常运转的，一旦平台出现问题，刚好客户发现问题，运维 才去解决就为时已晚。&lt;/li&gt;
&lt;li&gt;定期巡检方案是模拟人工登录各业务页面，而非接口调用，更能真实地发现问题，并通过截图真实保留平台运行状态。&lt;/li&gt;
&lt;li&gt;Prometheus平台的监控报警功能还未覆盖到整个业务系统，部分问题还未能实时监控到，导致平台出现异常后而无法感知。&lt;/li&gt;
&lt;li&gt;当前并不能保证客户环境的Prometheus平台本身不存在问题，针对这种不确定性，定期巡检是一个保障平台稳定性的方案，实现平台双保障。&lt;/li&gt;
&lt;li&gt;部分客户环境不能够连接外网，Prometheus的监控告警信息无法同步到微信、飞书等，但可以通过定期巡检方案来保障平台稳定运行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于以上原因，为了保证SLA，必须进行定期巡检。&lt;/p&gt;
&lt;h1 id=&quot;二、巡检检查项&quot;&gt;&lt;a href=&quot;#二、巡检检查项&quot; class=&quot;headerlink&quot; title=&quot;二、巡检检查项&quot;&gt;&lt;/a&gt;二、巡检检查项&lt;/h1&gt;&lt;h2 id=&quot;2-1-服务器基础信息&quot;&gt;&lt;a href=&quot;#2-1-服务器基础信息&quot; class=&quot;headerlink&quot; title=&quot;2.1  服务器基础信息&quot;&gt;&lt;/a&gt;2.1  服务器基础信息&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;	cpu 利用率
	磁盘利用率
	内存利用率
	服务器时间同步
	日常数据备份文件检查
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;2-2-k8s集群状态&quot;&gt;&lt;a href=&quot;#2-2-k8s集群状态&quot; class=&quot;headerlink&quot; title=&quot;2.2  k8s集群状态&quot;&gt;&lt;/a&gt;2.2  k8s集群状态&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;	证书过期检查
	API通信是否正常
	各名称空间下的pod运行状态
	ceph共享存储是否正常
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;2-3-业务状态&quot;&gt;&lt;a href=&quot;#2-3-业务状态&quot; class=&quot;headerlink&quot; title=&quot;2.3  业务状态&quot;&gt;&lt;/a&gt;2.3  业务状态&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;	业务平台登录是否正常
	kafka是否积压
	kafka消费速率
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="自动化运维" scheme="https://blog.sctux.cc/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="自动化运维" scheme="https://blog.sctux.cc/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
    <category term="Python" scheme="https://blog.sctux.cc/tags/Python/"/>
    
    <category term="Flask" scheme="https://blog.sctux.cc/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>如何让添加定时作业任务变得更加优雅</title>
    <link href="https://blog.sctux.cc/2019/03/19/Flask%E7%BB%93%E5%90%88APScheduler%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%B9%B3%E5%8F%B0/"/>
    <id>https://blog.sctux.cc/2019/03/19/Flask%E7%BB%93%E5%90%88APScheduler%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%B9%B3%E5%8F%B0/</id>
    <published>2019-03-19T06:32:01.000Z</published>
    <updated>2025-09-01T01:59:08.973Z</updated>
    
    <content type="html"><![CDATA[<p> <img src="/2019/03/19/Flask%E7%BB%93%E5%90%88APScheduler%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%B9%B3%E5%8F%B0/info.png"></p><h1 id="序-APSCheduler-简介"><a href="#序-APSCheduler-简介" class="headerlink" title="序 APSCheduler 简介"></a>序 APSCheduler 简介</h1><p>在平常的工作中有些工作都需要定时任务来推动，例如项目中有一个定时刷新排行榜的程序脚本、定时爬出网站的URL程序、定时检测钓鱼网站的程序等等，都涉及到了关于定时任务的问题；虽然这些定时任务在服务器上面都能通过crontab来做；其次想到的是利用time模块的time.sleep()方法使程序休眠来达到定时任务的目的，虽然前两者也可以，但是总觉得不是那么的专业，😁所以就找到了python的定时任务模块APScheduler;</p><p><strong>APScheduler基于Quartz的一个Python定时任务框架，实现了Quartz的所有功能，使用起来十分方便。提供了基于日期、固定时间间隔以及crontab类型的任务，并且可以持久化任务。基于这些功能，我们可以很方便的实现一个python定时任务系统。</strong></p><p>同时APScheduler还提供了Flask的扩展<code>Flask-Apscheduler</code>, 那正好就可以拿来做一个集成定时任务平台;</p><p><img src="/2019/03/19/Flask%E7%BB%93%E5%90%88APScheduler%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%B9%B3%E5%8F%B0/liuchengtu.png" alt="APScheduler工作原理"></p><h1 id="APScheduler有四个组成部分"><a href="#APScheduler有四个组成部分" class="headerlink" title="APScheduler有四个组成部分"></a>APScheduler有四个组成部分</h1><ol><li><p><code>触发器(trigger)</code>包含调度逻辑，每一个作业有它自己的触发器，用于决定接下来哪一个作业会运行。除了他们自己初始配置意外，触发器完全是无状态的。</p> <figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">cron: 类linux下的crontab格式,属于定时调度</span><br><span class="line">interval:每隔多久调度一次</span><br><span class="line"><span class="built_in">date</span>:一次性调度</span><br><span class="line"></span><br><span class="line"><span class="comment">#1. cron风格</span></span><br><span class="line">(int|str) 表示参数既可以是int类型，也可以是str类型</span><br><span class="line">(datetime | str) 表示参数既可以是datetime类型，也可以是str类型</span><br><span class="line">year (int|str) – <span class="number">4</span>-digit year -（表示四位数的年份，如<span class="number">2008</span>年）</span><br><span class="line">month (int|str) – month (<span class="number">1</span><span class="number">-12</span>) -（表示取值范围为<span class="number">1</span><span class="number">-12</span>月）</span><br><span class="line">day (int|str) – day <span class="keyword">of</span> <span class="keyword">the</span> (<span class="number">1</span><span class="number">-31</span>) -（表示取值范围为<span class="number">1</span><span class="number">-31</span>日）</span><br><span class="line">week (int|str) – ISO week (<span class="number">1</span><span class="number">-53</span>) -（格里历<span class="number">2006</span>年<span class="number">12</span>月<span class="number">31</span>日可以写成<span class="number">2006</span>年-W52<span class="number">-7</span>（扩展形式）或<span class="number">2006</span>W527（紧凑形式））</span><br><span class="line">day_of_week (int|str) – <span class="built_in">number</span> <span class="keyword">or</span> name <span class="keyword">of</span> weekday (<span class="number">0</span><span class="number">-6</span> <span class="keyword">or</span> mon,tue,wed,thu,fri,sat,sun) - （表示一周中的第几天，既可以用<span class="number">0</span><span class="number">-6</span>表示也可以用其英语缩写表示）</span><br><span class="line">hour (int|str) – hour (<span class="number">0</span><span class="number">-23</span>) - （表示取值范围为<span class="number">0</span><span class="number">-23</span>时）</span><br><span class="line">minute (int|str) – minute (<span class="number">0</span><span class="number">-59</span>) - （表示取值范围为<span class="number">0</span><span class="number">-59</span>分）</span><br><span class="line"><span class="keyword">second</span> (int|str) – <span class="keyword">second</span> (<span class="number">0</span><span class="number">-59</span>) - （表示取值范围为<span class="number">0</span><span class="number">-59</span>秒）</span><br><span class="line">start_date (datetime|str) – earliest possible <span class="built_in">date</span>/<span class="built_in">time</span> <span class="built_in">to</span> trigger <span class="keyword">on</span> (<span class="title">inclusive</span>) - （表示开始时间）</span><br><span class="line">end_date (datetime|str) – latest possible <span class="built_in">date</span>/<span class="built_in">time</span> <span class="built_in">to</span> trigger <span class="keyword">on</span> (<span class="title">inclusive</span>) - （表示结束时间）</span><br><span class="line">timezone (datetime.tzinfo|str) – <span class="built_in">time</span> zone <span class="built_in">to</span> use <span class="keyword">for</span> <span class="keyword">the</span> <span class="built_in">date</span>/<span class="built_in">time</span> calculations (defaults <span class="built_in">to</span> scheduler timezone) -（表示时区取值）</span><br><span class="line"><span class="comment">#如:在6,7,8,11,12月份的第三个星期五的00:00,01:00,02:00,03:00 执行该程序</span></span><br><span class="line">sched.add_job(my_job, <span class="string">'cron'</span>, month=<span class="string">'6-8,11-12'</span>, day=<span class="string">'3rd fri'</span>, hour=<span class="string">'0-3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.interval风格</span></span><br><span class="line">weeks (int) – <span class="built_in">number</span> <span class="keyword">of</span> weeks <span class="built_in">to</span> <span class="built_in">wait</span></span><br><span class="line">days (int) – <span class="built_in">number</span> <span class="keyword">of</span> days <span class="built_in">to</span> <span class="built_in">wait</span></span><br><span class="line">hours (int) – <span class="built_in">number</span> <span class="keyword">of</span> hours <span class="built_in">to</span> <span class="built_in">wait</span></span><br><span class="line">minutes (int) – <span class="built_in">number</span> <span class="keyword">of</span> minutes <span class="built_in">to</span> <span class="built_in">wait</span></span><br><span class="line"><span class="built_in">seconds</span> (int) – <span class="built_in">number</span> <span class="keyword">of</span> <span class="built_in">seconds</span> <span class="built_in">to</span> <span class="built_in">wait</span></span><br><span class="line">start_date (datetime|str) – starting point <span class="keyword">for</span> <span class="keyword">the</span> interval calculation</span><br><span class="line">end_date (datetime|str) – latest possible <span class="built_in">date</span>/<span class="built_in">time</span> <span class="built_in">to</span> trigger <span class="keyword">on</span></span><br><span class="line">timezone (datetime.tzinfo|str) – <span class="built_in">time</span> zone <span class="built_in">to</span> use <span class="keyword">for</span> <span class="keyword">the</span> <span class="built_in">date</span>/<span class="built_in">time</span> calculations</span><br><span class="line"><span class="comment">#如:每隔2分钟执行一次</span></span><br><span class="line">scheduler.add_job(myfunc, <span class="string">'interval'</span>, minutes=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.date风格</span></span><br><span class="line">run_date (datetime|str) – <span class="keyword">the</span> <span class="built_in">date</span>/<span class="built_in">time</span> <span class="built_in">to</span> run <span class="keyword">the</span> job <span class="keyword">at</span>  -（任务开始的时间）</span><br><span class="line">timezone (datetime.tzinfo|str) – <span class="built_in">time</span> zone <span class="keyword">for</span> run_date <span class="keyword">if</span> <span class="keyword">it</span> doesn’t have <span class="literal">one</span> already</span><br><span class="line"><span class="comment">#如:在2009年11月6号16时30分5秒时执行</span></span><br><span class="line">sched.add_job(my_job, <span class="string">'date'</span>, run_date=datetime(<span class="number">2009</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">16</span>, <span class="number">30</span>, <span class="number">5</span>), args=[<span class="string">'text'</span>])</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>作业存储(job store)</code>存储被调度的作业，默认的作业存储是简单地把作业保存在内存中，其他的作业存储是将作业保存在数据库中。一个作业的数据讲在保存在持久化作业存储时被序列化，并在加载时被反序列化。调度器不能分享同一个作业存储。</p><p> jobstore则是指的是job持久化,默认job运行在内存中,可持久化在数据库,指定为mongo的MongoDBJobStore或者是使用sqlite的SQLAlchemyJobStore,同时可指定多种jobstore</p></li><li><p><code>执行器(executor)</code>处理作业的运行，他们通常通过在作业中提交制定的可调用对象到一个线程或者进城池来进行。当作业完成时，执行器将会通知调度器。</p><p> 说白了就是指定任务是以线程池/进程池里运行,这在初始化时可以指定,同时可以指定最大的工作池,默认的为default: ThreadPoolExecutor,max-worker为20,当然也可以指定为processpool,默认max-worker为5</p></li><li><p><code>调度器(scheduler)</code>是其他的组成部分。你通常在应用只有一个调度器，应用的开发者通常不会直接处理作业存储、调度器和触发器，相反，调度器提供了处理这些的合适的接口。配置作业存储和执行器可以在调度器中完成，例如添加、修改和移除作业。<br>调度器分为以下几种,可根据不同的使用场景选用不同的调度器:</p> <figure class="highlight avrasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">BlockingScheduler:</span> 很明显这是种阻塞型,一般用在没有其它进程运行的场景下</span><br><span class="line"><span class="symbol">BackGroundScheduler:</span> 后台式,也就是单起一个进程/线程运行该任务,不影响主程序</span><br><span class="line"><span class="symbol">ASyncIOScheduler:</span></span><br><span class="line"><span class="symbol">GeventScheduler:</span></span><br><span class="line"><span class="symbol">TornadoScheduler:</span></span><br><span class="line"><span class="symbol">TwistedScheduler:</span></span><br><span class="line"><span class="symbol">QtScheduler:</span></span><br></pre></td></tr></tbody></table></figure><p> 本人只使用过BlockingScheduler跟BackGroundScheduler,flask-scheduler使用的即为BackGroundScheduler,其它的后续再研究研究<br> 选择类型也很简单,初始化时直接实例化:</p> <figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from apscheduler.<span class="keyword">schedulers.background </span>import <span class="keyword">BackgroundScheduler</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">scheduler </span>= <span class="keyword">BackgroundScheduler()</span></span><br><span class="line"><span class="keyword"></span><span class="comment">#启动</span></span><br><span class="line"><span class="keyword">scheduler.start()</span></span><br></pre></td></tr></tbody></table></figure></li></ol><p>以上就是apscheduler主要组成的四个方面。那么既然有提供flask-apscheduler这个扩展，那一定是把apscheduler封装过后为我们提供更加方便的集成开发，这里我的存储选择了MySQL作为作业任务存储，因为我这里的平台的用户是用它来存储的；为了方便统一使用了MySQL;</p><hr><p>以下是这个项目的结构:</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="symbol">/data/study/github_repo/JobCenter</span> $ tree <span class="operator">-</span>L <span class="number">2</span></span><br><span class="line">.</span><br><span class="line">├── LICENSE</span><br><span class="line">├── Pipfile</span><br><span class="line">├── Pipfile.lock</span><br><span class="line">├── README.md</span><br><span class="line">├── app</span><br><span class="line">│&nbsp;&nbsp; ├── __init__.py</span><br><span class="line">│&nbsp;&nbsp; ├── auth<span class="symbol">/</span>  <span class="comment"># 平台登录相关</span></span><br><span class="line">│&nbsp;&nbsp; ├── commands.py</span><br><span class="line">│&nbsp;&nbsp; ├── config.py  <span class="comment"># 平台配置相关</span></span><br><span class="line">│&nbsp;&nbsp; ├── decorators.py</span><br><span class="line">│&nbsp;&nbsp; ├── email.py  <span class="comment"># 邮件发送</span></span><br><span class="line">│&nbsp;&nbsp; ├── extensions.py</span><br><span class="line">│&nbsp;&nbsp; ├── job<span class="symbol">/</span>  <span class="comment"># 定时任务主要模块</span></span><br><span class="line">│&nbsp;&nbsp; ├── main<span class="symbol">/</span>  <span class="comment"># 主要用于路由</span></span><br><span class="line">│&nbsp;&nbsp; ├── models.py  <span class="comment"># 数据模型</span></span><br><span class="line">│&nbsp;&nbsp; ├── static</span><br><span class="line">│&nbsp;&nbsp; ├── templates</span><br><span class="line">└── test.py       </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>目前主要实现的功能有:</p><ul><li>可视化界面操作</li><li>定时任务统一管理</li><li>完全兼容Crontab</li><li>支持秒级定时任务</li><li>作业任务可搜索、暂停、编辑、删除</li><li>作业任务持久化存储、三种不同触发器类型作业动态添加</li></ul><hr><p><img src="/2019/03/19/Flask%E7%BB%93%E5%90%88APScheduler%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%B9%B3%E5%8F%B0/login.png" alt="清爽的登录界面"></p><p><img src="/2019/03/19/Flask%E7%BB%93%E5%90%88APScheduler%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%B9%B3%E5%8F%B0/pausejob.png" alt="任务列表中暂停、恢复已添加任务"></p><p><img src="/2019/03/19/Flask%E7%BB%93%E5%90%88APScheduler%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%B9%B3%E5%8F%B0/addjob.png" alt="针对不同触发器动态增加任务"></p><p><img src="/2019/03/19/Flask%E7%BB%93%E5%90%88APScheduler%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%B9%B3%E5%8F%B0/stdout.png" alt="任务执行输出日志持久化存放并展示"></p><p>欢迎star 欢迎提建议~<br>项目地址: <a href="https://github.com/guomaoqiu/JobCenter">https://github.com/guomaoqiu/JobCenter</a><br>Demo地址: <a href="https://jobcenter.sctux.cc/">https://jobcenter.sctux.cc</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt; &lt;img src=&quot;/2019/03/19/Flask%E7%BB%93%E5%90%88APScheduler%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%B9%B3%E5%8F%B0/info.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;序-APSCheduler-简介&quot;&gt;&lt;a href=&quot;#序-APSCheduler-简介&quot; class=&quot;headerlink&quot; title=&quot;序 APSCheduler 简介&quot;&gt;&lt;/a&gt;序 APSCheduler 简介&lt;/h1&gt;&lt;p&gt;在平常的工作中有些工作都需要定时任务来推动，例如项目中有一个定时刷新排行榜的程序脚本、定时爬出网站的URL程序、定时检测钓鱼网站的程序等等，都涉及到了关于定时任务的问题；虽然这些定时任务在服务器上面都能通过crontab来做；其次想到的是利用time模块的time.sleep()方法使程序休眠来达到定时任务的目的，虽然前两者也可以，但是总觉得不是那么的专业，😁所以就找到了python的定时任务模块APScheduler;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;APScheduler基于Quartz的一个Python定时任务框架，实现了Quartz的所有功能，使用起来十分方便。提供了基于日期、固定时间间隔以及crontab类型的任务，并且可以持久化任务。基于这些功能，我们可以很方便的实现一个python定时任务系统。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同时APScheduler还提供了Flask的扩展&lt;code&gt;Flask-Apscheduler&lt;/code&gt;, 那正好就可以拿来做一个集成定时任务平台;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/19/Flask%E7%BB%93%E5%90%88APScheduler%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6%E5%B9%B3%E5%8F%B0/liuchengtu.png&quot; alt=&quot;APScheduler工作原理&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;APScheduler有四个组成部分&quot;&gt;&lt;a href=&quot;#APScheduler有四个组成部分&quot; class=&quot;headerlink&quot; title=&quot;APScheduler有四个组成部分&quot;&gt;&lt;/a&gt;APScheduler有四个组成部分&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;触发器(trigger)&lt;/code&gt;包含调度逻辑，每一个作业有它自己的触发器，用于决定接下来哪一个作业会运行。除了他们自己初始配置意外，触发器完全是无状态的。&lt;/p&gt;
 &lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cron: 类linux下的crontab格式,属于定时调度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;interval:每隔多久调度一次&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;:一次性调度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#1. cron风格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(int|str) 表示参数既可以是int类型，也可以是str类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(datetime | str) 表示参数既可以是datetime类型，也可以是str类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;year (int|str) – &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;-digit year -（表示四位数的年份，如&lt;span class=&quot;number&quot;&gt;2008&lt;/span&gt;年）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;month (int|str) – month (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-12&lt;/span&gt;) -（表示取值范围为&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-12&lt;/span&gt;月）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;day (int|str) – day &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-31&lt;/span&gt;) -（表示取值范围为&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-31&lt;/span&gt;日）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;week (int|str) – ISO week (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-53&lt;/span&gt;) -（格里历&lt;span class=&quot;number&quot;&gt;2006&lt;/span&gt;年&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;月&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;日可以写成&lt;span class=&quot;number&quot;&gt;2006&lt;/span&gt;年-W52&lt;span class=&quot;number&quot;&gt;-7&lt;/span&gt;（扩展形式）或&lt;span class=&quot;number&quot;&gt;2006&lt;/span&gt;W527（紧凑形式））&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;day_of_week (int|str) – &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; name &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; weekday (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-6&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; mon,tue,wed,thu,fri,sat,sun) - （表示一周中的第几天，既可以用&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-6&lt;/span&gt;表示也可以用其英语缩写表示）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hour (int|str) – hour (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-23&lt;/span&gt;) - （表示取值范围为&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-23&lt;/span&gt;时）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minute (int|str) – minute (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-59&lt;/span&gt;) - （表示取值范围为&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-59&lt;/span&gt;分）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;second&lt;/span&gt; (int|str) – &lt;span class=&quot;keyword&quot;&gt;second&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-59&lt;/span&gt;) - （表示取值范围为&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-59&lt;/span&gt;秒）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start_date (datetime|str) – earliest possible &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; trigger &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;inclusive&lt;/span&gt;) - （表示开始时间）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end_date (datetime|str) – latest possible &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; trigger &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;inclusive&lt;/span&gt;) - （表示结束时间）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timezone (datetime.tzinfo|str) – &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; zone &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; use &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; calculations (defaults &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; scheduler timezone) -（表示时区取值）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#如:在6,7,8,11,12月份的第三个星期五的00:00,01:00,02:00,03:00 执行该程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sched.add_job(my_job, &lt;span class=&quot;string&quot;&gt;&#39;cron&#39;&lt;/span&gt;, month=&lt;span class=&quot;string&quot;&gt;&#39;6-8,11-12&#39;&lt;/span&gt;, day=&lt;span class=&quot;string&quot;&gt;&#39;3rd fri&#39;&lt;/span&gt;, hour=&lt;span class=&quot;string&quot;&gt;&#39;0-3&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#2.interval风格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;weeks (int) – &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; weeks &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;wait&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;days (int) – &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; days &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;wait&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hours (int) – &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; hours &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;wait&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;minutes (int) – &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; minutes &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;wait&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;seconds&lt;/span&gt; (int) – &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;wait&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start_date (datetime|str) – starting point &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; interval calculation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end_date (datetime|str) – latest possible &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; trigger &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timezone (datetime.tzinfo|str) – &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; zone &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; use &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; calculations&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#如:每隔2分钟执行一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scheduler.add_job(myfunc, &lt;span class=&quot;string&quot;&gt;&#39;interval&#39;&lt;/span&gt;, minutes=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#3.date风格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;run_date (datetime|str) – &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;date&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt; run &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; job &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt;  -（任务开始的时间）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timezone (datetime.tzinfo|str) – &lt;span class=&quot;built_in&quot;&gt;time&lt;/span&gt; zone &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; run_date &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;it&lt;/span&gt; doesn’t have &lt;span class=&quot;literal&quot;&gt;one&lt;/span&gt; already&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#如:在2009年11月6号16时30分5秒时执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sched.add_job(my_job, &lt;span class=&quot;string&quot;&gt;&#39;date&#39;&lt;/span&gt;, run_date=datetime(&lt;span class=&quot;number&quot;&gt;2009&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;), args=[&lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;作业存储(job store)&lt;/code&gt;存储被调度的作业，默认的作业存储是简单地把作业保存在内存中，其他的作业存储是将作业保存在数据库中。一个作业的数据讲在保存在持久化作业存储时被序列化，并在加载时被反序列化。调度器不能分享同一个作业存储。&lt;/p&gt;
&lt;p&gt; jobstore则是指的是job持久化,默认job运行在内存中,可持久化在数据库,指定为mongo的MongoDBJobStore或者是使用sqlite的SQLAlchemyJobStore,同时可指定多种jobstore&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;执行器(executor)&lt;/code&gt;处理作业的运行，他们通常通过在作业中提交制定的可调用对象到一个线程或者进城池来进行。当作业完成时，执行器将会通知调度器。&lt;/p&gt;
&lt;p&gt; 说白了就是指定任务是以线程池/进程池里运行,这在初始化时可以指定,同时可以指定最大的工作池,默认的为default: ThreadPoolExecutor,max-worker为20,当然也可以指定为processpool,默认max-worker为5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;调度器(scheduler)&lt;/code&gt;是其他的组成部分。你通常在应用只有一个调度器，应用的开发者通常不会直接处理作业存储、调度器和触发器，相反，调度器提供了处理这些的合适的接口。配置作业存储和执行器可以在调度器中完成，例如添加、修改和移除作业。&lt;br&gt;调度器分为以下几种,可根据不同的使用场景选用不同的调度器:&lt;/p&gt;
 &lt;figure class=&quot;highlight avrasm&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;BlockingScheduler:&lt;/span&gt; 很明显这是种阻塞型,一般用在没有其它进程运行的场景下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;BackGroundScheduler:&lt;/span&gt; 后台式,也就是单起一个进程/线程运行该任务,不影响主程序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;ASyncIOScheduler:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;GeventScheduler:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;TornadoScheduler:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;TwistedScheduler:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;QtScheduler:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 本人只使用过BlockingScheduler跟BackGroundScheduler,flask-scheduler使用的即为BackGroundScheduler,其它的后续再研究研究&lt;br&gt; 选择类型也很简单,初始化时直接实例化:&lt;/p&gt;
 &lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from apscheduler.&lt;span class=&quot;keyword&quot;&gt;schedulers.background &lt;/span&gt;import &lt;span class=&quot;keyword&quot;&gt;BackgroundScheduler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;scheduler &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;BackgroundScheduler()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;#启动&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;scheduler.start()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上就是apscheduler主要组成的四个方面。那么既然有提供flask-apscheduler这个扩展，那一定是把apscheduler封装过后为我们提供更加方便的集成开发，这里我的存储选择了MySQL作为作业任务存储，因为我这里的平台的用户是用它来存储的；为了方便统一使用了MySQL;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="定时任务" scheme="https://blog.sctux.cc/categories/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
    
    <category term="Flask APScheduler" scheme="https://blog.sctux.cc/tags/Flask-APScheduler/"/>
    
  </entry>
  
  <entry>
    <title>基于Harbor搭建企业级私有镜像仓库</title>
    <link href="https://blog.sctux.cc/2019/01/07/docker-harbor/"/>
    <id>https://blog.sctux.cc/2019/01/07/docker-harbor/</id>
    <published>2019-01-07T10:23:27.000Z</published>
    <updated>2025-09-01T01:59:08.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于harbor搭建企业docker镜像仓库"><a href="#基于harbor搭建企业docker镜像仓库" class="headerlink" title="基于harbor搭建企业docker镜像仓库"></a>基于harbor搭建企业docker镜像仓库</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>docker中要使用镜像，一般会从本地、docker Hup公共仓库和其它第三方公共仓库中下载镜像，一般出于安全和外网(墙)资源下载速率的原因考虑企业级上不会轻易使用。那么有没有一种办法可以存储自己的镜像又有安全认证的仓库呢? </p><pre><code>     —-&gt; 企业级环境中基于Harbor搭建自己的安全认证仓库。</code></pre><p>Harbor是VMware公司最近开源的企业级Docker Registry项目, 其目标是帮助用户迅速搭建一个企业级的Docker registry服务。</p><h2 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h2><p>harbor需要安装docker和docker-compose才能使用，安装docker步骤省略，</p><h3 id="安装docker-dompose"><a href="#安装docker-dompose" class="headerlink" title="安装docker-dompose"></a>安装docker-dompose</h3><p>docker-dompose安装步骤如下： </p><p>下载最新版的docker-compose文件 </p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https:<span class="regexp">//gi</span>thub.com<span class="regexp">/docker/</span>compose<span class="regexp">/releases/</span>download<span class="regexp">/1.23.2/</span>docker-compose-$(uname -s)-$(uname -m) -o <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br></pre></td></tr></tbody></table></figure><p>添加可执行权限</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span></span><br></pre></td></tr></tbody></table></figure><p>验证版本</p><figure class="highlight applescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose -v</span><br><span class="line">docker-compose <span class="built_in">version</span> <span class="number">1.23</span><span class="number">.2</span>, build <span class="number">1110</span>ad01</span><br></pre></td></tr></tbody></table></figure><h3 id="获取Harbor软件包"><a href="#获取Harbor软件包" class="headerlink" title="获取Harbor软件包"></a>获取Harbor软件包</h3><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https</span>://storage.googleapis.com/harbor-releases/release-<span class="number">1</span>.<span class="number">7</span>.<span class="number">0</span>/harbor-offline-installer-v1.<span class="number">7</span>.<span class="number">1</span>.tgz</span><br></pre></td></tr></tbody></table></figure><p>解压</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tar</span> -xf harbor-offline-installer-v1.<span class="number">7</span>.<span class="number">1</span>.tgz -C /usr/local/</span><br></pre></td></tr></tbody></table></figure><p>编辑配置文件</p><figure class="highlight makefile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/harbor</span><br><span class="line">$ vim harbor.cfg</span><br><span class="line">hostname = reg.for-k8s.com   <span class="comment"># 本机外网IP或域名，该地址供用户通过UI进行访问，不要使用127.0.0.1</span></span><br><span class="line">ui_url_protocol = https             <span class="comment"># 用户访问私仓时使用的协议，默认时http，配置成https</span></span><br><span class="line">db_password = root123           　　 <span class="comment"># 指定mysql数据库管理员密码</span></span><br><span class="line">harbor_admin_password：Harbor12345   <span class="comment"># harbor的管理员账户密码</span></span><br><span class="line">ssl_cert = /data/cert/reg.for-k8s.com.crt 　　<span class="comment"># 设置证书文件路径</span></span><br><span class="line">ssl_cert_key = /data/cert/reg.for-k8s.com.key  <span class="comment"># 设置证书密钥文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他配置选项按需填写即可</span></span><br></pre></td></tr></tbody></table></figure><h3 id="生成ssl证书"><a href="#生成ssl证书" class="headerlink" title="生成ssl证书"></a>生成ssl证书</h3><p>生成根证书</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">cd</span> /dada/cert/</span><br><span class="line"></span><br><span class="line">$ openssl req  -newkey rs<span class="variable">a:4096</span> -nodes -<span class="built_in">sha256</span> -keyout <span class="keyword">ca</span>.key -x509 -days <span class="number">365</span> -out <span class="keyword">ca</span>.crt -subj <span class="string">"/C=CN/L=Shanghai/O=harbor/CN=harbor-registry"</span></span><br></pre></td></tr></tbody></table></figure><p>生成一个证书签名, 设置访问域名为 reg.for-k8s.com</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl req -newkey rsa:<span class="number">4096</span> -nodes -sha256 -keyout reg<span class="selector-class">.for-k8s</span><span class="selector-class">.com</span><span class="selector-class">.key</span> -out server<span class="selector-class">.csr</span> -subj <span class="string">"/C=CN/L=Shanghai/O=harbor/CN=reg.for-k8s.com"</span></span><br></pre></td></tr></tbody></table></figure><p>生成主机证书</p><figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl x509 -req -days 365 -<span class="keyword">in</span> server.csr -<span class="keyword">CA</span> <span class="keyword">ca</span>.crt -CAkey <span class="keyword">ca</span>.key -CAcreateserial -<span class="keyword">out</span> <span class="keyword">reg</span>.<span class="keyword">for</span>-k8s.com.crt</span><br></pre></td></tr></tbody></table></figure><h3 id="通过自带脚本一键安装"><a href="#通过自带脚本一键安装" class="headerlink" title="通过自带脚本一键安装"></a>通过自带脚本一键安装</h3><figure class="highlight lasso"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/<span class="built_in">local</span>/harbor/</span><br><span class="line">./install.sh</span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br><span class="line">✔ ---<span class="params">-Harbor</span> has been installed <span class="literal">and</span> started successfully.----</span><br><span class="line"></span><br><span class="line">Now you should be able <span class="keyword">to</span> visit the admin <span class="keyword">portal</span> at https:<span class="comment">//reg.for-k8s.com.</span></span><br><span class="line">For more details, please visit https:<span class="comment">//github.com/goharbor/harbor .</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>然后绑定hosts访问即可:<br><img src="/2019/01/07/docker-harbor/15468488877244.jpg"></p><p>默认账号密码<code>admin / Harbor12345</code><br><img src="/2019/01/07/docker-harbor/15468489958269.jpg"></p><p>ok 那上面的私有仓库服务已经搭建完毕了，该怎么使用呢？</p><ol start="0"><li><p>首先在harbor上创建一个项目<code>myproject</code>(我这里不使用默认的libary)<br><img src="/2019/01/07/docker-harbor/15468494639235.jpg"><br>这里我选择私有仓库, pull/push都需要在主机上面执行<code>docker login</code>才行;</p></li><li><p>当我通过Dockerfile构建一个新镜像的时候, 直接指明registry和标签, 比如:</p></li></ol><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t <span class="keyword">reg</span>.<span class="keyword">for</span>-k8s.<span class="keyword">com</span>/myproject/mydocker-image:v1.<span class="number">0.1</span> .</span><br><span class="line">Sending build context <span class="keyword">to</span> Docker daemon  <span class="number">97.21</span>MB</span><br><span class="line">Step <span class="number">1</span>/<span class="number">12</span> : FROM  <span class="number">1</span>and1internet/ubuntu-<span class="number">16</span></span><br><span class="line"> ---&gt; dbf985f1f449</span><br><span class="line">Step <span class="number">2</span>/<span class="number">12</span> : MAINTAINER guomaoqiu &lt;guomaoqiu@gmail.<span class="keyword">com</span>&gt;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; <span class="number">598894333</span>db9</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">Successfully built b190966f3773</span><br><span class="line">Successfully tagged <span class="keyword">reg</span>.<span class="keyword">for</span>-k8s.<span class="keyword">com</span>/myproject/mydocker-image:v1.<span class="number">0.1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ docker images | <span class="keyword">grep</span> myproject</span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">for</span>-k8s.<span class="keyword">com</span>/myproject/mydocker-image  v1.<span class="number">0.1</span>   b190966f3773   <span class="number">44</span> seconds ago    <span class="number">482</span>MB</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>加入当你从别处获取的镜像想上传到私有仓库呢？就是打个tag就行啦, 比如我想把从官网的这个nginx镜像放到我的仓库:</li></ol><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">tag</span> nginx <span class="keyword">reg</span>.<span class="keyword">for</span>-k8s.<span class="keyword">com</span>/myproject/mynginx:latest</span><br><span class="line">$ docker images | <span class="keyword">grep</span> myproject</span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">for</span>-k8s.<span class="keyword">com</span>/myproject/mydocker-image    v1.<span class="number">0.1</span> b190966f3773  <span class="number">2</span> minutes ago       <span class="number">482</span>MB</span><br><span class="line"><span class="keyword">reg</span>.<span class="keyword">for</span>-k8s.<span class="keyword">com</span>/myproject/mynginx           latest <span class="number">568</span>c4670fa80  <span class="number">5</span> weeks ago         <span class="number">109</span>MB</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>登录仓库</li></ol><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker login -u admin -<span class="selector-tag">p</span> Harbor12345 reg<span class="selector-class">.for-k8s</span><span class="selector-class">.com</span></span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config<span class="selector-class">.json</span>.</span><br><span class="line">Configure <span class="selector-tag">a</span> credential helper to remove this warning. See</span><br><span class="line">https:<span class="comment">//docs.docker.com/engine/reference/commandline/login/#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>最后把本地的镜像push到仓库<br>当我执行这个的时候报错了：</li></ol><figure class="highlight subunit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker push reg.for-k8s.com/myproject/mynginx:latest</span><br><span class="line"><span class="keyword">Error </span>response from daemon: Get https://reg.for-k8s.com/v2/: x509: certificate signed by unknown authority</span><br></pre></td></tr></tbody></table></figure><p>解决办法就是如果不在客户端部署证书，那么在Docker启动时设置参数 “–insecure-registry IP/仓库域名”,然后重载服务重启docker进程；注意的是我这里使用的这个域名是自定义的，那么需要在需要上传下载镜像的机器上，同样需要修改docker进程参数，并且绑定hosts,否则即使配置了参数，这个域名没法解析也是push/pull不到镜像的。</p><ol start="5"><li>再次执行push操作:</li></ol><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ docker push reg.for-k8s.com<span class="operator">/</span>myproject<span class="operator">/</span>mynginx:latest</span><br><span class="line">The push refers to repository [reg.for-k8s.com<span class="operator">/</span>myproject<span class="operator">/</span>mynginx]</span><br><span class="line"><span class="params">b7efe781401d:</span> Pushed</span><br><span class="line"><span class="params">c9c2a3696080:</span> Pushed</span><br><span class="line"><span class="number">7</span><span class="params">b4e562e58dc:</span> Pushed</span><br><span class="line"><span class="params">latest:</span> <span class="params">digest:</span> sha256:e2847e35d4e0e2d459a7696538cbfea42ea2d3b8a1ee8329ba7e68694950afd3 <span class="params">size:</span> <span class="number">948</span></span><br><span class="line"></span><br><span class="line">$ [root@k8s-m1 kubectl-terminal-ubuntu]<span class="comment"># docker push reg.for-k8s.com/myproject/mydocker-image:v1.0.1</span></span><br><span class="line">The push refers to repository [reg.for-k8s.com<span class="operator">/</span>myproject<span class="operator">/</span>mydocker-image]</span><br><span class="line"><span class="number">96</span><span class="params">dca48ee72c:</span> Pushed</span><br><span class="line"><span class="params">fa879b69764c:</span> Pushed</span><br><span class="line"><span class="number">4</span><span class="params">d823b00e6b7:</span> Pushed</span><br><span class="line"><span class="number">6</span><span class="params">bf6e96da4a0:</span> Pushed</span><br><span class="line"><span class="params">eedda540c6a8:</span> Pushed</span><br><span class="line"><span class="params">f2a971e53afa:</span> Pushed</span><br><span class="line"><span class="number">3</span><span class="params">ee1a3b3fd18:</span> Pushed</span><br><span class="line"><span class="number">8</span><span class="params">a225cfa6dea:</span> Pushed</span><br><span class="line"><span class="number">428</span><span class="params">c1ba11354:</span> Pushed</span><br><span class="line"><span class="params">b097f5edab7b:</span> Pushed</span><br><span class="line"><span class="number">27712</span><span class="params">caf4371:</span> Pushed</span><br><span class="line"><span class="number">8241</span><span class="params">afc74c6f:</span> Pushed</span><br><span class="line">v1.<span class="number">0.1</span>: <span class="params">digest:</span> sha256:a20629f62d73cff93bf73b31958878a1d76c2dd42e36ebb2cb6d0ac294a46da7 <span class="params">size:</span> <span class="number">2826</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/01/07/docker-harbor/15468535525128.jpg"></p><p>以上push成功；</p><p>测试pull<br>那为了测试pull并且能成功运行，我这里通过kuernetes运行一个DaemonSet，镜像采用: <code>mynginx</code> ,并且设置镜像pull策略为<code>Always</code>, 然后创建一个服务在集群内部通过ClusterIP能够访问, yaml如下:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">&gt;&gt;</span> <span class="string">test.yaml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mynginx-service</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mynginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">80</span><span class="number">-80</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">mynginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">mynginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mynginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">mynginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mynginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">reg.for-k8s.com/myproject/mynginx:latest</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">mynginx</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="string">$</span>  <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">daemonset.yaml</span></span><br><span class="line"><span class="string">service/mynginx-service</span> <span class="string">created</span></span><br><span class="line"><span class="string">daemonset.extensions/mynginx</span> <span class="string">create</span></span><br></pre></td></tr></tbody></table></figure><p>由于我刚才创建仓库的时候设置的仓库隐私性为私有的<br>需要docker login 登录成功之后，k8s kubectl create 就拉取不了镜像；<br>如果设置为公开，那么久不需要配置这一步骤。只需要docker login 登录成功之后，k8s kubectl create 就可以拉取镜像; 但是我不想让其为公开的；所以还需要配置如下步骤：</p><p>配置一个私有仓库harbor的secret：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create<span class="built_in"> secret </span>docker-registry registry-secret <span class="attribute">--namespace</span>=default \</span><br><span class="line"><span class="attribute">--docker-server</span>=https://reg.for-k8s.com <span class="attribute">--docker-username</span>=admin \</span><br><span class="line"><span class="attribute">--docker-password</span>=Harbor12345</span><br></pre></td></tr></tbody></table></figure><p>部署时指定imagePullSecrets, 修改在上面的yaml中添加这个选项:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">&gt;&gt;</span> <span class="string">test.yaml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mynginx-service</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mynginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="number">80</span><span class="number">-80</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">mynginx</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">mynginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mynginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">mynginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mynginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">reg.for-k8s.com/myproject/mynginx:latest</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">mynginx</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">registry-secret</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="string">$</span>  <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">daemonset.yaml</span></span><br><span class="line"><span class="string">service/mynginx-service</span> <span class="string">created</span></span><br><span class="line"><span class="string">daemonset.extensions/mynginx</span> <span class="string">create</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2019/01/07/docker-harbor/15468562743522.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;基于harbor搭建企业docker镜像仓库&quot;&gt;&lt;a href=&quot;#基于harbor搭建企业docker镜像仓库&quot; class=&quot;headerlink&quot; title=&quot;基于harbor搭建企业docker镜像仓库&quot;&gt;&lt;/a&gt;基于harbor搭建企业docker镜像仓库&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;docker中要使用镜像，一般会从本地、docker Hup公共仓库和其它第三方公共仓库中下载镜像，一般出于安全和外网(墙)资源下载速率的原因考虑企业级上不会轻易使用。那么有没有一种办法可以存储自己的镜像又有安全认证的仓库呢? &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     —-&amp;gt; 企业级环境中基于Harbor搭建自己的安全认证仓库。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Harbor是VMware公司最近开源的企业级Docker Registry项目, 其目标是帮助用户迅速搭建一个企业级的Docker registry服务。&lt;/p&gt;
&lt;h2 id=&quot;安装Harbor&quot;&gt;&lt;a href=&quot;#安装Harbor&quot; class=&quot;headerlink&quot; title=&quot;安装Harbor&quot;&gt;&lt;/a&gt;安装Harbor&lt;/h2&gt;&lt;p&gt;harbor需要安装docker和docker-compose才能使用，安装docker步骤省略，&lt;/p&gt;
&lt;h3 id=&quot;安装docker-dompose&quot;&gt;&lt;a href=&quot;#安装docker-dompose&quot; class=&quot;headerlink&quot; title=&quot;安装docker-dompose&quot;&gt;&lt;/a&gt;安装docker-dompose&lt;/h3&gt;&lt;p&gt;docker-dompose安装步骤如下： &lt;/p&gt;
&lt;p&gt;下载最新版的docker-compose文件 &lt;/p&gt;</summary>
    
    
    
    <category term="docker" scheme="https://blog.sctux.cc/categories/docker/"/>
    
    
    <category term="docker-registry" scheme="https://blog.sctux.cc/tags/docker-registry/"/>
    
  </entry>
  
  <entry>
    <title>CKA(Certified Kubernetes Adminsitrator)认证获取历程</title>
    <link href="https://blog.sctux.cc/2019/01/07/road-to-cka/"/>
    <id>https://blog.sctux.cc/2019/01/07/road-to-cka/</id>
    <published>2019-01-07T02:00:40.000Z</published>
    <updated>2025-09-01T01:59:08.876Z</updated>
    
    <content type="html"><![CDATA[<p><em>my experience with cka exam preparation</em></p><hr><h1 id="What-is-CKA"><a href="#What-is-CKA" class="headerlink" title="What is CKA?"></a>What is CKA?</h1><p>CKA全称就是<code>Certified Kubernetes Adminsitrator</code>，是由CNCF(Cloud Native Computing Foundation 云原生计算基金会)提供的认证项目，考试费用为<code>300</code>美金，必须要双币行用卡，考试过程为<code>3</code>个小时。<br>我办理的是招行的MasterCard，给了20块加急；缴考试费到考完整个流程方面还是非常简单的。</p><div style="width: 40%; margin: auto">![](road-to-cka/WechatIMG319.jpeg)</div>如果考试第一次考试不通过，账号内会生成一个`Free Retake`，在一年之内有一次免费重考的机会。 <h1 id="Why-should-obtain-certification"><a href="#Why-should-obtain-certification" class="headerlink" title="Why should obtain certification"></a>Why should obtain certification</h1><p>很有幸在春节前(2019/01/06)完成了2018下半年既定的目标，将CKA顺利拿下。<br>很巧合的是在6年前也就是2013年1月5号我通过了<a href="https://blog.sctux.com/Guo_Maoqiu_RHCE.pdf">RHCE</a>认证考试(虽然我的RHCE认证早已过期，但是我更想说的是: <em><strong>万变不离其宗</strong></em> )<br><img src="/2019/01/07/road-to-cka/CKA.png"></p><p><img src="/2019/01/07/road-to-cka/verification.png"><br>当K8S已经进入到各行各业，那么一套公正权威的管理员测评体系必然就呼之欲出了。<br>也许你会说互联网企业不相信认证，确实一张纸并不能说明什么。这些认证的意义何在，或者怎么才能向别人证明你会用呢？答案自然就是考证了。RHCE也好、CKA也好对我而言其实更多的是一种鞭策，让自己心里有个小目标，同时能够以运维人员的身份去系统的学习、使用他们。</p><p>经过我个人的学习，参考过程，我认为这个认证的意义和价值如下：</p><ol><li>从考试大纲可以看出考试内容涵盖的知识点很全面，也就是说你需要学习或者了解的知识点也就很多;</li><li>对于计划构建自己k8s集群的个人和企业，有CKA在你的团队里能让你更快更稳的开始你的实践。毕竟这帮人是从徒手搭集群开始的。</li><li>参加这个考试的时间非常紧张，参加人必须对k8s大部分资源的yaml和命令烂熟于心。你随便找个cka来，让他徒手给你写一个应用的编排出来，从deploy 到pv到service，也许他个别细节和词法可能会写错，大体写出来是一点问题都没有的，期间完全不用参考文档。我要说的是cka的基本技能非常过硬。</li><li>截至到现在，我没有见过任何组织和个人提供cka必过手册（也就是传说中的bible）。这个认证诞生也就一、两年的时间， 因此现在通过的人都是货真价实考出来的（相对于其他公司的某cm，某某ca等等），这个价值会体现在证书编号上。再过几年，以我们中国人的考试能力来说，你懂的…</li><li>本考试从报名考试到接洽参考，全程英文交流，能考过的人英文水平还算说得过去吧。</li></ol><h1 id="我的学习过程、途径"><a href="#我的学习过程、途径" class="headerlink" title="我的学习过程、途径:"></a>我的学习过程、途径:</h1><ul><li>其实早在2015年就在接触容器技术，从LXC到Docker再到现在的kubernetes, 日常工作中的也尽量把一些应用做成docker去跑；省下了不少精力时间去做一些重复复杂性的工作；比如以前跑个gitLab的环境，亦或是想要个Python应用运行的环境，除了要把服务器初始化完成之后，还需要一些繁琐的配置，有了docker之后，通过<code>dockerfile/docker-compose</code>就可以很轻松的实现一些应用跑在容器里面了。2018年5月份开始研究学习kubernetes相关东西，虽然学习得不是很系统，但是还是完成了一个小小的项目，感兴趣的点<a href="https://github.com/guomaoqiu/flask_kubernetes">这里</a> 可以作为学习练习的项目;既然学了就要用上；不然也是徒劳。</li><li>K8s.io里面tasks相关的东西都需要自己实践下，还是有些日常没怎么用到的,最好把整个文档都看一遍。</li><li>宋大神的博客: <a href="https://jimmysong.io/kubernetes-handbook/">https://jimmysong.io/kubernetes-handbook/</a></li><li>学习实操环境做最好是通过二进制的方式来搭建，毕竟如果你使用kubeadm来搭建的话很多的事情它已经帮你完成设定了，也就没理解为什么要这么做。每个组件结合起来之后整个架构在脑子里面就会非常的清楚，排错起来也更加容易一些。考试不难，只要经过大量的实践练习就可以啦~</li></ul><p><em><strong>注:</strong></em> 这次CKA考试，我没有参加任何国内培训，主要是根据考试大纲、官方文档以及CNCF推出的一套<a href="https://www.edx.org/course/introduction-to-kubernetes">免费课程</a>进行自学。</p><h1 id="考前注意事项"><a href="#考前注意事项" class="headerlink" title="考前注意事项"></a>考前注意事项</h1><ul><li>考试平台是由CNCF委托的一个计算机方面非常专业的服务商<a href="https://www.examslocal.com/">PSI</a>来进行监督考试；</li><li>官方认证证件：需要有照片和Latin字母写的全名，我用的是护照;</li><li>考试中不能喝水、吃东西，可以申请休息，但是不清楚能不能离开摄像头监视范围内，没请过，反正我全程无尿点。</li><li>考试的网页一半是试题、一半是GateOne的终端界面，最好能有一台mac电脑然后外接显示器、键盘，鼠标，mac系统比windows有优势，再一个就是终端就显得不是很小了，操作也顺手; (另外为了提前熟悉使用gateone终端我这里也做了一个<a href="https://github.com/guomaoqiu/kubectl-terminal">镜像</a>，具体食用方法参见README.md)</li><li>一个没有其他人的空房间，空桌子，不能带手机，不能有书本，监考官会让你拿着电脑展示你周围的所有环境，我的考试是预约在周末下午在公司一个会议室完成的;</li><li>按照官方考试流程指导还需要做一下硬件要求性的测试: 使用Chrome浏览器访问<a href="https://www.examslocal.com/ScheduleExam/Home/CompatibilityCheck">https://www.examslocal.com/ScheduleExam/Home/CompatibilityCheck</a> 选择”Linux Foundation” as the Exam Sponsor and “CKA” as the Exam根据提示安装一个chrome插件（实测有项网速的检查，需要有个稳定的科学上网工具）</li><li>180分钟，24道题(涵盖所有k8s基础知识点),平均一道题7.5分钟，时间是非常紧的；一道题做完要去验证，有把握没问题的就果断下一题，千万不要犹豫；打脑壳的那种题记住题号，做完简单的在回过头来整。</li></ul><h1 id="考试结束注意事项"><a href="#考试结束注意事项" class="headerlink" title="考试结束注意事项"></a>考试结束注意事项</h1><p>在考试结束之后，36个小时之内，CNCF就会通过邮件告诉你考试成绩了，如果你的分数大于74%，那么恭喜你通过了！并且附件就直接会有你的通过的证书。如果考试不通过，你的账号上就会直接有一次<code>Free Retake</code>考试的机会。<br><img src="/2019/01/07/road-to-cka/score.png"></p><p>😢丢了3分，官方也不会告诉你到底错在哪里了；就只有这么一个成绩跟证书发过来。</p><hr><p>以上，希望可以帮到你。</p><p>ps: <em><del>_</del>该考试签订了保密协议，So 考试原题无法分享~~~_~~</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;my experience with cka exam preparation&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;What-is-CKA&quot;&gt;&lt;a href=&quot;#What-is-CKA&quot; class=&quot;headerlink&quot; title=&quot;What is CKA?&quot;&gt;&lt;/a&gt;What is CKA?&lt;/h1&gt;&lt;p&gt;CKA全称就是&lt;code&gt;Certified Kubernetes Adminsitrator&lt;/code&gt;，是由CNCF(Cloud Native Computing Foundation 云原生计算基金会)提供的认证项目，考试费用为&lt;code&gt;300&lt;/code&gt;美金，必须要双币行用卡，考试过程为&lt;code&gt;3&lt;/code&gt;个小时。&lt;br&gt;我办理的是招行的MasterCard，给了20块加急；缴考试费到考完整个流程方面还是非常简单的。&lt;/p&gt;
&lt;div style=&quot;width: 40%; margin: auto&quot;&gt;![](road-to-cka/WechatIMG319.jpeg)&lt;/div&gt;
如果考试第一次考试不通过，账号内会生成一个`Free Retake`，在一年之内有一次免费重考的机会。 

&lt;h1 id=&quot;Why-should-obtain-certification&quot;&gt;&lt;a href=&quot;#Why-should-obtain-certification&quot; class=&quot;headerlink&quot; title=&quot;Why should obtain certification&quot;&gt;&lt;/a&gt;Why should obtain certification&lt;/h1&gt;&lt;p&gt;很有幸在春节前(2019/01/06)完成了2018下半年既定的目标，将CKA顺利拿下。&lt;br&gt;很巧合的是在6年前也就是2013年1月5号我通过了&lt;a href=&quot;https://blog.sctux.com/Guo_Maoqiu_RHCE.pdf&quot;&gt;RHCE&lt;/a&gt;认证考试(虽然我的RHCE认证早已过期，但是我更想说的是: &lt;em&gt;&lt;strong&gt;万变不离其宗&lt;/strong&gt;&lt;/em&gt; )&lt;br&gt;&lt;img src=&quot;/2019/01/07/road-to-cka/CKA.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/01/07/road-to-cka/verification.png&quot;&gt;&lt;br&gt;当K8S已经进入到各行各业，那么一套公正权威的管理员测评体系必然就呼之欲出了。&lt;br&gt;也许你会说互联网企业不相信认证，确实一张纸并不能说明什么。这些认证的意义何在，或者怎么才能向别人证明你会用呢？答案自然就是考证了。RHCE也好、CKA也好对我而言其实更多的是一种鞭策，让自己心里有个小目标，同时能够以运维人员的身份去系统的学习、使用他们。&lt;/p&gt;
&lt;p&gt;经过我个人的学习，参考过程，我认为这个认证的意义和价值如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从考试大纲可以看出考试内容涵盖的知识点很全面，也就是说你需要学习或者了解的知识点也就很多;&lt;/li&gt;
&lt;li&gt;对于计划构建自己k8s集群的个人和企业，有CKA在你的团队里能让你更快更稳的开始你的实践。毕竟这帮人是从徒手搭集群开始的。&lt;/li&gt;
&lt;li&gt;参加这个考试的时间非常紧张，参加人必须对k8s大部分资源的yaml和命令烂熟于心。你随便找个cka来，让他徒手给你写一个应用的编排出来，从deploy 到pv到service，也许他个别细节和词法可能会写错，大体写出来是一点问题都没有的，期间完全不用参考文档。我要说的是cka的基本技能非常过硬。&lt;/li&gt;
&lt;li&gt;截至到现在，我没有见过任何组织和个人提供cka必过手册（也就是传说中的bible）。这个认证诞生也就一、两年的时间， 因此现在通过的人都是货真价实考出来的（相对于其他公司的某cm，某某ca等等），这个价值会体现在证书编号上。再过几年，以我们中国人的考试能力来说，你懂的…&lt;/li&gt;
&lt;li&gt;本考试从报名考试到接洽参考，全程英文交流，能考过的人英文水平还算说得过去吧。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/tags/kubernetes/"/>
    
    <category term="CKA" scheme="https://blog.sctux.cc/tags/CKA/"/>
    
  </entry>
  
  <entry>
    <title>使用Bootstrap Token完成TLS Bootstrapping</title>
    <link href="https://blog.sctux.cc/2018/12/30/kubernetes-bootstrapping/"/>
    <id>https://blog.sctux.cc/2018/12/30/kubernetes-bootstrapping/</id>
    <published>2018-12-30T10:24:10.000Z</published>
    <updated>2025-09-01T01:59:08.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>本文主要记录一下搭建一个kubelet搭建到加入集群到手动、自动(证书轮换的)证书认证过程, 那么我的环境是用的v1.12.4版本，有一台master,除了master上面的一些组件已经搭建完毕，主要重点是在kubelet上面，所以现在就是master已经工作正常的情况下，加入新的<code>kubelet(worker节点)</code>需要做一些什么样的操作。<br>然后需要实现的是:</p><ul><li>通过bootstrap token以及boostrap.kubeconfig来引导worker节点申请证书</li><li>如果第一步申请发出去之后，在手动在master端进行手动批准证书申请，然后发放kubelet证书</li><li>实现kubelet证书的自动批准</li><li>实现kubelet证书的自动轮换操作<br><img src="/2018/12/30/kubernetes-bootstrapping/start.png"></li></ul><p><strong>简单理一下TLS Bootstrapping的一个引导过程</strong></p><ol><li>master端创建API Server和Kubelet Client通信凭证即生成 <code>apiserver.pem/apiserver-key.pem/apiserver.csr</code>;</li><li>在集群内创建特定的 Bootstrap Token Secret，该 Secret 将替代以前的 token.csv 内置用户声明文件;</li><li>在集群内创建首次 TLS Bootstrap 申请证书的 ClusterRole 即<code>system:node-bootstrapper</code>,并将上面的bootstrap token secret进行绑定即 clusterrolebinding <code>kubelet-bootstrap</code>，这样通过绑定就能以这个内置用户组信息去发起CSR请求啦；</li><li>生成特定的包含 <code>TLS Bootstrapping Token</code> 的 <code>bootstrap.kubeconfig</code>;</li><li>调整kubelete启动参数，指定引导文件<code>bootstrap.kubeconfig</code>;</li><li>重载配置、重启服务，master端手动批准完成worker节点的CSR请求;</li><li>后续如果没有配置证书轮换的话，就会一直使用由controller-manager批准颁发的证书文件了，有效期是一年。(自动批准&amp;证书轮换下面再说)</li></ol><p>当然以我的理解要要实现证书轮换那么肯定是没有外界干预的情况下自动执行的，那这个功能也肯定是需要自动批准这个功能的。</p><p>那么自动批准需要做的一些事情却是在手动批准的基础上做了一些操作:</p><ol><li>创建CSR请求的 TLS Bootstrap 申请证书的renew Kubelet client/server 的 ClusterRole，以及其相关对应的 ClusterRoleBinding；并绑定到对应的组或用户</li><li>调整 Controller Manager 配置，以使其能自动签署相关证书和自动清理过期的 TLS Bootstrapping Token</li><li>可选的: 集群搭建成功后立即清除 Bootstrap Token Secret，或等待 Controller Manager 待其过期后删除，以防止被恶意利用</li></ol><h1 id="二、手动批准"><a href="#二、手动批准" class="headerlink" title="二、手动批准"></a>二、手动批准</h1><h2 id="2-1-创建API-Server和Kubelet-Client通信凭证"><a href="#2-1-创建API-Server和Kubelet-Client通信凭证" class="headerlink" title="2.1 创建API Server和Kubelet Client通信凭证"></a>2.1 创建API Server和Kubelet Client通信凭证</h2><p>我这里已经有ca根证书文件了，那就从创建apiserver证书开始</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cat</span> &gt;&gt; apiserver<span class="literal">-csr</span>.json &lt;&lt; EOF</span><br><span class="line">{</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"kube-apiserver"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [</span><br><span class="line">    <span class="string">"10.96.0.1"</span>,</span><br><span class="line">    <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"192.168.56.201"</span>,</span><br><span class="line">    <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">    <span class="string">"kubernetes.default.svc.cluster.local"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"key"</span>: {</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: <span class="number">2048</span></span><br><span class="line">  },</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    {</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"Hangzhou"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"Hangzhou"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"Kubernetes"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"Kubernetes-manual"</span></span><br><span class="line">    }</span><br><span class="line">  ]</span><br><span class="line">}</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><p>我这里就单台master,所以就写了个这一个IP地址</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行创建:</span></span><br><span class="line"><span class="variable">$cfssl</span> gencert \</span><br><span class="line">  -ca=<span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>ca.pem \</span><br><span class="line">  -ca-key=<span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>ca-key.pem \</span><br><span class="line">  -config=ca-config.json \</span><br><span class="line">  -profile=kubernetes \</span><br><span class="line">  apiserver-csr.json | cfssljson -bare <span class="variable">${PKI_DIR}</span>/apiserver</span><br><span class="line"></span><br><span class="line">ls <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver*.pem</span><br><span class="line"><span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver-key.pem  <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver.pem</span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-创建引导配置文件-bootstrap-kubelet-kubeconfig"><a href="#2-2-创建引导配置文件-bootstrap-kubelet-kubeconfig" class="headerlink" title="2.2 创建引导配置文件 bootstrap-kubelet.kubeconfig"></a>2.2 创建引导配置文件 bootstrap-kubelet.kubeconfig</h2><h3 id="2-2-1-生成bootsrap—token"><a href="#2-2-1-生成bootsrap—token" class="headerlink" title="2.2.1 生成bootsrap—token"></a>2.2.1 生成bootsrap—token</h3><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">TOKEN_ID</span>=$(openssl rand 3 -hex)</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">TOKEN_SECRET</span>=$(openssl rand 8 -hex)</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">BOOTSTRAP_TOKEN</span>=<span class="variable">${TOKEN_ID}</span>.${TOKEN_SECRET}</span><br></pre></td></tr></tbody></table></figure><p>关于这个token的格式要求参见<a href="https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/#token-format">这里</a></p><h3 id="2-2-2-创建boostrap-token-secret"><a href="#2-2-2-创建boostrap-token-secret" class="headerlink" title="2.2.2 创建boostrap token secret"></a>2.2.2 创建boostrap token secret</h3><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="operator">&gt;</span><span class="operator">&gt;</span> bootstrap-token-Secret.yml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Secret</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> bootstrap-token-{TOKEN_ID}</span><br><span class="line">  <span class="params">namespace:</span> kube-system</span><br><span class="line"><span class="params">type:</span> bootstrap.kubernetes.io<span class="symbol">/token</span></span><br><span class="line"><span class="params">stringData:</span></span><br><span class="line">  <span class="params">token-id:</span> {TOKEN_ID}</span><br><span class="line">  <span class="params">token-secret:</span> {TOKEN_SECRET}</span><br><span class="line">  <span class="params">usage-bootstrap-authentication:</span> <span class="string">"true"</span></span><br><span class="line">  <span class="params">usage-bootstrap-signing:</span> <span class="string">"true"</span></span><br><span class="line">  <span class="params">auth-extra-groups:</span> system:bootstrappers:default-node-token</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将以上变量赋值进去</span></span><br><span class="line">sed <span class="operator">-</span>ri <span class="string">"s#<span class="char escape_">\{</span>TOKEN_ID<span class="char escape_">\}</span>#<span class="subst">${TOKEN_ID}</span>#g"</span> bootstrap-token-Secret.yml</span><br><span class="line">sed <span class="operator">-</span>ri <span class="string">"/token-id/s#<span class="char escape_">\S</span>+<span class="char escape_">\$</span>#'&amp;'#"</span> resources<span class="symbol">/bootstrap-token-Secret.yml</span></span><br><span class="line">sed <span class="operator">-</span>ri <span class="string">"s#<span class="char escape_">\{</span>TOKEN_SECRET<span class="char escape_">\}</span>#<span class="subst">${TOKEN_SECRET}</span>#g"</span> resources<span class="symbol">/bootstrap-token-Secret.yml</span></span><br><span class="line">kubectl create <span class="operator">-</span>f resources<span class="symbol">/bootstrap-token-Secret.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看详情，一定要放到kube-system这个namespace</span></span><br><span class="line">$ kubectl describe secret  bootstrap-token-b8cf79 <span class="operator">-</span>n kube-system</span><br><span class="line"><span class="params">Name:</span>         bootstrap-token-b8cf79</span><br><span class="line"><span class="params">Namespace:</span>    kube-system</span><br><span class="line"><span class="params">Labels:</span>       <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">Annotations:</span></span><br><span class="line"><span class="params">Type:</span>         bootstrap.kubernetes.io<span class="symbol">/token</span></span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line"><span class="operator">==</span><span class="operator">==</span></span><br><span class="line"><span class="params">auth-extra-groups:</span>               <span class="number">39</span> bytes</span><br><span class="line"><span class="params">token-id:</span>                        <span class="number">6</span> bytes</span><br><span class="line"><span class="params">token-secret:</span>                    <span class="number">16</span> bytes</span><br><span class="line"><span class="params">usage-bootstrap-authentication:</span>  <span class="number">4</span> bytes</span><br><span class="line"><span class="params">usage-bootstrap-signing:</span>         <span class="number">4</span> bytes</span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-2-创建启动引导配置"><a href="#2-2-2-创建启动引导配置" class="headerlink" title="2.2.2 创建启动引导配置"></a>2.2.2 创建启动引导配置</h3><figure class="highlight dsconfig"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bootstrap set cluster</span></span><br><span class="line">$ <span class="string">kubectl</span> <span class="string">config</span> <span class="built_in">set-cluster</span> <span class="string">kubernetes</span> \</span><br><span class="line">    <span class="built_in">--certificate-authority=/etc/kubernetes/pki/ca.pem</span> \</span><br><span class="line">    <span class="built_in">--embed-certs=true</span> \</span><br><span class="line">    <span class="built_in">--server=192.168.56.202</span> \</span><br><span class="line">    <span class="built_in">--kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bootstrap set credentials</span></span><br><span class="line">$ <span class="string">kubectl</span> <span class="string">config</span> <span class="built_in">set-credentials</span> <span class="string">tls-bootstrap-token-user</span> \</span><br><span class="line">    <span class="built_in">--token=${BOOTSTRAP_TOKEN}</span> \</span><br><span class="line">    <span class="built_in">--kubeconfig=/etc/kubernetes//bootstrap-kubelet.kubeconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bootstrap set context</span></span><br><span class="line">$ <span class="string">kubectl</span> <span class="string">config</span> <span class="built_in">set-context</span> <span class="string">tls-bootstrap-token-user</span>@<span class="string">kubernetes</span> \</span><br><span class="line">    <span class="built_in">--cluster=kubernetes</span> \</span><br><span class="line">    <span class="built_in">--user=tls-bootstrap-token-user</span> \</span><br><span class="line">    <span class="built_in">--kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bootstrap use default context</span></span><br><span class="line">$ <span class="string">kubectl</span> <span class="string">config</span> <span class="string">use-context</span> <span class="string">tls-bootstrap-token-user</span>@<span class="string">kubernetes</span> \</span><br><span class="line">    <span class="built_in">--kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span></span><br></pre></td></tr></tbody></table></figure><p>该文件生成之后需要拷贝至worker节点上面去，并且修改配置，指定该引导配置文件<br>这个流程在官方文档中也有描述:<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls-bootstrapping/#bootstrap-initialization">bootstrap初始化过程</a></p><h3 id="2-2-3-调整worker节点kubelet启动配置文件加上这个引导文件-参数"><a href="#2-2-3-调整worker节点kubelet启动配置文件加上这个引导文件-参数" class="headerlink" title="2.2.3 调整worker节点kubelet启动配置文件加上这个引导文件(参数)"></a>2.2.3 调整worker节点kubelet启动配置文件加上这个引导文件(参数)</h3><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/bin/kubelet</span><br><span class="line">  <span class="attr">--kubeconfig</span>=/etc/kubernetes/kubelet.kubeconfig \</span><br><span class="line">  <span class="attr">--network-plugin</span>=cni \</span><br><span class="line">  <span class="attr">--cni-conf-dir</span>=/etc/cni/net.d \</span><br><span class="line">  <span class="attr">--cni-bin-dir</span>=/opt/cni/bin \</span><br><span class="line">  <span class="attr">--logtostderr</span>=<span class="literal">false</span> \</span><br><span class="line">  <span class="attr">--log-dir</span>=/etc/kubernetes/log \</span><br><span class="line">  <span class="attr">--config</span>=/etc/kubernetes/kubelet-conf.yml \</span><br><span class="line">  <span class="attr">--node-labels</span>=node-role.kubernetes.io/master=<span class="string">''</span> \</span><br><span class="line">  <span class="attr">--pod-infra-container-image</span>=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:<span class="number">3.1</span> \</span><br><span class="line">  <span class="attr">--v</span>=<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p>此时如果启动kubelet服务的话在apiserver将会报错：<br><img src="/2018/12/30/kubernetes-bootstrapping/forbidden.jpg"></p><p>这是因为在默认情况下，kubelet 通过 bootstrap.kubeconfig 中的预设用户 Token 声明了自己的身份，然后创建 CSR 请求；但是不要忘记这个用户在我们不处理的情况下他没任何权限的，包括创建 CSR 请求；所以需要如下命令创建一个 ClusterRoleBinding，将预设用户 kubelet-bootstrap 与内置的 ClusterRole system:node-bootstrapper 绑定到一起，使其能够发起 CSR 请求</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="operator">&gt;</span><span class="operator">&gt;</span> kubelet-bootstrap-clusterrolebinding.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> rbac.authorization.k8s.io<span class="symbol">/v1</span></span><br><span class="line"><span class="params">kind:</span> ClusterRoleBinding</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> kubelet-bootstrap</span><br><span class="line"><span class="params">roleRef:</span></span><br><span class="line">  <span class="params">apiGroup:</span> rbac.authorization.k8s.io</span><br><span class="line">  <span class="params">kind:</span> ClusterRole</span><br><span class="line">  <span class="params">name:</span> system:node-bootstrapper</span><br><span class="line"><span class="params">subjects:</span></span><br><span class="line"><span class="operator">-</span> <span class="params">apiGroup:</span> rbac.authorization.k8s.io</span><br><span class="line">  <span class="params">kind:</span> Group</span><br><span class="line">  <span class="params">name:</span> system:bootstrappers:default-node-token</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><p>将上面创建后就可以看到我们通过手动批准之后worker节点就加入到集群当中来了<br><img src="/2018/12/30/kubernetes-bootstrapping/result.jpg"><br>而且在worker节点的/var/lib/kubelet/pki目录下已经获得controller-manager颁发下来的证书,并且还分发了一个kubelet.kubeconfig的文件，这个文件虽然配置中指定了，但这个也是由controller-manager分发给worker节点的。</p><figure class="highlight tap"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-n0 kubernetes]<span class="comment"># ll /var/lib/kubelet/pki/</span></span><br><span class="line">total 12</span><br><span class="line">-rw-------<span class="number"> 1 </span>root root<span class="number"> 1293 </span>Dec<span class="number"> 30 </span>10:14 kubelet-client-2018-12-30-10-14-50.pem</span><br><span class="line">lrwxrwxrwx<span class="number"> 1 </span>root root  <span class="number"> 59 </span>Dec<span class="number"> 30 </span>10:14 kubelet-client-current.pem -&gt; /var/lib/kubelet/pki/kubelet-client-2018-12-30-10-14-50.pem</span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>root root<span class="number"> 2153 </span>Dec<span class="number"> 30 </span>10:14 kubelet.crt</span><br><span class="line">-rw-------<span class="number"> 1 </span>root root<span class="number"> 1679 </span>Dec<span class="number"> 30 </span>10:14 kubelet.key</span><br></pre></td></tr></tbody></table></figure><p>还有个问题就是，集群已经完成，在我执行exec想进入一个容器的时候却出现了forbidden的问题:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 resources]# kubectl exec -it kubectl-terminal-ubuntu /bin/bash</span><br><span class="line">error: unable <span class="keyword">to</span><span class="built_in"> upgrade </span>connection: Forbidden (<span class="attribute">user</span>=kube-apiserver, <span class="attribute">verb</span>=create, <span class="attribute">resource</span>=nodes, <span class="attribute">subresource</span>=proxy)</span><br></pre></td></tr></tbody></table></figure><p>这是因为kube-apiserveruser并没有nodes的资源存取权限,属于正常。由于 API 权限,故需要建立一个 RBAC Role 来获取存取权限;</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="operator">&gt;</span><span class="operator">&gt;</span> apiserver-to-kubelet-rbac.yml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> rbac.authorization.k8s.io<span class="symbol">/v1</span></span><br><span class="line"><span class="params">kind:</span> ClusterRole</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">annotations:</span></span><br><span class="line">    rbac.authorization.kubernetes.io<span class="operator">/</span><span class="params">autoupdate:</span> <span class="string">"true"</span></span><br><span class="line">  <span class="params">labels:</span></span><br><span class="line">    kubernetes.io<span class="operator">/</span><span class="params">bootstrapping:</span> rbac-defaults</span><br><span class="line">  <span class="params">name:</span> system:kube-apiserver-to-kubelet</span><br><span class="line"><span class="params">rules:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">apiGroups:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">""</span></span><br><span class="line">    <span class="params">resources:</span></span><br><span class="line">      <span class="operator">-</span> nodes<span class="symbol">/proxy</span></span><br><span class="line">      <span class="operator">-</span> nodes<span class="symbol">/stats</span></span><br><span class="line">      <span class="operator">-</span> nodes<span class="symbol">/log</span></span><br><span class="line">      <span class="operator">-</span> nodes<span class="symbol">/spec</span></span><br><span class="line">      <span class="operator">-</span> nodes<span class="symbol">/metrics</span></span><br><span class="line">    <span class="params">verbs:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"*"</span></span><br><span class="line"><span class="operator">-</span>--</span><br><span class="line"><span class="params">apiVersion:</span> rbac.authorization.k8s.io<span class="symbol">/v1</span></span><br><span class="line"><span class="params">kind:</span> ClusterRoleBinding</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> system:kube-apiserver</span><br><span class="line">  <span class="params">namespace:</span> <span class="string">""</span></span><br><span class="line"><span class="params">roleRef:</span></span><br><span class="line">  <span class="params">apiGroup:</span> rbac.authorization.k8s.io</span><br><span class="line">  <span class="params">kind:</span> ClusterRole</span><br><span class="line">  <span class="params">name:</span> system:kube-apiserver-to-kubelet</span><br><span class="line"><span class="params">subjects:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">apiGroup:</span> rbac.authorization.k8s.io</span><br><span class="line">    <span class="params">kind:</span> User</span><br><span class="line">    <span class="params">name:</span> kube-apiserver</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><p>创建好之后就可以exec啦~</p><p>以上，TLS Bootstrapping的手动批准已经完成。</p><h1 id="三、自动批准"><a href="#三、自动批准" class="headerlink" title="三、自动批准"></a>三、自动批准</h1><p>上面已经完成了手动批准的操作，那接下来就是实现以下自动批准以及证书轮换的实现</p><p>上面需要的配置其实都差不多了，只需要再做一些配置即可完成；</p><p>kubelet 所发起的 CSR 请求是由 controller manager 签署的；如果想要是实现自动续期，就需要让 controller manager 能够在 kubelet 发起证书请求的时候自动帮助其签署证书；那么 controller manager 不可能对所有的 CSR 证书申请都自动签署，这时候就需要配置 RBAC 规则，保证 controller manager 只对 kubelet 发起的特定 CSR 请求自动批准即可；在 TLS bootstrapping 官方文档中，CSR有三种请求类型:</p><ul><li>nodeclient: kubelet 以 O=system:nodes 和 CN=system:node:(node name) 形式发起的 CSR 请求</li><li>selfnodeclient: kubelet client renew 自己的证书发起的 CSR 请求(与上一个证书就有相同的 O 和 CN)</li><li>selfnodeserver: kubelet server renew 自己的证书发起的 CSR 请求</li></ul><p>通俗点讲就是:<br>nodeclient 类型的 CSR 仅在第一次启动时会产生，selfnodeclient 类型的 CSR 请求实际上就是 kubelet renew 自己作为 client 跟 apiserver 通讯时使用的证书产生的，selfnodeserver 类型的 CSR 请求则是 kubelet 首次申请或后续 renew 自己的 10250 api 端口证书时产生的</p><p>那么针对以上3种CSR请求分别给出了3种对应的 ClusterRole，如下所示</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A ClusterRole which instructs the CSR approver to approve a user requesting</span></span><br><span class="line"><span class="comment"># node client credentials.</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:certificates.k8s.io:certificatesigningrequests:nodeclient</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">"certificates.k8s.io"</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">"certificatesigningrequests/nodeclient"</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">"create"</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># A ClusterRole which instructs the CSR approver to approve a node renewing its</span></span><br><span class="line"><span class="comment"># own client credentials.</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:certificates.k8s.io:certificatesigningrequests:selfnodeclient</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">"certificates.k8s.io"</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">"certificatesigningrequests/selfnodeclient"</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">"create"</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># A ClusterRole which instructs the CSR approver to approve a node requesting a</span></span><br><span class="line"><span class="comment"># serving cert matching its client cert.</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:certificates.k8s.io:certificatesigningrequests:selfnodeserver</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">"certificates.k8s.io"</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">"certificatesigningrequests/selfnodeserver"</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">"create"</span>]</span><br></pre></td></tr></tbody></table></figure><p>其中<code>selfnodeclient</code>,<code>nodeclient</code> 已经是集群内置的了;</p><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get clusterrole</span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code">system:certificates.k8s.io:certificatesigningrequests:nodeclient       28h</span></span><br><span class="line"><span class="code">system:certificates.k8s.io:certificatesigningrequests:selfnodeclient   28h</span></span><br><span class="line"><span class="code">......</span></span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><p>然后是三个 ClusterRole 对应的 三个ClusterRoleBinding；需要注意的是 在使用 Bootstrap Token 进行引导时，Kubelet 组件使用 Token 发起的请求其用户名为<code>system:bootstrap:&lt;token id&gt;</code>，用户组为 system:bootstrappers；所以 我们在创建 ClusterRoleBinding 时要绑定到这个用户或者组上；这里我选择全部绑定到组上：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; kubelet-bootstrap-rbac.yml &lt;&lt; EOF</span><br><span class="line"><span class="comment"># 允许 system:bootstrappers 组用户创建 CSR 请求</span></span><br><span class="line"><span class="comment"># (这一步我在上面已经做过啦)</span></span><br><span class="line">kubectl create clusterrolebinding kubelet-bootstrap <span class="attribute">--clusterrole</span>=system:node-bootstrapper <span class="attribute">--group</span>=system:bootstrappers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求</span></span><br><span class="line">kubectl create clusterrolebinding node-client-auto-approve-csr <span class="attribute">--clusterrole</span>=system:certificates.k8s.io:certificatesigningrequests:nodeclient <span class="attribute">--group</span>=system:bootstrappers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求</span></span><br><span class="line">kubectl create clusterrolebinding node-client-auto-renew-crt <span class="attribute">--clusterrole</span>=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient <span class="attribute">--group</span>=system:nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动批准 system:nodes 组用户更新 kubelet 10250 api 端口证书的 CSR 请求</span></span><br><span class="line">kubectl create clusterrolebinding node-server-auto-renew-crt <span class="attribute">--clusterrole</span>=system:certificates.k8s.io:certificatesigningrequests:selfnodeserver <span class="attribute">--group</span>=system:nodes</span><br></pre></td></tr></tbody></table></figure><p>即: kubelet worker节点证书手动或自动批准需要用到的角色以及角色绑定有:</p><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># ClusterRole</span><br><span class="line">$ kubectl get clusterrole</span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code">system:certificates.k8s.io:certificatesigningrequests:nodeclient       2d</span></span><br><span class="line"><span class="code">system:certificates.k8s.io:certificatesigningrequests:selfnodeclient   2d</span></span><br><span class="line"><span class="code">system:certificates.k8s.io:certificatesigningrequests:selfnodeserver   5m</span></span><br><span class="line"><span class="code">system:node-bootstrapper                                               2d</span></span><br><span class="line"><span class="code">system:kube-apiserver-to-kubelet                                       17h</span></span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># ClusterRoleBinding</span></span><br><span class="line"><span class="code">$ kubectl get clusterrolebinding | grep auto</span></span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code">node-client-auto-approve-csr                           16h</span></span><br><span class="line"><span class="code">node-client-auto-renew-crt                             16h</span></span><br><span class="line"><span class="code">node-server-auto-renew-crt                             16h</span></span><br><span class="line"><span class="code">system:kube-apiserver                                  17h</span></span><br><span class="line"><span class="code">kubelet-bootstrap                                      18h</span></span><br><span class="line"><span class="code">......</span></span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><p>创建好对应的角色及角色绑定之后就可以修改这个证书的有效期啦；只要在<code>Description=Kubernetes Controller Manager </code>服务的启动配置参数中加入:</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">--experimental-cluster-signing-duration</span>=<span class="number">10</span>m0s \</span><br><span class="line"><span class="attr">--feature-gates</span>=RotateKubeletClientCertificate=<span class="literal">true</span> \</span><br><span class="line"><span class="attr">--feature-gates</span>=RotateKubeletServerCertificate=<span class="literal">true</span> </span><br></pre></td></tr></tbody></table></figure><p>以及kubelet服务启动配置参数中加入:</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">--feature-gates</span>=RotateKubeletClientCertificate=<span class="literal">true</span> \</span><br><span class="line"><span class="attr">--feature-gates</span>=RotateKubeletServerCertificate=<span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>通过文档了解到<code>--feature-gates</code> 这个是kubernetes中特有的一些功能，有些功能是处于开发版本的，具体可以参看<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/">这里</a></p><p>以下就是kubelet运行一段时间后，通过在<code>controller-manager</code>设置的证书有效期快过期的时候通过自动申请并自动批准的结果；<br>可以看出来<code>node-csr-ysGrNbyioCNnj3UUFiQGn5WwLGF1P6wJ4DTIib1IcqQ</code> 这个CSR是第一次启动时的用户<code>system:bootstrap:fd2f4f</code>的证书请求。<br><img src="/2018/12/30/kubernetes-bootstrapping/result2.jpg"></p><p>并且在证书轮换的过程也可以通过日志发现</p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Dec</span> <span class="number">31</span> <span class="number">04</span>:<span class="number">10</span>:<span class="number">06</span> k8s-n0 kubelet: I1231 <span class="number">17</span>:<span class="number">10</span>:<span class="number">06</span>.<span class="number">753064</span>   <span class="number">18294</span> transport.go:<span class="number">132</span>] certificate rotation detected, shutting down client connections to start using new credentials</span><br></pre></td></tr></tbody></table></figure><p>那么以上就是kubelet证书的整个批准以及证书轮换的过程。</p><h1 id="四、TLS-Bootstrapping总结"><a href="#四、TLS-Bootstrapping总结" class="headerlink" title="四、TLS Bootstrapping总结"></a>四、TLS Bootstrapping总结</h1><p>流程总结</p><ol><li><p>kubelet 首次启动通过加载<code> bootstrap.kubeconfig</code> 中的用户 Token 和 apiserver CA 证书发起首次 CSR 请求，这个 Token 被预先内置在 apiserver 节点的 token.csv(新版本中已经推荐使用Bootstrap Token Secert) 中，其身份为 <code>kubelet-bootstrap</code> 用户和 <code>system:bootstrappers</code> 用户组；想要首次 CSR 请求能成功(成功指的是不会被 apiserver 401 拒绝)，则需要先将 <code>kubelet-bootstrap</code> 用户和 <code>system:node-bootstrapper</code> 内置 ClusterRole 绑定；</p></li><li><p>对于首次 CSR 请求可以手动签发，也可以将 <code>system:bootstrappers</code> 用户组与 <code>approve-node-client-csr</code> ClusterRole 绑定实现自动签发(1.8 之前这个 ClusterRole 需要手动创建，1.8 后 apiserver 自动创建，并更名为 <code>system:certificates.k8s.io:certificatesigningrequests:nodeclient</code>)</p></li><li><p>默认签署的的证书只有 1 年有效期，如果想要调整证书有效期可以通过设置 kube-controller-manager 的 <code>--experimental-cluster-signing-duration</code> 参数实现，该参数默认值为 8760h0m0s</p></li><li><p>对于证书轮换，需要通过协调两个方面实现；第一，想要 kubelet 在证书到期后自动发起续期请求，则需要在 kubelet 启动时增加 <code>--feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true</code> 来实现；第二，想要让 controller manager 自动批准续签的 CSR 请求需要在 controller manager 启动时增加 <code>--feature-gates=RotateKubeletServerCertificate=true</code> 参数，并绑定对应的 RBAC 规则</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;p&gt;本文主要记录一下搭建一个kubelet搭建到加入集群到手动、自动(证书轮换的)证书认证过程, 那么我的环境是用的v1.12.4版本，有一台master,除了master上面的一些组件已经搭建完毕，主要重点是在kubelet上面，所以现在就是master已经工作正常的情况下，加入新的&lt;code&gt;kubelet(worker节点)&lt;/code&gt;需要做一些什么样的操作。&lt;br&gt;然后需要实现的是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过bootstrap token以及boostrap.kubeconfig来引导worker节点申请证书&lt;/li&gt;
&lt;li&gt;如果第一步申请发出去之后，在手动在master端进行手动批准证书申请，然后发放kubelet证书&lt;/li&gt;
&lt;li&gt;实现kubelet证书的自动批准&lt;/li&gt;
&lt;li&gt;实现kubelet证书的自动轮换操作&lt;br&gt;&lt;img src=&quot;/2018/12/30/kubernetes-bootstrapping/start.png&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;简单理一下TLS Bootstrapping的一个引导过程&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;master端创建API Server和Kubelet Client通信凭证即生成 &lt;code&gt;apiserver.pem/apiserver-key.pem/apiserver.csr&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;在集群内创建特定的 Bootstrap Token Secret，该 Secret 将替代以前的 token.csv 内置用户声明文件;&lt;/li&gt;
&lt;li&gt;在集群内创建首次 TLS Bootstrap 申请证书的 ClusterRole 即&lt;code&gt;system:node-bootstrapper&lt;/code&gt;,并将上面的bootstrap token secret进行绑定即 clusterrolebinding &lt;code&gt;kubelet-bootstrap&lt;/code&gt;，这样通过绑定就能以这个内置用户组信息去发起CSR请求啦；&lt;/li&gt;
&lt;li&gt;生成特定的包含 &lt;code&gt;TLS Bootstrapping Token&lt;/code&gt; 的 &lt;code&gt;bootstrap.kubeconfig&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;调整kubelete启动参数，指定引导文件&lt;code&gt;bootstrap.kubeconfig&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;重载配置、重启服务，master端手动批准完成worker节点的CSR请求;&lt;/li&gt;
&lt;li&gt;后续如果没有配置证书轮换的话，就会一直使用由controller-manager批准颁发的证书文件了，有效期是一年。(自动批准&amp;amp;证书轮换下面再说)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然以我的理解要要实现证书轮换那么肯定是没有外界干预的情况下自动执行的，那这个功能也肯定是需要自动批准这个功能的。&lt;/p&gt;
&lt;p&gt;那么自动批准需要做的一些事情却是在手动批准的基础上做了一些操作:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建CSR请求的 TLS Bootstrap 申请证书的renew Kubelet client/server 的 ClusterRole，以及其相关对应的 ClusterRoleBinding；并绑定到对应的组或用户&lt;/li&gt;
&lt;li&gt;调整 Controller Manager 配置，以使其能自动签署相关证书和自动清理过期的 TLS Bootstrapping Token&lt;/li&gt;
&lt;li&gt;可选的: 集群搭建成功后立即清除 Bootstrap Token Secret，或等待 Controller Manager 待其过期后删除，以防止被恶意利用&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;二、手动批准&quot;&gt;&lt;a href=&quot;#二、手动批准&quot; class=&quot;headerlink&quot; title=&quot;二、手动批准&quot;&gt;&lt;/a&gt;二、手动批准&lt;/h1&gt;&lt;h2 id=&quot;2-1-创建API-Server和Kubelet-Client通信凭证&quot;&gt;&lt;a href=&quot;#2-1-创建API-Server和Kubelet-Client通信凭证&quot; class=&quot;headerlink&quot; title=&quot;2.1 创建API Server和Kubelet Client通信凭证&quot;&gt;&lt;/a&gt;2.1 创建API Server和Kubelet Client通信凭证&lt;/h2&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/tags/kubernetes/"/>
    
    <category term="TLS bootstrapping" scheme="https://blog.sctux.cc/tags/TLS-bootstrapping/"/>
    
    <category term="证书手动签发" scheme="https://blog.sctux.cc/tags/%E8%AF%81%E4%B9%A6%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/"/>
    
    <category term="证书自动签发" scheme="https://blog.sctux.cc/tags/%E8%AF%81%E4%B9%A6%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91/"/>
    
    <category term="证书轮换(自动续期)" scheme="https://blog.sctux.cc/tags/%E8%AF%81%E4%B9%A6%E8%BD%AE%E6%8D%A2-%E8%87%AA%E5%8A%A8%E7%BB%AD%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>理解Kubernetes安全的持久化保存键值-Etcd</title>
    <link href="https://blog.sctux.cc/2018/12/23/kubernetes-etcd-secret/"/>
    <id>https://blog.sctux.cc/2018/12/23/kubernetes-etcd-secret/</id>
    <published>2018-12-23T06:47:38.000Z</published>
    <updated>2025-09-01T01:59:08.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>etcd是CoreOS团队于2013年6月发起的开源项目，它的目标是构建一个高可用的分布式键值(key-value)数据库。etcd内部采用raft协议作为一致性算法，etcd基于Go语言实现。</p><p>etcd作为服务发现系统，有以下的特点：</p><p>简单：安装配置简单，而且提供了HTTP API进行交互，使用也很简单<br>安全：支持SSL证书验证<br>快速：根据官方提供的benchmark数据，单实例支持每秒2k+读操作<br>可靠：采用raft算法，实现分布式系统数据的可用性和一致性</p><p>etcd项目地址：<a href="https://github.com/coreos/etcd/">https://github.com/coreos/etcd/</a></p><h2 id="kubernetes中的使用"><a href="#kubernetes中的使用" class="headerlink" title="kubernetes中的使用"></a>kubernetes中的使用</h2><p>目前etcd是作为kubernetes集群当中的存储后端</p><p>在kuernetes中etcd涉及到的安全相关的主要有:</p><ul><li>etcd支持备份恢复机制，防止数据被误删导致数据丢失</li><li>用户的敏感信息建议放在secret类型的资源中，该类型资源是加密存储在etcd中的</li><li>etcd支持https, kube-apiserver访问etcd使用https协议</li></ul><p><img src="/2018/12/23/kubernetes-etcd-secret/etcd.png"></p><p>在kubernetes中的配置:</p><h3 id="Client-Server"><a href="#Client-Server" class="headerlink" title="Client -> Server"></a>Client -&gt; Server</h3><figure class="highlight nsis"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">client-transport-security:</span><br><span class="line">  <span class="comment"># 通道以TLS协议加密</span></span><br><span class="line">  ca-<span class="keyword">file</span>: <span class="string">'/etc/etcd/ssl/etcd-ca.pem'</span></span><br><span class="line">  cert-<span class="keyword">file</span>: <span class="string">'/etc/etcd/ssl/etcd.pem'</span> </span><br><span class="line">  key-<span class="keyword">file</span>: <span class="string">'/etc/etcd/ssl/etcd-key.pem'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 服务端会认证客户端证书是否受信任CA签发</span></span><br><span class="line">  client-cert-auth: <span class="literal">true</span></span><br><span class="line">  trusted-ca-<span class="keyword">file</span>: <span class="string">'/etc/etcd/ssl/etcd-ca.pem'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 是否系统自动生成证书</span></span><br><span class="line">  <span class="literal">auto</span>-tls: <span class="literal">true</span> </span><br></pre></td></tr></tbody></table></figure><h3 id="Server-Server"><a href="#Server-Server" class="headerlink" title="Server -> Server"></a>Server -&gt; Server</h3><figure class="highlight nsis"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">peer-transport-security:</span><br><span class="line">  <span class="comment"># 通道以TLS协议加密</span></span><br><span class="line">  ca-<span class="keyword">file</span>: <span class="string">'/etc/etcd/ssl/etcd-ca.pem'</span></span><br><span class="line">  cert-<span class="keyword">file</span>: <span class="string">'/etc/etcd/ssl/etcd.pem'</span></span><br><span class="line">  key-<span class="keyword">file</span>: <span class="string">'/etc/etcd/ssl/etcd-key.pem'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 服务端会认证客户端证书是否受信任CA签发</span></span><br><span class="line">  peer-client-cert-auth: <span class="literal">true</span></span><br><span class="line">  trusted-ca-<span class="keyword">file</span>: <span class="string">'/etc/etcd/ssl/etcd-ca.pem'</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 是否系统自动生成证书</span></span><br><span class="line">  <span class="literal">auto</span>-tls: <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="etcd的备份"><a href="#etcd的备份" class="headerlink" title="etcd的备份"></a>etcd的备份</h3><p>对于 API 3 备份与恢复方法<br>官方 v3 admin guide<br>在使用 API 3 时需要使用环境变量 ETCDCTL_API 明确指定。<br>在命令行设置：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> <span class="attribute">ETCDCTL_API</span>=3</span><br></pre></td></tr></tbody></table></figure><p>备份数据：</p><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ etcdctl <span class="attr">--endpoints</span>=<span class="selector-attr">[localhost:2379]</span> snapshot save snapshot<span class="selector-class">.db</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>恢复：</p><figure class="highlight pgsql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ etcdctl <span class="keyword">snapshot</span> restore <span class="keyword">snapshot</span>.db <span class="comment">--name m3 --data-dir=/home/etcd_data</span></span><br></pre></td></tr></tbody></table></figure><p>恢复后的文件需要修改权限为 etcd:etcd<br>–name:重新指定一个数据目录，可以不指定，默认为 default.etcd<br>–data-dir：指定数据目录<br>建议使用时不指定 name 但指定 data-dir，并将 data-dir 对应于 etcd 服务中配置的 data-dir</p><p>etcd 集群都是至少 3 台机器，官方也说明了集群容错为 (N-1)/2，所以备份数据一般都是用不到，但是鉴上次 gitlab 出现的问题，对于备份数据也要非常重视。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;etcd是CoreOS团队于2013年6月发起的开源项目，它的目标是构建一个高可用的分布式键值(key-value)数据库。etcd内部采用raft协议作为一致性算法，etcd基于Go语言实现。&lt;/p&gt;
&lt;p&gt;etcd作为服务发现系统，有以下的特点：&lt;/p&gt;
&lt;p&gt;简单：安装配置简单，而且提供了HTTP API进行交互，使用也很简单&lt;br&gt;安全：支持SSL证书验证&lt;br&gt;快速：根据官方提供的benchmark数据，单实例支持每秒2k+读操作&lt;br&gt;可靠：采用raft算法，实现分布式系统数据的可用性和一致性&lt;/p&gt;
&lt;p&gt;etcd项目地址：&lt;a href=&quot;https://github.com/coreos/etcd/&quot;&gt;https://github.com/coreos/etcd/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;kubernetes中的使用&quot;&gt;&lt;a href=&quot;#kubernetes中的使用&quot; class=&quot;headerlink&quot; title=&quot;kubernetes中的使用&quot;&gt;&lt;/a&gt;kubernetes中的使用&lt;/h2&gt;&lt;p&gt;目前etcd是作为kubernetes集群当中的存储后端&lt;/p&gt;
&lt;p&gt;在kuernetes中etcd涉及到的安全相关的主要有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;etcd支持备份恢复机制，防止数据被误删导致数据丢失&lt;/li&gt;
&lt;li&gt;用户的敏感信息建议放在secret类型的资源中，该类型资源是加密存储在etcd中的&lt;/li&gt;
&lt;li&gt;etcd支持https, kube-apiserver访问etcd使用https协议&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2018/12/23/kubernetes-etcd-secret/etcd.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/tags/kubernetes/"/>
    
    <category term="etcd cluster" scheme="https://blog.sctux.cc/tags/etcd-cluster/"/>
    
    <category term="etcd secret" scheme="https://blog.sctux.cc/tags/etcd-secret/"/>
    
  </entry>
  
  <entry>
    <title>理解kubernetes中的静态Pod</title>
    <link href="https://blog.sctux.cc/2018/12/22/kubernetes-static-pod/"/>
    <id>https://blog.sctux.cc/2018/12/22/kubernetes-static-pod/</id>
    <published>2018-12-22T03:02:30.000Z</published>
    <updated>2025-09-01T01:59:08.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>今儿是冬至，尽管如此，学习的脚步还是不能停下，今天学习实践一下kubernetes中的静态pod是什么？</p><p>我们知道在前面Pod的声明周期管理都是通过像DaemonSet、StatefulSet、Deployment这种方式创建管理的，而官方文档介绍了一种特殊的pod就是静态Pod，</p><h2 id="什么是静态Pod"><a href="#什么是静态Pod" class="headerlink" title="什么是静态Pod"></a>什么是静态Pod</h2><p>静态Pod是由kubelet进行管理，仅存在于特定Node上的Pod。它们不能通过API Server进行管理，无法与ReplicationController、Deployment或DaemonSet进行关联，并且kubelet也无法对其健康检查。</p><h3 id="静态Pod的创建"><a href="#静态Pod的创建" class="headerlink" title="静态Pod的创建:"></a>静态Pod的创建:</h3><p>静态pod可以通过两种方式创建：使用配置文件或HTTP。</p><h4 id="通过配置文件创建"><a href="#通过配置文件创建" class="headerlink" title="通过配置文件创建"></a>通过配置文件创建</h4><p>配置文件只是特定目录中json或yaml格式的标准pod定义。他通过在kubelet守护进程中添加配置参数<code>--pod-manifest-path=&lt;the directory&gt;</code> 来运行静态Pod，kubelet经常会它定期扫描目录；</p><p>例如，如何将一个简单web服务作为静态pod启动</p><p>选择运行静态pod的节点服务器<br>不一定是node节点，只要有kubelet进程所在的节点都可以运行静态pod</p><p>我在某个节点上创建一个放置一个Web服务器pod定义的描述文件文件夹，例如/etc/kubelet.d/static-web.yaml</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir <span class="operator">/</span>etc<span class="operator">/</span>kubelet.d<span class="symbol">/</span></span><br><span class="line">$ cat <span class="operator">&lt;</span><span class="operator">&lt;</span>EOF <span class="operator">&gt;</span><span class="symbol">/etc/kubelet.d/static-web.yaml</span></span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Pod</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> static-web</span><br><span class="line">  <span class="params">labels:</span></span><br><span class="line">    <span class="params">role:</span> myrole</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">containers:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">name:</span> web</span><br><span class="line">      <span class="params">image:</span> nginx</span><br><span class="line">      <span class="params">ports:</span></span><br><span class="line">        <span class="operator">-</span> <span class="params">name:</span> web</span><br><span class="line">          <span class="params">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="params">protocol:</span> TCP</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ ls <span class="operator">/</span>etc<span class="operator">/</span>kubelet.d<span class="symbol">/</span></span><br><span class="line">static-web.yaml</span><br></pre></td></tr></tbody></table></figure><p>通过使用–pod-manifest-path=/etc/kubelet.d/参数运行它，在节点上配置我的kubelet守护程序以使用此目录。<br>比如我这里kubelet启动参数位于/etc/systemd/system/kubelet.service.d/10-kubelet.conf, 修改配置，然后将参数加入到现有参数配置项中(安装方式不尽相同，但是道理一样)</p><figure class="highlight vim"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">vim</span> /etc/systemd/<span class="built_in">system</span>/kubelet.service.d/<span class="number">10</span>-kubelet.<span class="keyword">conf</span></span><br><span class="line">······</span><br><span class="line">······</span><br><span class="line">Environment=<span class="string">"KUBELET_EXTRA_ARGS=--cluster-dns=10.96.0.10 --cluster-domain=cluster.local --pod-manifest-path=/etc/kubelet.d/"</span></span><br><span class="line">······</span><br><span class="line">······</span><br></pre></td></tr></tbody></table></figure><p>保存退出，reload一下systemd daeomon ,重启kubelet服务进程</p><figure class="highlight crystal"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>systemctl daemon-reload</span><br><span class="line"><span class="variable">$ </span>systemctl restart kubelet</span><br></pre></td></tr></tbody></table></figure><p>前面说啦，当kubelet启动时，它会自动启动在指定的目录–pod-manifest-path=或–manifest-url=参数中定义的所有pod ，即我们的static-web。<br>再该节点上检查是否创建成功：</p><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -o wide</span><br><span class="line">NAME                READY     STATUS    RESTARTS   AGE       IP            <span class="keyword">NODE</span>    </span><br><span class="line"><span class="title">static-web-k8s-m1</span>   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">2m</span>        <span class="number">10.244</span>.<span class="number">2.32</span>   k8s-m1</span><br></pre></td></tr></tbody></table></figure><p>上面也提到了，他不归任何部署方式来管理，即使我们尝试kubelet命令去删除</p><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete pod static-web-k8s-m1</span><br><span class="line">pod <span class="string">"static-web-k8s-m1"</span> deleted</span><br><span class="line">$ kubectl get pods -o wide</span><br><span class="line">NAME                READY     STATUS    RESTARTS   AGE       IP        <span class="keyword">NODE</span>      <span class="title">NOMINATED</span> <span class="keyword">NODE</span></span><br><span class="line"><span class="title">static-web-k8s-m1</span>   <span class="number">0</span>/<span class="number">1</span>       Pending   <span class="number">0</span>          <span class="number">2s</span>        <span class="tag">&lt;none&gt;</span>    k8s-m1    <span class="tag">&lt;none&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>可以看出静态pod通过这种方式是没法删除的</p><p>那我如何去删除或者说是动态的添加一个pod呢？<br>这种机制已经知道，kubelet进程会定期扫描配置的目录（/etc/kubelet.d在我的示例）以进行更改，并在文件出现/消失在此目录中时添加/删除pod。</p><h4 id="通过url来创建"><a href="#通过url来创建" class="headerlink" title="通过url来创建:"></a>通过url来创建:</h4><p>例如，我在这个<a href="https://blog.sctux.com/kubernetes/yaml/static-pod.json">url</a>放置了一个pod创建的描述文件</p><p>那么上面提到了如何修改？通过url来创建的？就是kubelet启动配置参数中配置<code>--manifest-url</code>指向即可</p><p><img src="/2018/12/22/kubernetes-static-pod/static-pod-from-url.png" alt="static-pod-from-url"></p><p>ok 以上就是如何创建静态Pod的具体食用方法，那什么场景需要用到它，这个我个人觉得还是因人或因环境而已，毕竟kubernetes开发出了这个功能，就说明有用武之地的。</p><p>同时在kubelet-conf.yml可以指定直接指定这个StaticPod的描述文件存放目录:</p><figure class="highlight asciidoc"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat kubelet-conf.yml</span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code">staticPodPath: /etc/kubernetes/manifests</span></span><br><span class="line"><span class="code">......</span></span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><p>但是还是需要在启动参数中配置 <code>--pod-manifest-path</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;今儿是冬至，尽管如此，学习的脚步还是不能停下，今天学习实践一下kubernetes中的静态pod是什么？&lt;/p&gt;
&lt;p&gt;我们知道在前面Pod的声明周期管理都是通过像DaemonSet、StatefulSet、Deployment这种方式创建管理的，而官方文档介绍了一种特殊的pod就是静态Pod，&lt;/p&gt;
&lt;h2 id=&quot;什么是静态Pod&quot;&gt;&lt;a href=&quot;#什么是静态Pod&quot; class=&quot;headerlink&quot; title=&quot;什么是静态Pod&quot;&gt;&lt;/a&gt;什么是静态Pod&lt;/h2&gt;&lt;p&gt;静态Pod是由kubelet进行管理，仅存在于特定Node上的Pod。它们不能通过API Server进行管理，无法与ReplicationController、Deployment或DaemonSet进行关联，并且kubelet也无法对其健康检查。&lt;/p&gt;
&lt;h3 id=&quot;静态Pod的创建&quot;&gt;&lt;a href=&quot;#静态Pod的创建&quot; class=&quot;headerlink&quot; title=&quot;静态Pod的创建:&quot;&gt;&lt;/a&gt;静态Pod的创建:&lt;/h3&gt;&lt;p&gt;静态pod可以通过两种方式创建：使用配置文件或HTTP。&lt;/p&gt;
&lt;h4 id=&quot;通过配置文件创建&quot;&gt;&lt;a href=&quot;#通过配置文件创建&quot; class=&quot;headerlink&quot; title=&quot;通过配置文件创建&quot;&gt;&lt;/a&gt;通过配置文件创建&lt;/h4&gt;&lt;p&gt;配置文件只是特定目录中json或yaml格式的标准pod定义。他通过在kubelet守护进程中添加配置参数&lt;code&gt;--pod-manifest-path=&amp;lt;the directory&amp;gt;&lt;/code&gt; 来运行静态Pod，kubelet经常会它定期扫描目录；&lt;/p&gt;
&lt;p&gt;例如，如何将一个简单web服务作为静态pod启动&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/tags/kubernetes/"/>
    
    <category term="Static Pod" scheme="https://blog.sctux.cc/tags/Static-Pod/"/>
    
  </entry>
  
  <entry>
    <title>理解kubernetes中的Secret</title>
    <link href="https://blog.sctux.cc/2018/12/20/kubernetes-secret/"/>
    <id>https://blog.sctux.cc/2018/12/20/kubernetes-secret/</id>
    <published>2018-12-20T14:50:30.000Z</published>
    <updated>2025-09-01T01:59:08.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Secret对象与ConfigMap对象类似，但它主要用于存储以下敏感信息，例如密码，OAuth token和SSH key等等。将这些信息存储在secret中，和直接存储在Pod的定义中，或Docker镜像定义中相比，更加安全和灵活。</p><p>kuberntes中内置了三种secret类型:</p><ul><li><code>Opaque</code>：使用base64编码存储信息，可以通过base64 –decode解码获得原始数据，因此安全性弱。</li><li><code>kubernetes.io/dockerconfigjson</code>：用于存储docker registry的认证信息。</li><li><code>kubernetes.io/service-account-token</code>：用于被 serviceaccount 引用。serviceaccout 创建时 Kubernetes 会默认创建对应的 secret。Pod 如果使用了 serviceaccount，对应的 secret 会自动挂载到 Pod 的 /run/secrets/kubernetes.io/serviceaccount 目录中。(<a href="https://blog.sctux.com/2018/12/16/kubernetes-auth/">前面博文</a>记录过实践后的食用方法)</li></ul><h1 id="Opaque-Secret"><a href="#Opaque-Secret" class="headerlink" title="Opaque Secret"></a>Opaque Secret</h1><p>Opaque类型的Secret，其value为base64编码后的值。</p><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><h3 id="从文件中创建Secret"><a href="#从文件中创建Secret" class="headerlink" title="从文件中创建Secret"></a>从文件中创建Secret</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> -n <span class="string">"admin"</span> &gt; ./username.txt</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> -n <span class="string">"1f2d1e2e67df"</span> &gt; ./password.txt</span></span><br></pre></td></tr></tbody></table></figure><p>使用kubectl create secret命令创建secret：</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">$ kubectl create secret generic db-user-passwd <span class="operator">-</span>-from-file<span class="operator">=</span><span class="symbol">./username.txt</span> <span class="operator">-</span>-from-file<span class="operator">=</span><span class="symbol">./password.txt</span></span><br><span class="line">secret <span class="string">"db-user-passwd"</span> created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看创建结果</span></span><br><span class="line">$ kubectl get secrets db-user-passwd</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">data:</span></span><br><span class="line">  password.<span class="params">txt:</span> MWYyZDFlMmU2N2Rm</span><br><span class="line">  username.<span class="params">txt:</span> YWRtaW4<span class="operator">=</span></span><br><span class="line"><span class="params">kind:</span> Secret</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">creationTimestamp:</span> <span class="number">201</span>8-<span class="number">1</span>2-<span class="number">21</span>T08:<span class="number">58</span>:<span class="number">33</span>Z</span><br><span class="line">  <span class="params">name:</span> db-user-passwd</span><br><span class="line">  <span class="params">namespace:</span> default</span><br><span class="line">  <span class="params">resourceVersion:</span> <span class="string">"57310"</span></span><br><span class="line">  <span class="params">selfLink:</span> <span class="symbol">/api/v1/namespaces/default/secrets/db-user-passwd</span></span><br><span class="line">  <span class="params">uid:</span> <span class="number">9848894</span>7-<span class="number">04</span>fe-<span class="number">11</span>e9-<span class="number">97</span>cd-<span class="number">00505621</span>dd5b</span><br><span class="line"><span class="params">type:</span> Opaque</span><br></pre></td></tr></tbody></table></figure><h3 id="使用描述文件创建Secret"><a href="#使用描述文件创建Secret" class="headerlink" title="使用描述文件创建Secret"></a>使用描述文件创建Secret</h3><p>首先使用base64对数据进行编码：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> -n <span class="string">"admin"</span> | <span class="built_in">base64</span></span></span><br><span class="line">YWRtaW4=</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> -n <span class="string">"1f2d1e2e67df"</span> | <span class="built_in">base64</span></span></span><br><span class="line">MWYyZDFlMmU2N2Rm</span><br></pre></td></tr></tbody></table></figure><p>创建一个类型为Secret的描述文件：</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="operator">&gt;</span><span class="operator">&gt;</span> secret.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Secret</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> mysecret</span><br><span class="line"><span class="params">type:</span> Opaque</span><br><span class="line"><span class="params">data:</span></span><br><span class="line">  <span class="params">username:</span> YWRtaW4<span class="operator">=</span></span><br><span class="line">  <span class="params">password:</span> MWYyZDFlMmU2N2Rm</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">$ kubectl create <span class="operator">-</span>f secret.yaml </span><br><span class="line">secret<span class="symbol">/mysecret</span> created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看创建结果</span></span><br><span class="line">$ kubectl get secrets mysecret <span class="operator">-</span>o yaml</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">data:</span></span><br><span class="line">  <span class="params">password:</span> MWYyZDFlMmU2N2Rm</span><br><span class="line">  <span class="params">username:</span> YWRtaW4<span class="operator">=</span></span><br><span class="line"><span class="params">kind:</span> Secret</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">creationTimestamp:</span> <span class="number">201</span>8-<span class="number">1</span>2-<span class="number">21</span>T09:<span class="number">03</span>:<span class="number">52</span>Z</span><br><span class="line">  <span class="params">name:</span> mysecret</span><br><span class="line">  <span class="params">namespace:</span> default</span><br><span class="line">  <span class="params">resourceVersion:</span> <span class="string">"57767"</span></span><br><span class="line">  <span class="params">selfLink:</span> <span class="symbol">/api/v1/namespaces/default/secrets/mysecret</span></span><br><span class="line">  <span class="params">uid:</span> <span class="number">564</span>bd4da-<span class="number">04</span>ff-<span class="number">11</span>e9-<span class="number">97</span>cd-<span class="number">00505621</span>dd5b</span><br><span class="line"><span class="params">type:</span> Opaque</span><br></pre></td></tr></tbody></table></figure><h2 id="食用方式"><a href="#食用方式" class="headerlink" title="食用方式"></a>食用方式</h2><p>创建好Secret之后，可以通过两种方式食用：</p><ul><li>以Volume方式</li><li>以环境变量方式</li></ul><h3 id="将-Secret-挂载到-Volume-中"><a href="#将-Secret-挂载到-Volume-中" class="headerlink" title="将 Secret 挂载到 Volume 中"></a>将 Secret 挂载到 Volume 中</h3><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="operator">&gt;</span><span class="operator">&gt;</span> redis-pod.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Pod</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> redis</span><br><span class="line">  <span class="params">labels:</span></span><br><span class="line">    <span class="params">app:</span> redis</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">nodeName:</span> k8s-m1</span><br><span class="line">  <span class="params">containers:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">name:</span> container-<span class="number">0</span></span><br><span class="line">    <span class="params">image:</span> redis</span><br><span class="line">    <span class="params">imagePullPolicy:</span> IfNotPresent</span><br><span class="line">    <span class="params">volumeMounts:</span></span><br><span class="line">      <span class="operator">-</span> <span class="params">name:</span> foo</span><br><span class="line">        <span class="params">mountPath:</span> <span class="symbol">/etc/foo</span></span><br><span class="line">        <span class="params">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="params">volumes:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">name:</span> foo</span><br><span class="line">      <span class="params">secret:</span></span><br><span class="line">        <span class="params">secretName:</span> db-user-passwd</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ 创建:</span><br><span class="line">$ kubectl create <span class="operator">-</span>f redis-pod.yaml</span><br><span class="line">pod<span class="symbol">/redis</span> created</span><br></pre></td></tr></tbody></table></figure><p>进入容器检查</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l /etc/foo/</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 19 Dec 21 09:14 password.txt -&gt; ..data/password.txt</span><br><span class="line">lrwxrwxrwx 1 root root 19 Dec 21 09:14 username.txt -&gt; ..data/username.txt</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/foo/username.txt</span> </span><br><span class="line">admin</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/foo/password.txt</span> </span><br><span class="line">1f2d1e2e67df </span><br></pre></td></tr></tbody></table></figure><p>也可以只挂载Secret中特定的key：</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="operator">&gt;</span><span class="operator">&gt;</span> redis-pod2.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Pod</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> redis2</span><br><span class="line">  <span class="params">labels:</span></span><br><span class="line">    <span class="params">app:</span> redis</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">nodeName:</span> k8s-m1</span><br><span class="line">  <span class="params">containers:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">name:</span> redis</span><br><span class="line">    <span class="params">image:</span> redis</span><br><span class="line">    <span class="params">imagePullPolicy:</span> IfNotPresent</span><br><span class="line">    <span class="params">volumeMounts:</span></span><br><span class="line">      <span class="operator">-</span> <span class="params">name:</span> foo</span><br><span class="line">        <span class="params">mountPath:</span> <span class="symbol">/etc/foo</span></span><br><span class="line">        <span class="params">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="params">volumes:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">name:</span> foo</span><br><span class="line">      <span class="params">secret:</span></span><br><span class="line">        <span class="params">secretName:</span> mysecret</span><br><span class="line">        <span class="params">items:</span></span><br><span class="line">          <span class="operator">-</span> <span class="params">key:</span> username</span><br><span class="line">            <span class="params">path:</span> my-group<span class="symbol">/my-username</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">$ kubectl create <span class="operator">-</span>f redis-pod2.yaml </span><br><span class="line">pod<span class="symbol">/redis2</span> created</span><br></pre></td></tr></tbody></table></figure><p>进入容器检查</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> -it redis5 /bin/bash</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -l /etc/foo/my-group/my-username</span> </span><br><span class="line">-rw-r--r-- 1 root root 5 Dec 21 10:26 /etc/foo/my-group/my-username</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/foo/my-group/my-username</span></span><br><span class="line">admin</span><br></pre></td></tr></tbody></table></figure><p>在这种情况下：</p><p>username 存储在/etc/foo/my-group/my-username中<br>password未被挂载<br><code>注意</code>: 指定key的这种挂载方式只适用于是通过使用描述文件创建的Secret,从文件中创建的那种Secret挂载会报错:</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ 当我挂载<span class="built_in"> Secret </span>db-user-passwd 的时候pod创建事件:</span><br><span class="line">Events:</span><br><span class="line"> <span class="built_in"> Type </span>    Reason       Age               <span class="keyword">From</span>             Message</span><br><span class="line">  ----     ------       ----              ----             -------</span><br><span class="line">  <span class="built_in">Warning</span>  FailedMount  5s (x5 over 12s)  kubelet, k8s-m1  MountVolume.SetUp failed <span class="keyword">for</span> volume <span class="string">"foo"</span> : references non-existent<span class="built_in"> secret </span>key</span><br></pre></td></tr></tbody></table></figure><p>具体原因目前无解<del>,有知道的大哥可以评论留言告知一二，谢谢</del></p><h3 id="将-Secret-导出到环境变量中"><a href="#将-Secret-导出到环境变量中" class="headerlink" title="将 Secret 导出到环境变量中"></a>将 Secret 导出到环境变量中</h3><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="operator">&gt;</span><span class="operator">&gt;</span> redis3.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Pod</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> redis3</span><br><span class="line">  <span class="params">labels:</span></span><br><span class="line">    <span class="params">app:</span> redis</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">nodeName:</span> k8s-m1</span><br><span class="line">  <span class="params">containers:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">name:</span> redis</span><br><span class="line">    <span class="params">image:</span> redis</span><br><span class="line">    <span class="params">imagePullPolicy:</span> IfNotPresent</span><br><span class="line">    <span class="params">env:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">name:</span> SECRET_USERNAME</span><br><span class="line">      <span class="params">valueFrom:</span></span><br><span class="line">        <span class="params">secretKeyRef:</span></span><br><span class="line">          <span class="params">name:</span> mysecret</span><br><span class="line">          <span class="params">key:</span> username</span><br><span class="line">    <span class="operator">-</span> <span class="params">name:</span> SECRET_PASSWORD</span><br><span class="line">      <span class="params">valueFrom:</span></span><br><span class="line">        <span class="params">secretKeyRef:</span></span><br><span class="line">          <span class="params">name:</span> mysecret</span><br><span class="line">          <span class="params">key:</span> password</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器查看结果</span></span><br><span class="line">$ kubectl exec <span class="operator">-</span>it redis3 <span class="symbol">/bin/bash</span></span><br><span class="line">$ echo $SECRET_USERNAME</span><br><span class="line">admin</span><br><span class="line">$ echo $SECRET_PASSWORD</span><br><span class="line"><span class="number">1</span>f2d1e2e67df</span><br></pre></td></tr></tbody></table></figure><p>ok , 通过不同方式挂载进容器中，我们的应用程序就可以拿来用啦，具体选择哪种方式挂载还是需要看实际环境；<br>好啦，以上就是Secret的简单食用方法，更多可以看<a href="https://kubernetes.io/docs/concepts/configuration/secret/">官方文档</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Secret对象与ConfigMap对象类似，但它主要用于存储以下敏感信息，例如密码，OAuth token和SSH key等等。将这些信息存储在secret中，和直接存储在Pod的定义中，或Docker镜像定义中相比，更加安全和灵活。&lt;/p&gt;
&lt;p&gt;kuberntes中内置了三种secret类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Opaque&lt;/code&gt;：使用base64编码存储信息，可以通过base64 –decode解码获得原始数据，因此安全性弱。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubernetes.io/dockerconfigjson&lt;/code&gt;：用于存储docker registry的认证信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubernetes.io/service-account-token&lt;/code&gt;：用于被 serviceaccount 引用。serviceaccout 创建时 Kubernetes 会默认创建对应的 secret。Pod 如果使用了 serviceaccount，对应的 secret 会自动挂载到 Pod 的 /run/secrets/kubernetes.io/serviceaccount 目录中。(&lt;a href=&quot;https://blog.sctux.com/2018/12/16/kubernetes-auth/&quot;&gt;前面博文&lt;/a&gt;记录过实践后的食用方法)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Opaque-Secret&quot;&gt;&lt;a href=&quot;#Opaque-Secret&quot; class=&quot;headerlink&quot; title=&quot;Opaque Secret&quot;&gt;&lt;/a&gt;Opaque Secret&lt;/h1&gt;&lt;p&gt;Opaque类型的Secret，其value为base64编码后的值。&lt;/p&gt;
&lt;h2 id=&quot;创建方式&quot;&gt;&lt;a href=&quot;#创建方式&quot; class=&quot;headerlink&quot; title=&quot;创建方式&quot;&gt;&lt;/a&gt;创建方式&lt;/h2&gt;&lt;h3 id=&quot;从文件中创建Secret&quot;&gt;&lt;a href=&quot;#从文件中创建Secret&quot; class=&quot;headerlink&quot; title=&quot;从文件中创建Secret&quot;&gt;&lt;/a&gt;从文件中创建Secret&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&quot;admin&quot;&lt;/span&gt; &amp;gt; ./username.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&quot;1f2d1e2e67df&quot;&lt;/span&gt; &amp;gt; ./password.txt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用kubectl create secret命令创建secret：&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/categories/kubernetes/"/>
    
    
    <category term="kuberntes" scheme="https://blog.sctux.cc/tags/kuberntes/"/>
    
    <category term="secret" scheme="https://blog.sctux.cc/tags/secret/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes容器存活探测&amp;应用自恢复</title>
    <link href="https://blog.sctux.cc/2018/12/18/kubernetes-liveness/"/>
    <id>https://blog.sctux.cc/2018/12/18/kubernetes-liveness/</id>
    <published>2018-12-18T15:12:40.000Z</published>
    <updated>2025-09-01T01:59:08.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>当你使用kuberentes的时候，有没有遇到过Pod在启动后一会就挂掉然后又重新启动这样的恶性循环？<br>你有没有想过kubernetes是如何检测pod是否还存活？<br>虽然容器已经启动，但是kubernetes如何知道容器的进程是否准备好对外提供服务了呢？</p><p>本博文主要记录实践如何配置容器的存活和就绪探针。</p><p><strong>liveness probe（存活探针）</strong><br>用于判断容器是否存活，即Pod是否为running状态，如果LivenessProbe探针探测到容器不健康，则kubelet将kill掉容器，并根据容器的重启策略是否重启，如果一个容器不包含LivenessProbe探针，则Kubelet认为容器的LivenessProbe探针的返回值永远成功。</p><p><strong>readiness probe（就绪探针）</strong><br>用于判断容器是否启动完成，即容器的Ready是否为True，可以接收请求，如果ReadinessProbe探测失败，则容器的Ready将为False，控制器将此Pod的Endpoint从对应的service的Endpoint列表中移除，从此不再将任何请求调度此Pod上，直到下次探测成功。</p><p><strong>每类探针都支持三种探测方法</strong></p><ul><li>exec：通过执行命令来检查服务是否正常，针对复杂检测或无HTTP接口的服务，命令返回值为0则表示容器健康。</li><li>httpGet：通过发送http请求检查服务是否正常，返回200-399状态码则表明容器健康。</li><li>tcpSocket：通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康。</li></ul><p>每种方式都可以定义在readiness 或者liveness 中。比如定义readiness 中http get 就是意思说如果我定义的这个path的http get 请求返回200-400以外的http code 就把我从所有有我的服务里面删了吧，如果定义在liveness里面就是把我kill 了。<br>注意，liveness不会重启pod，pod是否会重启由你的restart policy 控制。</p><p><strong>探针探测的结果有以下三者之一</strong></p><ul><li>Success：Container通过了检查。</li><li>Failure：Container未通过检查。</li><li>Unknown：未能执行检查，因此不采取任何措施。</li></ul><p><strong>重启策略</strong></p><ul><li>Always: 总是重启</li><li>OnFailure: 如果失败就重启</li><li>Never: 永远不重启</li></ul><h2 id="LivenessProbe探针配置"><a href="#LivenessProbe探针配置" class="headerlink" title="LivenessProbe探针配置"></a>LivenessProbe探针配置</h2><h3 id="示例一-通过exec方式做健康探测"><a href="#示例一-通过exec方式做健康探测" class="headerlink" title="示例一: 通过exec方式做健康探测"></a>示例一: 通过exec方式做健康探测</h3><figure class="highlight nestedtext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">exec-liveness.yaml  </span></span><br><span class="line"><span class="attribute">apiVersion</span><span class="punctuation">:</span> <span class="string">v1</span></span><br><span class="line"><span class="attribute">kind</span><span class="punctuation">:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attribute">metadata</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">labels</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">test</span><span class="punctuation">:</span> <span class="string">liveness</span></span><br><span class="line">  <span class="attribute">name</span><span class="punctuation">:</span> <span class="string">liveness-exec</span></span><br><span class="line"><span class="attribute">spec</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">containers</span><span class="punctuation">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">name: liveness</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">k8s.gcr.io/busybox  </span></span><br><span class="line">    <span class="attribute">args</span><span class="punctuation">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600</span></span><br><span class="line">    <span class="attribute">livenessProbe</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">exec</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">command</span><span class="punctuation">:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/tmp/healthy</span></span><br><span class="line">      <span class="attribute">initialDelaySeconds</span><span class="punctuation">:</span> <span class="string">5</span></span><br><span class="line">      <span class="attribute">periodSeconds</span><span class="punctuation">:</span> <span class="string">5</span></span><br></pre></td></tr></tbody></table></figure><p>在该配置文件中，对容器执行livenessProbe检查，periodSeconds字段指定kubelet每5s执行一次检查，检查的命令为cat /tmp/healthy，initialDelaySeconds字段告诉kubelet应该在执行第一次检查之前等待5秒，<br>如果命令执行成功，则返回0，那么kubelet就认为容器是健康的，如果为非0，则Kubelet会Kill掉容器并根据重启策略来决定是否需要重启(kubernetes默认为POD配置的重启策略为Always)</p><p>当容器启动时，它会执行以下命令：</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/bin/</span>sh -c <span class="string">"touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600"</span></span><br></pre></td></tr></tbody></table></figure><p>对于容器的前30秒，有一个/tmp/healthy文件。因此，在前30秒内，该命令cat /tmp/healthy返回成功代码。30秒后，cat /tmp/healthy返回失败代码。</p><p>在30秒内，查看Pod事件：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="keyword">describe</span> pod liveness<span class="operator">-</span><span class="keyword">exec</span></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age               <span class="keyword">From</span>               Message</span><br><span class="line">  <span class="comment">----     ------     ----              ----               -------</span></span><br><span class="line">  Normal   Scheduled  <span class="number">15</span>m               <span class="keyword">default</span><span class="operator">-</span>scheduler  Successfully assigned <span class="keyword">default</span><span class="operator">/</span>liveness<span class="operator">-</span><span class="keyword">exec</span> <span class="keyword">to</span> k8s<span class="operator">-</span>m3</span><br><span class="line">  Normal   Pulled     <span class="number">3</span>m (x3 <span class="keyword">over</span> <span class="number">5</span>m)   kubelet, k8s<span class="operator">-</span>m3    Successfully pulled image "k8s.gcr.io/busybox"</span><br><span class="line">  Normal   Created    <span class="number">3</span>m (x3 <span class="keyword">over</span> <span class="number">5</span>m)   kubelet, k8s<span class="operator">-</span>m3    Created container</span><br><span class="line">  Normal   Started    <span class="number">3</span>m (x3 <span class="keyword">over</span> <span class="number">5</span>m)   kubelet, k8s<span class="operator">-</span>m3    Started container</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在30秒后，查看Pod事件：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="keyword">describe</span> pod liveness<span class="operator">-</span><span class="keyword">exec</span></span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age              <span class="keyword">From</span>               Message</span><br><span class="line">  <span class="comment">----     ------     ----             ----               -------</span></span><br><span class="line">  Normal   Scheduled  <span class="number">16</span>m              <span class="keyword">default</span><span class="operator">-</span>scheduler  Successfully assigned <span class="keyword">default</span><span class="operator">/</span>liveness<span class="operator">-</span><span class="keyword">exec</span> <span class="keyword">to</span> k8s<span class="operator">-</span>m3</span><br><span class="line">  Normal   Pulled     <span class="number">5</span>m (x3 <span class="keyword">over</span> <span class="number">7</span>m)  kubelet, k8s<span class="operator">-</span>m3    Successfully pulled image "k8s.gcr.io/busybox"</span><br><span class="line">  Normal   Created    <span class="number">5</span>m (x3 <span class="keyword">over</span> <span class="number">7</span>m)  kubelet, k8s<span class="operator">-</span>m3    Created container</span><br><span class="line">  Normal   Started    <span class="number">5</span>m (x3 <span class="keyword">over</span> <span class="number">7</span>m)  kubelet, k8s<span class="operator">-</span>m3    Started container</span><br><span class="line">  Warning  Unhealthy  <span class="number">4</span>m (x9 <span class="keyword">over</span> <span class="number">7</span>m)  kubelet, k8s<span class="operator">-</span>m3    Liveness probe failed: cat: can<span class="string">'t open '</span><span class="operator">/</span>tmp<span class="operator">/</span>healthy<span class="string">': No such file or directory</span></span><br><span class="line"><span class="string">  Normal   Pulling    4m (x4 over 7m)  kubelet, k8s-m3    pulling image "k8s.gcr.io/busybox"</span></span><br><span class="line"><span class="string">  Normal   Killing    2m (x4 over 6m)  kubelet, k8s-m3    Killing container with id docker://liveness:Container failed liveness probe.. Container will be killed and recreated.</span></span><br></pre></td></tr></tbody></table></figure><p>再等30秒，确认Container已重新启动, 下面输出中RESTARTS的次数已增加：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="keyword">get</span> pod liveness<span class="operator">-</span><span class="keyword">exec</span></span><br><span class="line">NAME            READY     STATUS    RESTARTS   AGE</span><br><span class="line">liveness<span class="operator">-</span><span class="keyword">exec</span>   <span class="number">1</span><span class="operator">/</span><span class="number">1</span>       <span class="keyword">Running</span>   <span class="number">1</span>          <span class="number">1</span>m</span><br></pre></td></tr></tbody></table></figure><h3 id="示例二-通过HTTP方式做健康探测"><a href="#示例二-通过HTTP方式做健康探测" class="headerlink" title="示例二: 通过HTTP方式做健康探测"></a>示例二: 通过HTTP方式做健康探测</h3><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Pod</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">labels:</span></span><br><span class="line">    <span class="params">test:</span> liveness</span><br><span class="line">  <span class="params">name:</span> liveness-http</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">containers:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">name:</span> liveness</span><br><span class="line">    <span class="params">image:</span> k8s.gcr.io<span class="symbol">/liveness</span> <span class="comment"># 官方用户测试的demo镜像</span></span><br><span class="line">    <span class="params">args:</span></span><br><span class="line">    <span class="operator">-</span> <span class="symbol">/server</span></span><br><span class="line">    <span class="params">livenessProbe:</span></span><br><span class="line">      <span class="params">httpGet:</span></span><br><span class="line">        <span class="params">path:</span> <span class="symbol">/healthz</span></span><br><span class="line">        <span class="params">port:</span> <span class="number">8080</span></span><br><span class="line">        <span class="params">httpHeaders:</span></span><br><span class="line">        <span class="operator">-</span> <span class="params">name:</span> X-Custom-Header</span><br><span class="line">          <span class="params">value:</span> Awesome</span><br><span class="line">      <span class="params">initialDelaySeconds:</span> <span class="number">3</span> </span><br><span class="line">      <span class="params">periodSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><p>在配置文件中，使用k8s.gcr.io/liveness镜像，创建出一个Pod，其中periodSeconds字段指定kubelet每3秒执行一次探测，initialDelaySeconds字段告诉kubelet延迟等待3秒，探测方式为向容器中运行的服务发送HTTP GET请求，请求8080端口下的/healthz, 任何大于或等于200且小于400的代码表示成功。任何其他代码表示失败。</p><p>10秒后，查看Pod事件以验证liveness探测失败并且Container已重新启动：</p><figure class="highlight fortran"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe pod liveness-http</span><br><span class="line"><span class="keyword">NAME</span>            READY     <span class="keyword">STATUS</span>             RESTARTS   AGE</span><br><span class="line">liveness-http   <span class="number">1</span>/<span class="number">1</span>       RUNNING            <span class="number">1</span>          <span class="number">1</span>m</span><br></pre></td></tr></tbody></table></figure><p>httpGet探测方式有如下可选的控制字段</p><ul><li>host：要连接的主机名，默认为Pod IP，可以在http request head中设置host头部。</li><li>scheme: 用于连接host的协议，默认为HTTP。</li><li>path：http服务器上的访问URI。</li><li>httpHeaders：自定义HTTP请求headers，HTTP允许重复headers。</li><li>port： 容器上要访问端口号或名称。</li></ul><h3 id="示例三：通过TCP方式做健康探测"><a href="#示例三：通过TCP方式做健康探测" class="headerlink" title="示例三：通过TCP方式做健康探测"></a>示例三：通过TCP方式做健康探测</h3><p>Kubelet将尝试在指定的端口上打开容器上的套接字，如果能建立连接，则表明容器健康。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">goproxy</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">goproxy</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">goproxy</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">k8s.gcr.io/goproxy:0.1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">readinessProbe:</span></span><br><span class="line">      <span class="attr">tcpSocket:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">livenessProbe:</span></span><br><span class="line">      <span class="attr">tcpSocket:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line">      <span class="attr">periodSeconds:</span> <span class="number">20</span></span><br></pre></td></tr></tbody></table></figure><p>TCP检查方式和HTTP检查方式非常相似，示例中两种探针都使用了，在容器启动5秒后，kubelet将发送第一个readinessProbe探针，这将连接到容器的8080端口，如果探测成功，则该Pod将被标识为ready，10秒后，kubelet将进行第二次连接。<br>除此之后，此配置还包含了livenessProbe探针，在容器启动15秒后，kubelet将发送第一个livenessProbe探针，仍然尝试连接容器的8080端口，如果连接失败则重启容器。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">liveness-port</span></span><br><span class="line">  <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">hostPort:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">liveness-port</span></span><br></pre></td></tr></tbody></table></figure><h2 id="ReadinessProbe探针配置："><a href="#ReadinessProbe探针配置：" class="headerlink" title="ReadinessProbe探针配置："></a>ReadinessProbe探针配置：</h2><p>ReadinessProbe探针的使用场景livenessProbe稍有不同，有的时候应用程序可能暂时无法接受请求，比如Pod已经Running了，但是容器内应用程序尚未启动成功，在这种情况下，如果没有ReadinessProbe，则Kubernetes认为它可以处理请求了，然而此时，我们知道程序还没启动成功是不能接收用户请求的，所以不希望kubernetes把请求调度给它，则使用ReadinessProbe探针。<br>ReadinessProbe和livenessProbe可以使用相同探测方式，只是对Pod的处置方式不同，ReadinessProbe是将Pod IP:Port从对应的EndPoint列表中删除，而livenessProbe则Kill容器并根据Pod的重启策略来决定作出对应的措施。</p><p><strong>ReadinessProbe</strong>探针探测容器是否已准备就绪，如果未准备就绪则kubernetes不会将流量转发给此Pod。</p><p>ReadinessProbe探针与livenessProbe一样也支持exec、httpGet、TCP的探测方式，配置方式相同，只不过是将livenessProbe字段修改为ReadinessProbe。</p><figure class="highlight nestedtext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">readinessProbe</span><span class="punctuation">:</span></span><br><span class="line"> <span class="attribute">exec</span><span class="punctuation">:</span></span><br><span class="line">   <span class="attribute">command</span><span class="punctuation">:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/tmp/healthy</span></span><br><span class="line"> <span class="attribute">initialDelaySeconds</span><span class="punctuation">:</span> <span class="string">5</span></span><br><span class="line"> <span class="attribute">periodSeconds</span><span class="punctuation">:</span> <span class="string">5</span></span><br></pre></td></tr></tbody></table></figure><h3 id="示例一-ReadinessProbe示例"><a href="#示例一-ReadinessProbe示例" class="headerlink" title="示例一: ReadinessProbe示例"></a>示例一: ReadinessProbe示例</h3><p>现在来看一个加入ReadinessProbe探针和一个没有ReadinessProbe探针的示例：<br>该示例中，创建了一个deploy，名为gogs，启动的容器运行一个类似于gitlab的应用程序，程序监听端口为3000。<br>这里为了模拟效果我这里原镜像做了一下修改，主要是为了延迟他的启动时间为40s后再去启动gogs的应用程序，此时就会开启3000端口，</p><p>(感兴趣的同学可以了解一下，非常爽的一个自助gitweb平台<a href="https://gogs.io/">Gogs</a>)</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gogs</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">gogs</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gogs</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">gogs</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">         <span class="attr">test:</span> <span class="string">gogs</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">gogs</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">                    <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                    <span class="attr">values:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="string">k8s-m1</span></span><br></pre></td></tr></tbody></table></figure><div style="width: 50%; margin: auto">![Not add readinessProbe result](kubernetes-liveness/image1.png)</div>从上图可以看出来，当我创建部署之后，Pod启动18s，自身状态已Running，其READ字段，1/1 表示1个容器状态已准备就绪了，此时，对于kubernetes而言，它已经可以接收请求了，而实际上我在去访问的时候服务还无法访问，因为Gogo程序还尚启动起来，40s之后方可正常访问，所以针对于服务启动慢或者其他原因的此类程序，必须配置ReadinessProbe。<p>下面我加入readinessProbe</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gogs</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">gogs</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gogs</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">test:</span> <span class="string">gogs</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">         <span class="attr">test:</span> <span class="string">gogs</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">test</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">gogs</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3000</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">tcpSocket:</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">10</span> <span class="comment"># 启动后10秒开始探测</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">5</span>        <span class="comment"># 每5秒探测一次</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line">                    <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                    <span class="attr">values:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="string">k8s-m1</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><div style="width: 50%; margin: auto">![Add readinessProbe result](kubernetes-liveness/image1.png)</div>上图可以看出Pod虽然已处于Runnig状态，但是由于第一次探测时间未到，所以READY字段为0/1，即容器的状态为未准备就绪，在未准备就绪的情况下，其Pod对应的Service下的Endpoint也为空，所以不会有任何请求被调度进来。当通过第一次探测的检查通过后，容器的状态自然会转为READ状态。此后根据指定的间隔时间10s后再次探测，如果不通过，则kubernetes就会将Pod IP从EndPoint列表中移除。<h2 id="配置探针-Probe-相关属性"><a href="#配置探针-Probe-相关属性" class="headerlink" title="配置探针(Probe)相关属性"></a>配置探针(Probe)相关属性</h2><p>探针(Probe)有许多可选字段，可以用来更加精确的控制Liveness和Readiness两种探针的行为(Probe)：</p><p><code>initialDelaySeconds</code>：Pod启动后延迟多久才进行检查，单位：秒。<br><code>periodSeconds</code>：检查的间隔时间，默认为10，单位：秒。<br><code>timeoutSeconds</code>：探测的超时时间，默认为1，单位：秒。<br><code>successThreshold</code>：探测失败后认为成功的最小连接成功次数，默认为1，在Liveness探针中必须为1，最小值为1。<br><code>failureThreshold</code>：探测失败的重试次数，重试一定次数后将认为失败，在readiness探针中，Pod会被标记为未就绪，默认为3，最小值为1。</p><p>参考:<br><a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/">https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;当你使用kuberentes的时候，有没有遇到过Pod在启动后一会就挂掉然后又重新启动这样的恶性循环？&lt;br&gt;你有没有想过kubernetes是如何检测pod是否还存活？&lt;br&gt;虽然容器已经启动，但是kubernetes如何知道容器的进程是否准备好对外提供服务了呢？&lt;/p&gt;
&lt;p&gt;本博文主要记录实践如何配置容器的存活和就绪探针。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;liveness probe（存活探针）&lt;/strong&gt;&lt;br&gt;用于判断容器是否存活，即Pod是否为running状态，如果LivenessProbe探针探测到容器不健康，则kubelet将kill掉容器，并根据容器的重启策略是否重启，如果一个容器不包含LivenessProbe探针，则Kubelet认为容器的LivenessProbe探针的返回值永远成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;readiness probe（就绪探针）&lt;/strong&gt;&lt;br&gt;用于判断容器是否启动完成，即容器的Ready是否为True，可以接收请求，如果ReadinessProbe探测失败，则容器的Ready将为False，控制器将此Pod的Endpoint从对应的service的Endpoint列表中移除，从此不再将任何请求调度此Pod上，直到下次探测成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每类探针都支持三种探测方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exec：通过执行命令来检查服务是否正常，针对复杂检测或无HTTP接口的服务，命令返回值为0则表示容器健康。&lt;/li&gt;
&lt;li&gt;httpGet：通过发送http请求检查服务是否正常，返回200-399状态码则表明容器健康。&lt;/li&gt;
&lt;li&gt;tcpSocket：通过容器的IP和Port执行TCP检查，如果能够建立TCP连接，则表明容器健康。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每种方式都可以定义在readiness 或者liveness 中。比如定义readiness 中http get 就是意思说如果我定义的这个path的http get 请求返回200-400以外的http code 就把我从所有有我的服务里面删了吧，如果定义在liveness里面就是把我kill 了。&lt;br&gt;注意，liveness不会重启pod，pod是否会重启由你的restart policy 控制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;探针探测的结果有以下三者之一&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Success：Container通过了检查。&lt;/li&gt;
&lt;li&gt;Failure：Container未通过检查。&lt;/li&gt;
&lt;li&gt;Unknown：未能执行检查，因此不采取任何措施。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/categories/kubernetes/"/>
    
    
    <category term="liveness probe" scheme="https://blog.sctux.cc/tags/liveness-probe/"/>
    
    <category term="readiness probe" scheme="https://blog.sctux.cc/tags/readiness-probe/"/>
    
    <category term="restartPolicy" scheme="https://blog.sctux.cc/tags/restartPolicy/"/>
    
  </entry>
  
  <entry>
    <title>理解Kubernetes中的认证&amp;授权&amp;准入机制</title>
    <link href="https://blog.sctux.cc/2018/12/16/kubernetes-auth/"/>
    <id>https://blog.sctux.cc/2018/12/16/kubernetes-auth/</id>
    <published>2018-12-16T07:35:24.000Z</published>
    <updated>2025-09-01T01:59:08.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>首先需要了解这三种机制的区别：</p><ul><li>认证(Authenticating)是对客户端的认证，通俗点就是用户名密码验证，</li><li>授权(Authorization)是对资源的授权，k8s中的资源无非是容器，最终其实就是容器的计算，网络，存储资源，当一个请求经过认证后，需要访问某一个资源（比如创建一个pod），授权检查都会通过访问策略比较该请求上下文的属性，（比如用户，资源和Namespace），根据授权规则判定该资源（比如某namespace下的pod）是否是该客户可访问的。</li><li>准入(Admission Control)机制是一种在改变资源的持久化之前（比如某些资源的创建或删除，修改等之前）的机制。<br>在k8s中，这三种机制如下图：<br><img src="/2018/12/16/kubernetes-auth/k8s-authorition.png" alt="k8s-authorition"><br>k8s的整体架构也是一个微服务的架构，所有的请求都是通过一个GateWay，也就是kube-apiserver这个组件（对外提供REST服务），由图中可以看出，k8s中客户端有两类，一种是普通用户，一种是集群内的Pod，这两种客户端的认证机制略有不同，后文会详述。但无论是哪一种，都需要依次经过认证，授权，准入这三个机制。<br><img src="/2018/12/16/kubernetes-auth/auththentication&amp;authorization.png" alt="截图来自华为CCE云课堂"></li></ul><h1 id="kubernetes-中的认证机制"><a href="#kubernetes-中的认证机制" class="headerlink" title="kubernetes 中的认证机制"></a>kubernetes 中的认证机制</h1><p>需要注意的是，kubernetes虽然提供了多种认证机制，但并没有提供user 实体信息的存储，也就是说，账户体系需要我们自己去做维护。当然，也可以接入第三方账户体系（如谷歌账户），也可以使用开源的keystone去做整合。kubernetes 支持多种认证机制，可以配置成多个认证体制共存，这样，只要有一个认证通过，这个request就认证通过了。下面列举的是官网几种常见认证机制：</p><ul><li>X509 Client Certs</li><li>Static Token File</li><li>Bootstrap Tokens</li><li>Static Password File</li><li>Service Account Tokens</li><li>OpenID Connect Tokens</li></ul><p>这里我主要还是理解一下常用认证方式:</p><h2 id="X509-Client-Certs"><a href="#X509-Client-Certs" class="headerlink" title="X509 Client Certs"></a>X509 Client Certs</h2><p>也叫作双向数字证书认证，HTTPS证书认证，是基于CA根证书签名的双向数字证书认证方式，是所有认证方式中最严格的认证。默认在kubeadm创建的集群中是enabled的，可以在master node上查看kube-apiserver的pod配置文件：</p><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ cat /usr/lib/systemd/system/kube-apiserver.service</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ExecStart</span>=/usr/local/bin/kube-apiserver \</span><br><span class="line">      <span class="attribute">--v</span>=2  \</span><br><span class="line">      <span class="attribute">--logtostderr</span>=<span class="literal">true</span>  \</span><br><span class="line">      <span class="attribute">--allow-privileged</span>=<span class="literal">true</span>  \</span><br><span class="line">      <span class="attribute">--bind-address</span>=0.0.0.0  \</span><br><span class="line">      <span class="attribute">--secure-port</span>=6443  \</span><br><span class="line">      <span class="attribute">--insecure-port</span>=0  \</span><br><span class="line">      <span class="attribute">--advertise-address</span>=192.168.56.110 \</span><br><span class="line">      <span class="attribute">--service-cluster-ip-range</span>=10.96.0.0/12  \</span><br><span class="line">      <span class="attribute">--service-node-port-range</span>=30000-32767  \</span><br><span class="line">      <span class="attribute">--etcd-servers</span>=https://192.168.56.111:2379,https://192.168.56.112:2379,https://192.168.56.113:2379 \</span><br><span class="line">      <span class="attribute">--etcd-cafile</span>=/etc/etcd/ssl/etcd-ca.pem  \</span><br><span class="line">      <span class="attribute">--etcd-certfile</span>=/etc/etcd/ssl/etcd.pem  \</span><br><span class="line">      <span class="attribute">--etcd-keyfile</span>=/etc/etcd/ssl/etcd-key.pem  \</span><br><span class="line">      <span class="attribute">--client-ca-file</span>=/etc/kubernetes/pki/ca.pem  \</span><br><span class="line">      <span class="attribute">--tls-cert-file</span>=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      <span class="attribute">--tls-private-key-file</span>=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      <span class="attribute">--kubelet-client-certificate</span>=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      <span class="attribute">--kubelet-client-key</span>=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br></pre></td></tr></tbody></table></figure><p>相关的三个启动参数：</p><ul><li>client-ca-file: 指定CA根证书文件为/etc/kubernetes/pki/ca.pem</li><li>tls-private-key-file: 指定ApiServer私钥文件为/etc/kubernetes/pki/apiserver-key.pem</li><li>tls-cert-file：指定ApiServer证书文件为/etc/kubernetes/pki/apiserver.pem</li></ul><p>请求中需要带有由该证书签名的证书，才能认证通过，客户端签署的证书里包含user,group信息，具体为证书的subject.CommonName(username)以及subject.Organization(group)</p><div style="width: 50%; margin: auto">![x509](kubernetes-auth/x509.png)</div><h2 id="Service-Account-Tokens"><a href="#Service-Account-Tokens" class="headerlink" title="Service Account Tokens"></a>Service Account Tokens</h2><p>Service Account Token 是一种比较特殊的认证机制，适用于上文中提到的pod内部服务需要访问apiserver的认证情况，默认enabled。<br>还是看上文中apiserver 的启动配置参数有–service-account-key-file，如果没有指明文件，默认使用–tls-private-key-file的值，即API Server的私钥。</p><div style="width: 50%; margin: auto">![ServiceAccount工作流程](kubernetes-auth/sa.png) </div><p>通过控制器ServiceAccountController会去list,watch k8s apiserver对于命名空间的创建、删除；<br>就会在新创建的名称空间下创建一个名为”default”的service account;</p><p>TokenController 根据创建的ServiceAccount下面关联生成一个带有Token的secret。<br>Admission 是在通过认证进行鉴权的一个阶段，那么他会默认给当前名称空间下的pod打上，当前名称空间的那个ServiceAccount。</p><p>service accout本身是作为一种资源在k8s集群中，我们可以通过命令行获取</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get sa <span class="operator">-</span>-all-namespaces</span><br><span class="line"></span><br><span class="line">NAMESPACE     NAME                                 SECRETS   AGE</span><br><span class="line">default       default                              <span class="number">1</span>         <span class="number">16</span>d</span><br><span class="line">kube-system   default                              <span class="number">1</span>         <span class="number">16</span>d</span><br><span class="line">kube-public   default                              <span class="number">1</span>         <span class="number">16</span>d</span><br><span class="line">kube-system   attachdetach-controller              <span class="number">1</span>         <span class="number">16</span>d</span><br><span class="line">kube-system   bootstrap-signer                     <span class="number">1</span>         <span class="number">16</span>d</span><br><span class="line">kube-system   calico-node                          <span class="number">1</span>         <span class="number">16</span></span><br><span class="line">...........</span><br><span class="line">...........</span><br><span class="line"></span><br><span class="line">$ kubectl describe serviceaccount<span class="symbol">/default</span> <span class="operator">-</span>n kube-system</span><br><span class="line"><span class="params">Name:</span>                default</span><br><span class="line"><span class="params">Namespace:</span>           kube-system</span><br><span class="line"><span class="params">Labels:</span>              <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">Annotations:</span>         <span class="symbol">&lt;none&gt;</span></span><br><span class="line">Image pull <span class="params">secrets:</span>  <span class="symbol">&lt;none&gt;</span></span><br><span class="line">Mountable <span class="params">secrets:</span>   default-token-q9s9l</span><br><span class="line"><span class="params">Tokens:</span>              default-token-q9s9l</span><br><span class="line"><span class="params">Events:</span>              <span class="symbol">&lt;none&gt;</span></span><br><span class="line">$ kubectl get secret default-token-q9s9l <span class="operator">-</span>o yaml <span class="operator">-</span>n kube-system</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">data:</span></span><br><span class="line">  ca.<span class="params">crt:</span> LS0tLS1CRUdJ ...............略</span><br><span class="line">  <span class="params">namespace:</span> a3ViZS1zeXN0ZW0<span class="operator">=</span></span><br><span class="line">  <span class="params">token:</span> ZXlKaGJHY2lPaUpTVX- ...............略</span><br><span class="line"><span class="params">kind:</span> Secret</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">annotations:</span></span><br><span class="line">    kubernetes.io<span class="operator">/</span>service-account.<span class="params">name:</span> default</span><br><span class="line">    kubernetes.io<span class="operator">/</span>service-account.<span class="params">uid:</span> a5568634-f445-<span class="number">11</span>e8-b4c4-<span class="number">000</span>c295134cf</span><br><span class="line">  <span class="params">creationTimestamp:</span> <span class="number">201</span>8-<span class="number">1</span>1-<span class="number">30</span>T02:<span class="number">14</span>:<span class="number">19</span>Z</span><br><span class="line">  <span class="params">name:</span> default-token-q9s9l</span><br><span class="line">  <span class="params">namespace:</span> kube-system</span><br><span class="line">  <span class="params">resourceVersion:</span> <span class="string">"337"</span></span><br><span class="line">  <span class="params">selfLink:</span> <span class="symbol">/api/v1/namespaces/kube-system/secrets/default-token-q9s9l</span></span><br><span class="line">  <span class="params">uid:</span> a56521fd-f445-<span class="number">11</span>e8-aa44-<span class="number">000</span>c29fe5618</span><br><span class="line"><span class="params">type:</span> kubernetes.io<span class="symbol">/service-account-token</span></span><br><span class="line">[root@k8s-m1 kubelet]<span class="comment">#</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>可以看到service-account-token的secret资源包含的数据有三部分：</p><ul><li>ca.crt，这是API Server的CA公钥证书，用于Pod中的Process对API Server的服务端数字证书进行校验时使用的；</li><li>namespace，这是Secret所在namespace的值的base64编码：# echo -n “kube-system”|base64 =&gt; “a3ViZS1zeXN0ZW0=”</li><li>token：该token就是由service-account-key-file的值签署(sign)生成。</li></ul><h3 id="API-Server的service-account-authentication-身份验证"><a href="#API-Server的service-account-authentication-身份验证" class="headerlink" title="API Server的service account authentication(身份验证)"></a>API Server的service account authentication(身份验证)</h3><p>前面说过，service account为Pod中的Process提供了一种身份标识，在Kubernetes的身份校验(authenticating)环节，以某个service account提供身份的Pod的用户名为：</p><figure class="highlight vbnet"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">system:</span>serviceaccount:(<span class="keyword">NAMESPACE</span>):(SERVICEACCOUNT)</span><br></pre></td></tr></tbody></table></figure><p>以上面那个kube-system namespace下的<code>default</code> service account为例，使用它的Pod的username全称为：</p><figure class="highlight hsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">system</span>:serviceaccount:kube-<span class="keyword">system</span>:<span class="keyword">default</span></span><br></pre></td></tr></tbody></table></figure><h3 id="默认的service-account"><a href="#默认的service-account" class="headerlink" title="默认的service account"></a>默认的service account</h3><p>Kubernetes会为每个cluster中的namespace自动创建一个默认的service account资源，并命名为”default”.</p><p>如果Pod中没有显式指定spec.serviceAccount字段值(自定义Admission)，那么Kubernetes会默认将该namespace下的default service account自动mount到在这个namespace中创建的Pod里，那这个操作就是通过上面所说的ServiceAccountAdmission来实现的。<br>我们以namespace “default”为例，我们查看一下其中的一个Pod的信息：</p><figure class="highlight lasso"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe pod nginx<span class="number">-64</span>f497f8fd<span class="params">-lkmdr</span></span><br><span class="line">Name:           nginx<span class="number">-64</span>f497f8fd<span class="params">-lkmdr</span></span><br><span class="line">Namespace:      default</span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br><span class="line">Containers:</span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br><span class="line">      Mounts:</span><br><span class="line">      /<span class="built_in">var</span>/run/secrets/kubernetes.io/serviceaccount from default<span class="params">-token</span><span class="params">-d5d8g</span> (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  <span class="keyword">Type</span>              Status</span><br><span class="line">  Initialized       <span class="literal">True</span></span><br><span class="line">  Ready             <span class="literal">False</span></span><br><span class="line">  ContainersReady   <span class="literal">False</span></span><br><span class="line">  PodScheduled      <span class="literal">True</span></span><br><span class="line">Volumes:</span><br><span class="line"> <span class="params">...</span><span class="params">...</span></span><br><span class="line"> <span class="params">...</span><span class="params">...</span></span><br><span class="line">Events:</span><br><span class="line">  <span class="keyword">Type</span>    Reason     Age   From               Message</span><br><span class="line">  ----    ------     ----  ----               -------</span><br><span class="line">  Normal  Scheduled  <span class="number">27</span>s   default<span class="params">-scheduler</span>  Successfully assigned default/nginx<span class="number">-64</span>f497f8fd<span class="params">-lkmdr</span> <span class="keyword">to</span> k8s<span class="params">-m3</span></span><br><span class="line">  Normal  Pulling    <span class="number">17</span>s   kubelet, k8s<span class="params">-m3</span>    pulling image <span class="string">"nginx"</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到，kubernetes将default namespace中的service account “default”的service account token挂载(mount)到了Pod中容器的/var/run/secrets/kubernetes.io/serviceaccount路径下。</p><p>深入容器内部，查看mount的serviceaccount路径下的结构：</p><figure class="highlight stata"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec nginx-64f497f8fd-lkmdr -- <span class="keyword">ls</span> /<span class="keyword">var</span>/<span class="keyword">run</span>/secrets/kubernetes.io/serviceaccount</span><br><span class="line"><span class="keyword">ca</span>.crt</span><br><span class="line">namespace</span><br><span class="line"><span class="keyword">token</span></span><br><span class="line"></span><br><span class="line"># 这三个文件与上面提到的service account的<span class="keyword">token</span>中的数据是一一对应的。</span><br></pre></td></tr></tbody></table></figure><h3 id="如何创建一个ServiceAccount"><a href="#如何创建一个ServiceAccount" class="headerlink" title="如何创建一个ServiceAccount"></a>如何创建一个ServiceAccount</h3><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过命令行直接创建</span></span><br><span class="line">$ kubectl create sa myk8ssa</span><br><span class="line">serviceaccount<span class="symbol">/myk8ssa</span> created</span><br><span class="line">$ kubectl describe sa<span class="symbol">/myk8ssa</span></span><br><span class="line"><span class="params">Name:</span>                mysa</span><br><span class="line"><span class="params">Namespace:</span>           default</span><br><span class="line"><span class="params">Labels:</span>              <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">Annotations:</span>         <span class="symbol">&lt;none&gt;</span></span><br><span class="line">Image pull <span class="params">secrets:</span>  <span class="symbol">&lt;none&gt;</span></span><br><span class="line">Mountable <span class="params">secrets:</span>   mysa-token-kcwqm</span><br><span class="line"><span class="params">Tokens:</span>              mysa-token-kcwqm</span><br><span class="line"><span class="params">Events:</span>              <span class="symbol">&lt;none&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如何使用？下面我在讨论</span></span><br></pre></td></tr></tbody></table></figure><h1 id="kubernetes-中的鉴权机制"><a href="#kubernetes-中的鉴权机制" class="headerlink" title="kubernetes 中的鉴权机制"></a>kubernetes 中的鉴权机制</h1><p>目前，k8s 中一共有 4 种鉴权权限模式：</p><ul><li>Node: 一种特殊目的的授权模式，主要用来让 kubernetes 遵从 node 的编排规则，实际上是 RBAC 的一部分，相当于只定义了 node 这个角色以及它的权限；</li><li>ABAC: Attribute-based access control；</li><li>RBAC: Role-based access control；</li><li>Webhook: 以 HTTP Callback 的方式，利用外部授权接口来进行权限控制；</li></ul><p>这里我主要学习总结最常用的鉴权方式—<code>RBAC</code><br>RBAC的鉴权策略可以利用 kubectl 或者 Kubernetes API 直接进行配置。RBAC 可以授权给用户，让用户有权进行授权管理，这样就可以无需接触节点，直接进行授权管理。RBAC 在 Kubernetes 中被映射为 API 资源和操作。</p><div style="width: 50%; margin: auto">![RBAC](kubernetes-auth/RBAC.png)</div><p>需要理解 RBAC 一些基础的概念和思路，RBAC 是让用户能够访问 Kubernetes API 资源的授权方式。</p><p><em><strong>role</strong></em><br>角色是一系列权限的集合，例如一个角色可以包含读取 Pod 的权限和列出 Pod 的权限， ClusterRole 跟 Role 类似，但是可以在集群中到处使用（ Role 是 namespace 一级的）。<br><em><strong>role binding</strong></em><br>RoleBinding 把角色映射到用户，从而让这些用户继承角色在 namespace 中的权限。ClusterRoleBinding 让用户继承 ClusterRole 在整个集群中的权限。</p><p>另外还要考虑<code>cluster roles</code>和<code>cluster role binding</code>。cluster role和cluster role binding方法跟role和role binding一样，出了它们有更广的scope。</p><p><em><strong>Kubernetes中的RBAC</strong></em><br>RBAC 现在被 Kubernetes 深度集成，并使用他给系统组件进行授权。System Roles 一般具有前缀system:，很容易识别：</p><figure class="highlight x86asm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get clusterroles --namespace=kube-system</span><br><span class="line">NAME                                                                   AGE</span><br><span class="line">admin                                                                  <span class="number">16d</span></span><br><span class="line">anonymous-dashboard-proxy-role                                         <span class="number">16d</span></span><br><span class="line">calico-node                                                            <span class="number">16d</span></span><br><span class="line">calicoctl                                                              <span class="number">16d</span></span><br><span class="line">cluster-admin                                                          <span class="number">16d</span></span><br><span class="line">edit                                                                   <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>aggregate-to-admin                                              <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>aggregate-to-edit                                               <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>aggregate-to-view                                               <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>auth-delegator                                                  <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>aws-cloud-provider                                              <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>basic-user                                                      <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>certificates<span class="number">.</span>k8s<span class="number">.</span>io:certificatesigningrequests:nodeclient       <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>certificates<span class="number">.</span>k8s<span class="number">.</span>io:certificatesigningrequests:selfnodeclient   <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>controller:attachdetach-controller                              <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>controller:certificate-controller                               <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>controller:clusterrole-aggregation-controller                   <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>controller:cronjob-controller                                   <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>controller:daemon-set-controller                                <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>controller:deployment-controller                                <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>controller:disruption-controller                                <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>controller:endpoint-controller                                  <span class="number">16d</span></span><br><span class="line"><span class="symbol">system:</span>controller:expand-controller                                    <span class="number">16d</span></span><br><span class="line">......略</span><br></pre></td></tr></tbody></table></figure><p>示例：</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="operator">&gt;</span><span class="operator">&gt;</span> role.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">kind:</span> Role</span><br><span class="line"><span class="params">apiVersion:</span> rbac.authorization.k8s.io<span class="symbol">/v1</span></span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">namespace:</span> default</span><br><span class="line">  <span class="params">name:</span> pod-reader</span><br><span class="line"><span class="params">rules:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">apiGroups:</span> [<span class="string">""</span>] <span class="comment"># "" indicates the core API group</span></span><br><span class="line">    <span class="params">resources:</span> [<span class="string">"pods"</span>] <span class="comment"># 可用操作资源对象</span></span><br><span class="line">    <span class="params">verbs:</span> [<span class="string">"get"</span>, <span class="string">"watch"</span>, <span class="string">"list"</span>] <span class="comment"># 对上面定义资源有哪些操作权限</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ cat <span class="operator">&gt;</span><span class="operator">&gt;</span> rolebinding.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">kind:</span> RoleBinding</span><br><span class="line"><span class="params">apiVersion:</span> rbac.authorization.k8s.io<span class="symbol">/v1beta1</span></span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> pod-reader-binding</span><br><span class="line">  <span class="params">namespace:</span> default</span><br><span class="line"><span class="params">subjects:</span>  </span><br><span class="line"><span class="operator">-</span> <span class="params">kind:</span> ServiceAccount </span><br><span class="line">  <span class="params">name:</span> mysa  </span><br><span class="line">  <span class="params">namespace:</span> default</span><br><span class="line"><span class="params">roleRef:</span></span><br><span class="line">    <span class="params">kind:</span> Role</span><br><span class="line">    <span class="params">name:</span> pod-reader</span><br><span class="line">    <span class="params">apiGroup:</span> rbac.authorization.k8s.io</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行创建</span></span><br><span class="line">$ kubectl create <span class="operator">-</span>f role.yaml</span><br><span class="line">role.rbac.authorization.k8s.io<span class="symbol">/pod-reader</span> created</span><br><span class="line">$ kubectl create <span class="operator">-</span>f rolebinding.yaml</span><br><span class="line">rolebinding.rbac.authorization.k8s.io<span class="symbol">/pod-reader-binding</span> created</span><br><span class="line"></span><br><span class="line">[root@k8s-m1 ~]<span class="comment"># kubectl get role</span></span><br><span class="line">NAME         AGE</span><br><span class="line">pod-reader   <span class="number">36</span>s</span><br><span class="line">[root@k8s-m1 ~]<span class="comment"># kubectl describe role pod-reader</span></span><br><span class="line"><span class="params">Name:</span>         pod-reader</span><br><span class="line"><span class="params">Labels:</span>       <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">Annotations:</span>  <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">PolicyRule:</span></span><br><span class="line">  Resources  Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  <span class="operator">-</span>--------  <span class="operator">-</span>----------------  <span class="operator">-</span>-------------  <span class="operator">-</span>----</span><br><span class="line">  pods       []                 []              [get watch list]</span><br><span class="line">$ kubectl describe rolebinding pod-reader-binding</span><br><span class="line"><span class="params">Name:</span>         pod-reader-binding</span><br><span class="line"><span class="params">Labels:</span>       <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">Annotations:</span>  <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">Role:</span></span><br><span class="line">  <span class="params">Kind:</span>  Role</span><br><span class="line">  <span class="params">Name:</span>  pod-reader</span><br><span class="line"><span class="params">Subjects:</span></span><br><span class="line">  Kind            Name  Namespace</span><br><span class="line">  <span class="operator">-</span>---            <span class="operator">-</span>---  <span class="operator">-</span>--------</span><br><span class="line">  ServiceAccount  mysa  default</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p>上面，</p><ol><li>我定义了一个pod-reader的role,其中它的权限定义如上方定义的<code>get</code>,<code>watch</code>,<code>list</code>;</li><li>然后定义了一个pod-reader-binding的rolebinding<br>前面提到过；用户通过认证之后就是鉴权，通过SA的认证方式之后拿到userinfo,然后绑定到role里面；那么此时对应的用户权限就是role里面定义的权限，subjects应用的对象类型也可以是User,Group;总之此时这一步就是获取到userinfo信息，然后通过角色绑定。相对应的权限就会赋予该用户。那用户从何而来？下面就需要创建一个用户来访问我们的集群了。</li></ol><p>那如何使用我们自己创建的ServiceAccount来登录并且通过自定义的这个RBAC来鉴权呢？这就涉及到了kubeconfig文件生成的问题了</p><h2 id="创建kubeconfig"><a href="#创建kubeconfig" class="headerlink" title="创建kubeconfig"></a>创建kubeconfig</h2><h3 id="获取上面已创建的ServiceAccount的Seter名称"><a href="#获取上面已创建的ServiceAccount的Seter名称" class="headerlink" title="获取上面已创建的ServiceAccount的Seter名称"></a>获取上面已创建的ServiceAccount的Seter名称</h3><p>这里我是在默认namespace下面创建的。</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe sa<span class="symbol">/myk8ssa</span></span><br><span class="line"><span class="params">Name:</span>                myk8ssa</span><br><span class="line"><span class="params">Namespace:</span>           default</span><br><span class="line"><span class="params">Labels:</span>              <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">Annotations:</span>         <span class="symbol">&lt;none&gt;</span></span><br><span class="line">Image pull <span class="params">secrets:</span>  <span class="symbol">&lt;none&gt;</span></span><br><span class="line">Mountable <span class="params">secrets:</span>   myk8ssa-token-<span class="number">2</span>kntd</span><br><span class="line"><span class="params">Tokens:</span>              myk8ssa-token-<span class="number">2</span>kntd</span><br><span class="line"><span class="params">Events:</span>              <span class="symbol">&lt;none&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取secret下的token，并base64解码获取token明文"><a href="#获取secret下的token，并base64解码获取token明文" class="headerlink" title="获取secret下的token，并base64解码获取token明文"></a>获取secret下的token，并base64解码获取token明文</h3><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="attribute">token</span>=`kubectl <span class="built_in">get</span><span class="built_in"> secret </span>myk8ssa-token-2kntd -oyaml |grep token: | awk <span class="string">'{print $2}'</span> | xargs echo -n | base64 -d`</span><br><span class="line">$ echo <span class="variable">$token</span></span><br><span class="line">eyJhbGciOiJSUzI1<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>略</span><br></pre></td></tr></tbody></table></figure><h3 id="新增用户guomaoqiu"><a href="#新增用户guomaoqiu" class="headerlink" title="新增用户guomaoqiu"></a>新增用户guomaoqiu</h3><figure class="highlight dsconfig"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="string">kubectl</span> <span class="string">config</span> <span class="built_in">set-cluster</span> <span class="string">my-k8s</span> <span class="built_in">--server=https://192.168.56.110:8443</span> \</span><br><span class="line"><span class="built_in">--certificate-authority=/etc/kubernetes/pki/ca.pem</span> \</span><br><span class="line"><span class="built_in">--embed-certs=true</span></span><br><span class="line"><span class="string">Cluster</span> <span class="string">"my-k8s"</span> <span class="string">set</span>.</span><br><span class="line"></span><br><span class="line">$ <span class="string">kubectl</span> <span class="string">config</span> <span class="built_in">set-credentials</span> <span class="string">guomaoqiu</span> <span class="built_in">--token=$token</span></span><br><span class="line"><span class="string">User</span> <span class="string">"guomaoqiu"</span> <span class="string">set</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文</span></span><br><span class="line">$ <span class="string">kubectl</span> <span class="string">config</span> <span class="built_in">set-context</span> <span class="string">my-k8s</span> <span class="built_in">--cluster=kubernetes</span></span><br><span class="line"><span class="string">Context</span> <span class="string">"my-k8s"</span> <span class="string">created</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认用户信息</span></span><br><span class="line">$ <span class="string">kubectl</span> <span class="string">config</span> <span class="built_in">set-context</span> <span class="string">my-k8s</span> <span class="built_in">--user=guomaoqiu</span></span><br><span class="line"><span class="string">Context</span> <span class="string">"my-k8s"</span> <span class="string">modified</span>.</span><br></pre></td></tr></tbody></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl config get-contexts</span><br><span class="line">CURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE</span><br><span class="line">          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin</span><br><span class="line"><span class="operator">*</span>         my-k8s                        kubernetes   guomaoqiu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其设置为当前默认上下文:</span></span><br><span class="line">$ kubectl config use-context my-k8s</span><br><span class="line">Switched to context <span class="string">"my-k8s"</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取POD:</span></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                     READY     STATUS    RESTARTS   AGE</span><br><span class="line">nginx-<span class="number">64</span>f497f8fd-<span class="number">4</span>qdnt   <span class="number">1</span><span class="symbol">/1</span>       Running   <span class="number">0</span>          <span class="number">10</span>m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试删除POD:</span></span><br><span class="line">$ kubectl delete pod nginx-<span class="number">64</span>f497f8fd-<span class="number">4</span>qdnt</span><br><span class="line">Error from server (Forbidden): pods <span class="string">"nginx-64f497f8fd-4qdnt"</span> is <span class="params">forbidden:</span> User <span class="string">"system:serviceaccount:default:myk8ssa"</span> cannot delete pods <span class="keyword">in</span> the namespace <span class="string">"default"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可见，该用户的的权限只有可读，而没有删除的权限；</span></span><br><span class="line"><span class="comment"># 说明配置是成功了的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览一下当前我环境中有哪些kubeconfig?</span></span><br><span class="line">$ kubectl config view</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">clusters:</span></span><br><span class="line"><span class="operator">-</span> <span class="params">cluster:</span></span><br><span class="line">    <span class="params">certificate-authority-data:</span> REDACTED</span><br><span class="line">    <span class="params">server:</span> https:<span class="operator">//</span><span class="number">192.168</span>.<span class="number">56.110</span>:<span class="number">8443</span></span><br><span class="line">  <span class="params">name:</span> kubernetes</span><br><span class="line"><span class="operator">-</span> <span class="params">cluster:</span></span><br><span class="line">    <span class="params">certificate-authority-data:</span> REDACTED</span><br><span class="line">    <span class="params">server:</span> https:<span class="operator">//</span><span class="number">192.168</span>.<span class="number">56.110</span>:<span class="number">8443</span></span><br><span class="line">  <span class="params">name:</span> my-k8s</span><br><span class="line"><span class="params">contexts:</span></span><br><span class="line"><span class="operator">-</span> <span class="params">context:</span></span><br><span class="line">    <span class="params">cluster:</span> kubernetes</span><br><span class="line">    <span class="params">user:</span> kubernetes-admin</span><br><span class="line">  <span class="params">name:</span> kubernetes-admin@kubernetes</span><br><span class="line"><span class="operator">-</span> <span class="params">context:</span></span><br><span class="line">    <span class="params">cluster:</span> kubernetes</span><br><span class="line">    <span class="params">user:</span> guomaoqiu</span><br><span class="line">  <span class="params">name:</span> my-k8s</span><br><span class="line"><span class="params">current-context:</span> my-k8s  <span class="comment"># 当前环境</span></span><br><span class="line"><span class="params">kind:</span> Config</span><br><span class="line"><span class="params">preferences:</span> {}</span><br><span class="line"><span class="params">users:</span></span><br><span class="line"><span class="operator">-</span> <span class="params">name:</span> guomaoqiu</span><br><span class="line">  <span class="params">user:</span></span><br><span class="line">    token:......略</span><br><span class="line"><span class="operator">-</span> <span class="params">name:</span> kubernetes-admin</span><br><span class="line">  <span class="params">user:</span></span><br><span class="line">    <span class="params">client-certificate-data:</span> REDACTED</span><br><span class="line">    <span class="params">client-key-data:</span> REDACTED</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>通过namespace我们可以做到不同业务之间的隔离，如果再加上如上这种权限控制将会更加细化、以上实验主要是在默认的namespace下面操作，除此之外也可以新建namespace然后进行验证操作。<code>kubeconfig</code>切换上下文也是非常实用的一种功能。<br>常用命令：</p><figure class="highlight dsconfig"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">kubectl</span> - 使用<span class="string">kubectl</span>来管理<span class="string">Kubernetes</span>集群。</span><br><span class="line"><span class="string">kubectl</span> <span class="string">config</span> <span class="string">set</span> - 在<span class="string">kubeconfig</span>配置文件中设置一个单独的值。</span><br><span class="line"><span class="string">kubectl</span> <span class="string">config</span> <span class="built_in">set-cluster</span> - 在<span class="string">kubeconfig</span>配置文件中设置一个集群项。</span><br><span class="line"><span class="string">kubectl</span> <span class="string">config</span> <span class="built_in">set-context</span> - 在<span class="string">kubeconfig</span>配置文件中设置一个环境项。</span><br><span class="line"><span class="string">kubectl</span> <span class="string">config</span> <span class="built_in">set-credentials</span> - 在<span class="string">kubeconfig</span>配置文件中设置一个用户项。</span><br><span class="line"><span class="string">kubectl</span> <span class="string">config</span> <span class="string">unset</span> - 在<span class="string">kubeconfig</span>配置文件中清除一个单独的值。</span><br><span class="line"><span class="string">kubectl</span> <span class="string">config</span> <span class="string">use-context</span> - 使用<span class="string">kubeconfig</span>中的一个环境项作为当前配置。</span><br><span class="line"><span class="string">kubectl</span> <span class="string">config</span> <span class="string">view</span> - 显示合并后的<span class="string">kubeconfig</span>设置，或者一个指定的<span class="string">kubeconfig</span>配置文件。</span><br></pre></td></tr></tbody></table></figure><h1 id="kubernetes-中的准入机制"><a href="#kubernetes-中的准入机制" class="headerlink" title="kubernetes 中的准入机制"></a>kubernetes 中的准入机制</h1><p>Kubernetes的Admission Control实际上是一个准入控制器(Admission Controller)插件列表，发送到APIServer的请求都需要经过这个列表中的每个准入控制器插件的检查，如果某一个控制器插件准入失败，就准入失败。<br>更多可查看: <a href="http://docs.kubernetes.org.cn/144.html">http://docs.kubernetes.org.cn/144.html</a><br>这里我们主要学习<code>PodSecurityPolicy</code></p><h2 id="安全上下文-Pod-SecurityContext"><a href="#安全上下文-Pod-SecurityContext" class="headerlink" title="安全上下文(Pod SecurityContext)"></a>安全上下文(Pod SecurityContext)</h2><p>分为Pod级别和容器级别，容器级别的会覆盖Pod级别的相同设置。<br>在有PodSecurityPolicy策略的情况下，两者需要配合使用;</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="operator">&gt;</span><span class="operator">&gt;</span> pod-security-policy.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Pod</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> test-pod</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">volumes:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">name:</span> test</span><br><span class="line">      <span class="params">emptyDir:</span> {}</span><br><span class="line">  <span class="params">containers:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">name:</span> test-pod</span><br><span class="line">      <span class="params">image:</span> alpine</span><br><span class="line">      <span class="params">imagePullPolicy:</span> IfNotPresent</span><br><span class="line">      <span class="params">command:</span> ['sh', '-c', 'echo The app is running<span class="operator">!</span> <span class="operator">&amp;&amp;</span> sleep <span class="number">36000</span>']</span><br><span class="line">      <span class="params">volumeMounts:</span></span><br><span class="line">        <span class="operator">-</span> <span class="params">name:</span> test</span><br><span class="line">          <span class="params">mountPath:</span> <span class="symbol">/data/test</span></span><br><span class="line">      <span class="params">securityContext:</span>    <span class="comment"># 设置容器安全上下文</span></span><br><span class="line">        <span class="params">readOnlyRootFilesystem:</span> <span class="literal">false</span>  <span class="comment"># 容器文件系统是否是只读</span></span><br><span class="line">        <span class="params">privileged:</span> <span class="literal">false</span> <span class="comment"># 是否为特权容器</span></span><br><span class="line">        <span class="params">runAsUser:</span> <span class="number">1000</span>   <span class="comment"># 进程运行用户UID</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行创建:</span></span><br><span class="line">$ kubectl create <span class="operator">-</span>f pod-security-policy.yaml</span><br><span class="line">pod<span class="symbol">/test-pod</span> created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器验证：</span></span><br><span class="line">$ kubectl exec <span class="operator">-</span>it test-pod sh</span><br><span class="line"><span class="symbol">/</span> $ id</span><br><span class="line">u<span class="attr">id</span><span class="operator">=</span><span class="number">1000</span> gid<span class="operator">=</span><span class="number">0</span>(root)</span><br><span class="line"><span class="symbol">/</span> $ ps <span class="operator">-</span>ef</span><br><span class="line">PID   USER     TIME  COMMAND</span><br><span class="line">    <span class="number">1</span> <span class="number">1000</span>      <span class="number">0</span>:<span class="number">00</span> sleep <span class="number">36000</span></span><br><span class="line">    <span class="number">6</span> <span class="number">1000</span>      <span class="number">0</span>:<span class="number">00</span> sh</span><br><span class="line">   <span class="number">15</span> <span class="number">1000</span>      <span class="number">0</span>:<span class="number">00</span> sh</span><br><span class="line">   <span class="number">21</span> <span class="number">1000</span>      <span class="number">0</span>:<span class="number">00</span> ps <span class="operator">-</span>ef</span><br><span class="line"><span class="symbol">/</span> $ sysctl <span class="operator">-</span>w net.ipv4.tcp_recovery<span class="operator">=</span><span class="number">2</span></span><br><span class="line"><span class="params">sysctl:</span> error setting key 'net.ipv4.<span class="params">tcp_recovery':</span> Read-only file system</span><br><span class="line"><span class="symbol">/</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上我设置限制了pod是否开启特权模式，并且运行用户uid为1000</span></span><br><span class="line"><span class="comment"># 那么如果在pod级别设置上下文的话，容器级别的会覆盖Pod级别的相同设置(已验证)</span></span><br></pre></td></tr></tbody></table></figure><p>其他更多参数参见: <a href="https://kubernetes.io/docs/concepts/policy/pod-security-policy/">https://kubernetes.io/docs/concepts/policy/pod-security-policy/</a></p><h1 id="运行态的安全控制—网络策略-NetworkPolicy"><a href="#运行态的安全控制—网络策略-NetworkPolicy" class="headerlink" title="运行态的安全控制—网络策略(NetworkPolicy)"></a>运行态的安全控制—网络策略(NetworkPolicy)</h1><p>Kubernetes要求集群中所有pod，无论是节点内还是跨节点，都可以直接通信，或者说所有pod工作在同一跨节点网络，此网络一般是二层虚拟网络，称为pod网络。在安装引导kubernetes时，由选择并安装的network plugin实现。默认情况下，集群中所有pod之间、pod与节点之间可以互通。</p><p>网络主要解决两个问题，一个是连通性，实体之间能够通过网络互通。另一个是隔离性，出于安全、限制网络流量的目的，又要控制实体之间的连通性。Network Policy用来实现隔离性，只有匹配规则的流量才能进入pod，同理只有匹配规则的流量才可以离开pod。</p><p>但请注意，kubernetes支持的用以实现pod网络的network plugin有很多种，并不是全部都支持Network Policy，为kubernetes选择network plugin时需要考虑到这点，是否需要隔离？可用network plugin及是否支持Network Policy请参考<a href="https://kubernetes.io/docs/concepts/cluster-administration/addons/#networking-and-network-policy">这里</a>。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>Network Policy是kubernetes中的一种资源类型，它从属于某个namespace。其内容从逻辑上看包含两个关键部分，一是pod选择器，基于标签选择相同namespace下的pod，将其中定义的规则作用于选中的pod。另一个就是规则了，就是网络流量进出pod的规则，其采用的是白名单模式，符合规则的通过，不符合规则的拒绝。</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">apiVersion:</span> networking.k8s.io<span class="symbol">/v1</span></span><br><span class="line"><span class="params">kind:</span> NetworkPolicy</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> test-network-policy</span><br><span class="line">  <span class="params">namespace:</span> default</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">podSelector:</span></span><br><span class="line">    <span class="params">matchLabels:</span>   <span class="comment"># 规则选择器，选择匹配的POD</span></span><br><span class="line">      <span class="params">role:</span> db</span><br><span class="line">  <span class="params">policyTypes:</span></span><br><span class="line">  <span class="operator">-</span> Ingress</span><br><span class="line">  <span class="operator">-</span> Egress</span><br><span class="line">  <span class="params">ingress:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">from:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">ipBlock:</span>     <span class="comment"># 远端(访问端)IP白名单开放</span></span><br><span class="line">        <span class="params">cidr:</span> <span class="number">172.17</span>.<span class="number">0.0</span><span class="symbol">/16</span></span><br><span class="line">        <span class="params">except:</span></span><br><span class="line">        <span class="operator">-</span> <span class="number">172.17</span>.<span class="number">1.0</span><span class="symbol">/24</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">namespaceSelector:</span>  <span class="comment"># 远端(访问端)namespaces白名单开放</span></span><br><span class="line">        <span class="params">matchLabels:</span></span><br><span class="line">          <span class="params">project:</span> myproject</span><br><span class="line">    <span class="operator">-</span> <span class="params">podSelector:</span>        <span class="comment"># 远端(访问端)Pod白名单开放</span></span><br><span class="line">        <span class="params">matchLabels:</span></span><br><span class="line">          <span class="params">role:</span> frontend</span><br><span class="line">    <span class="params">ports:</span>     <span class="comment"># 本端(被访问端)允许被访问的端口和协议</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">protocol:</span> TCP</span><br><span class="line">      <span class="params">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="params">egress:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">to:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">ipBlock:</span></span><br><span class="line">        <span class="params">cidr:</span> <span class="number">10.0</span>.<span class="number">0.0</span><span class="symbol">/24</span></span><br><span class="line">    <span class="params">ports:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">protocol:</span> TCP</span><br></pre></td></tr></tbody></table></figure><p>对象创建方法与其它如ReplicaSet相同。apiVersion、kind、metadata与其它类型对象含义相同，不详细描述。</p><ul><li><p>.spec.PodSelector<br>顾名思义，它是pod选择器，基于标签选择与Network Policy处于同一namespace下的pod，如果pod被选中，则对其应用Network Policy中定义的规则。此为可选字段，当没有此字段时，表示选中所有pod。</p></li><li><p>.spec.PolicyTypes<br>Network Policy定义的规则可以分成两种，一种是入pod的Ingress规则，一种是出pod的Egress规则。本字段可以看作是一个开关，如果其中包含Ingress，则Ingress部分定义的规则生效，如果是Egress则Egress部分定义的规则生效，如果都包含则全部生效。当然此字段也可选，如果没有指定的话，则默认Ingress生效，如果Egress部分有定义的话，Egress才生效。怎么理解这句话，下文会提到，没有明确定义Ingress、Egress部分，它也是一种规则，默认规则而非没有规则。</p></li><li><p>.spec.ingress与.spec.egress<br>前者定义入pod规则，后者定义出pod规则，详细参考这里，这里只讲一下重点。上例中ingress与egress都只包含一条规则，两者都是数组，可以包含多条规则。当包含多条时，条目之间的逻辑关系是“或”，只要匹配其中一条就可以。.spec.ingress[].from<br>也是数组，数组成员对访问pod的外部source进行描述，符合条件的source才可以访问pod，有多种方法，如示例中的ip地址块、名称空间、pod标签等，数组中的成员也是逻辑或的关系。spec.ingress[].from.prots表示允许通过的协议及端口号。</p></li><li><p>.spec.egress.to 定义的是pod想要访问的外部destination，其它与ingress相同。</p></li></ul><h3 id="kubernetes-默认NetworkPolicy"><a href="#kubernetes-默认NetworkPolicy" class="headerlink" title="kubernetes 默认NetworkPolicy:"></a>kubernetes 默认NetworkPolicy:</h3><figure class="highlight nestedtext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#默认禁止所有出口请求</span></span><br><span class="line"><span class="attribute">apiVersion</span><span class="punctuation">:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attribute">kind</span><span class="punctuation">:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attribute">metadata</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">name</span><span class="punctuation">:</span> <span class="string">default-deny</span></span><br><span class="line"><span class="attribute">spec</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">podSelector</span><span class="punctuation">:</span> <span class="string">{}</span></span><br><span class="line">  <span class="attribute">policyTypes</span><span class="punctuation">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Egress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认禁止所有入口请求</span></span><br><span class="line"><span class="attribute">apiVersion</span><span class="punctuation">:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attribute">kind</span><span class="punctuation">:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attribute">metadata</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">name</span><span class="punctuation">:</span> <span class="string">default-deny</span></span><br><span class="line"><span class="attribute">spec</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">podSelector</span><span class="punctuation">:</span> <span class="string">{}</span></span><br><span class="line">  <span class="attribute">policyTypes</span><span class="punctuation">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ingress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认允许所有出口请求</span></span><br><span class="line"><span class="attribute">apiVersion</span><span class="punctuation">:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attribute">kind</span><span class="punctuation">:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attribute">metadata</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">name</span><span class="punctuation">:</span> <span class="string">allow-all</span></span><br><span class="line"><span class="attribute">spec</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">podSelector</span><span class="punctuation">:</span> <span class="string">{}</span></span><br><span class="line">  <span class="attribute">egress</span><span class="punctuation">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">{}</span></span><br><span class="line">  <span class="attribute">policyTypes</span><span class="punctuation">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Egress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认允许所有入口请求</span></span><br><span class="line"><span class="attribute">apiVersion</span><span class="punctuation">:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attribute">kind</span><span class="punctuation">:</span> <span class="string">NetworkPolicy</span></span><br><span class="line"><span class="attribute">metadata</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">name</span><span class="punctuation">:</span> <span class="string">allow-all</span></span><br><span class="line"><span class="attribute">spec</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">podSelector</span><span class="punctuation">:</span> <span class="string">{}</span></span><br><span class="line">  <span class="attribute">egress</span><span class="punctuation">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">{}</span></span><br><span class="line">  <span class="attribute">policyTypes</span><span class="punctuation">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ingress</span></span><br></pre></td></tr></tbody></table></figure><p>默认策略 无需详解，但请注意，pod与所运行节点之间流量不受Network Policy限制。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面通过一个真实示例展示Network Policy普通用法。</p><h4 id="用Deployment创建nginx-pod实例并用service暴露"><a href="#用Deployment创建nginx-pod实例并用service暴露" class="headerlink" title="用Deployment创建nginx pod实例并用service暴露"></a>用Deployment创建nginx pod实例并用service暴露</h4><figure class="highlight routeros"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">run</span> nginx <span class="attribute">--image</span>=nginx <span class="attribute">--replicas</span>=3</span><br><span class="line">deployment.apps/nginx created</span><br><span class="line">$ kubectl expose deployment nginx <span class="attribute">--port</span>=80</span><br><span class="line">service/nginx exposed</span><br></pre></td></tr></tbody></table></figure><h4 id="确认创建结果"><a href="#确认创建结果" class="headerlink" title="确认创建结果"></a>确认创建结果</h4><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pod,svc</span><br><span class="line">NAME                         READY     STATUS    RESTARTS   AGE</span><br><span class="line">pod<span class="symbol">/nginx-64f497f8fd-9mfd7</span>   <span class="number">1</span><span class="symbol">/1</span>       Running   <span class="number">0</span>          <span class="number">2</span>m</span><br><span class="line">pod<span class="symbol">/nginx-64f497f8fd-nss94</span>   <span class="number">1</span><span class="symbol">/1</span>       Running   <span class="number">0</span>          <span class="number">2</span>m</span><br><span class="line">pod<span class="symbol">/nginx-64f497f8fd-zs926</span>   <span class="number">1</span><span class="symbol">/1</span>       Running   <span class="number">0</span>          <span class="number">2</span>m</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service<span class="symbol">/kubernetes</span>   ClusterIP   <span class="number">10.96</span>.<span class="number">0.1</span>        <span class="symbol">&lt;none&gt;</span>        <span class="number">443</span><span class="symbol">/TCP</span>   <span class="number">3</span>d</span><br><span class="line">service<span class="symbol">/nginx</span>        ClusterIP   <span class="number">10.111</span>.<span class="number">254.191</span>   <span class="symbol">&lt;none&gt;</span>        <span class="number">80</span><span class="symbol">/TCP</span>    <span class="number">14</span>s</span><br></pre></td></tr></tbody></table></figure><h4 id="测试nginx服务连通性"><a href="#测试nginx服务连通性" class="headerlink" title="测试nginx服务连通性"></a>测试nginx服务连通性</h4><figure class="highlight jboss-cli"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$  kubectl run busybox <span class="params">--rm</span> -it <span class="params">--image=busybox</span> <span class="string">/bin/sh</span></span><br><span class="line">If you don't see a <span class="keyword">command</span> prompt, <span class="keyword">try</span> pressing enter.</span><br><span class="line">/ <span class="comment"># wget --spider --timeout=3 nginx</span></span><br><span class="line">Connecting to nginx <span class="params">(10.111.254.191:80)</span>  <span class="comment"># 说明通的</span></span><br><span class="line">/ <span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure><h4 id="通过创建Network-Policy对象添加隔离性"><a href="#通过创建Network-Policy对象添加隔离性" class="headerlink" title="通过创建Network Policy对象添加隔离性"></a>通过创建Network Policy对象添加隔离性</h4><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="operator">&gt;</span><span class="operator">&gt;</span> pod-network-policy.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">kind:</span> NetworkPolicy</span><br><span class="line"><span class="params">apiVersion:</span> networking.k8s.io<span class="symbol">/v1</span></span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> access-nginx</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">podSelector:</span></span><br><span class="line">    <span class="params">matchLabels:</span> <span class="comment"># 默认该pod就有run=app这个标签了，我这里无需在从新定义</span></span><br><span class="line">      <span class="params">run:</span> nginx  </span><br><span class="line">  <span class="params">ingress:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">from:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">podSelector:</span></span><br><span class="line">        <span class="params">matchLabels:</span></span><br><span class="line">          <span class="params">access:</span> <span class="string">"true"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行创建</span></span><br><span class="line">$ kubectl create <span class="operator">-</span>f pod-network-policy.yaml</span><br><span class="line">networkpolicy.networking.k8s.io<span class="symbol">/access-nginx</span> created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看具体隔离策略</span></span><br><span class="line">$ kubectl describe networkpolicy access-nginx</span><br><span class="line"><span class="params">Name:</span>         access-nginx</span><br><span class="line"><span class="params">Namespace:</span>    default</span><br><span class="line">Created <span class="params">on:</span>   <span class="number">201</span>8-<span class="number">1</span>2-<span class="number">17</span> <span class="number">01</span>:<span class="number">16</span>:<span class="number">57</span> <span class="operator">-</span><span class="number">0500</span> EST</span><br><span class="line"><span class="params">Labels:</span>       <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">Annotations:</span>  <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">Spec:</span></span><br><span class="line">  <span class="params">PodSelector:</span>     run<span class="operator">=</span>nginx</span><br><span class="line">  Allowing ingress <span class="params">traffic:</span></span><br><span class="line">    To <span class="params">Port:</span> <span class="symbol">&lt;any&gt;</span> (traffic allowed to all ports)</span><br><span class="line">    <span class="params">From:</span></span><br><span class="line">      <span class="params">PodSelector:</span> access<span class="operator">=</span><span class="literal">true</span></span><br><span class="line">  Allowing egress <span class="params">traffic:</span></span><br><span class="line">    <span class="symbol">&lt;none&gt;</span> (Selected pods are isolated for egress connectivity)</span><br><span class="line">  Policy <span class="params">Types:</span> Ingress</span><br></pre></td></tr></tbody></table></figure><h4 id="测试隔离性"><a href="#测试隔离性" class="headerlink" title="测试隔离性"></a>测试隔离性</h4><figure class="highlight jboss-cli"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl run busybox <span class="params">--rm</span> -it <span class="params">--image=busybox</span> <span class="string">/bin/sh</span></span><br><span class="line">If you don't see a <span class="keyword">command</span> prompt, <span class="keyword">try</span> pressing enter.</span><br><span class="line">/ <span class="comment"># wget --spider --timeout=3 nginx</span></span><br><span class="line">Connecting to nginx <span class="params">(10.111.254.191:80)</span></span><br><span class="line">wget: download timed out <span class="comment"># 已经超时，说明已经不能访问了</span></span><br></pre></td></tr></tbody></table></figure><h4 id="为pod添加access-“true”标签后再次测试连通性"><a href="#为pod添加access-“true”标签后再次测试连通性" class="headerlink" title="为pod添加access: “true”标签后再次测试连通性"></a>为pod添加access: “true”标签后再次测试连通性</h4><figure class="highlight jboss-cli"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl run busybox <span class="params">--rm</span> -it <span class="params">--labels=</span><span class="string">"access=true"</span> <span class="params">--image=busybox</span> <span class="string">/bin/sh</span></span><br><span class="line">If you don't see a <span class="keyword">command</span> prompt, <span class="keyword">try</span> pressing enter.</span><br><span class="line">/ <span class="comment"># wget --spider --timeout=3 nginx</span></span><br><span class="line">Connecting to nginx <span class="params">(10.111.254.191:80)</span></span><br></pre></td></tr></tbody></table></figure><p>参考:<br><a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/">https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/</a><br><a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/">https://kubernetes.io/docs/reference/access-authn-authz/rbac/</a><br><a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/">https://kubernetes.io/docs/concepts/services-networking/network-policies/</a><br><a href="https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/">https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/</a><br><a href="https://kubernetes.io/docs/concepts/policy/pod-security-policy/">https://kubernetes.io/docs/concepts/policy/pod-security-policy/</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;首先需要了解这三种机制的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认证(Authenticating)是对客户端的认证，通俗点就是用户名密码验证，&lt;/li&gt;
&lt;li&gt;授权(Authorization)是对资源的授权，k8s中的资源无非是容器，最终其实就是容器的计算，网络，存储资源，当一个请求经过认证后，需要访问某一个资源（比如创建一个pod），授权检查都会通过访问策略比较该请求上下文的属性，（比如用户，资源和Namespace），根据授权规则判定该资源（比如某namespace下的pod）是否是该客户可访问的。&lt;/li&gt;
&lt;li&gt;准入(Admission Control)机制是一种在改变资源的持久化之前（比如某些资源的创建或删除，修改等之前）的机制。&lt;br&gt;在k8s中，这三种机制如下图：&lt;br&gt;&lt;img src=&quot;/2018/12/16/kubernetes-auth/k8s-authorition.png&quot; alt=&quot;k8s-authorition&quot;&gt;&lt;br&gt;k8s的整体架构也是一个微服务的架构，所有的请求都是通过一个GateWay，也就是kube-apiserver这个组件（对外提供REST服务），由图中可以看出，k8s中客户端有两类，一种是普通用户，一种是集群内的Pod，这两种客户端的认证机制略有不同，后文会详述。但无论是哪一种，都需要依次经过认证，授权，准入这三个机制。&lt;br&gt;&lt;img src=&quot;/2018/12/16/kubernetes-auth/auththentication&amp;amp;authorization.png&quot; alt=&quot;截图来自华为CCE云课堂&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;kubernetes-中的认证机制&quot;&gt;&lt;a href=&quot;#kubernetes-中的认证机制&quot; class=&quot;headerlink&quot; title=&quot;kubernetes 中的认证机制&quot;&gt;&lt;/a&gt;kubernetes 中的认证机制&lt;/h1&gt;&lt;p&gt;需要注意的是，kubernetes虽然提供了多种认证机制，但并没有提供user 实体信息的存储，也就是说，账户体系需要我们自己去做维护。当然，也可以接入第三方账户体系（如谷歌账户），也可以使用开源的keystone去做整合。kubernetes 支持多种认证机制，可以配置成多个认证体制共存，这样，只要有一个认证通过，这个request就认证通过了。下面列举的是官网几种常见认证机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X509 Client Certs&lt;/li&gt;
&lt;li&gt;Static Token File&lt;/li&gt;
&lt;li&gt;Bootstrap Tokens&lt;/li&gt;
&lt;li&gt;Static Password File&lt;/li&gt;
&lt;li&gt;Service Account Tokens&lt;/li&gt;
&lt;li&gt;OpenID Connect Tokens&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我主要还是理解一下常用认证方式:&lt;/p&gt;
&lt;h2 id=&quot;X509-Client-Certs&quot;&gt;&lt;a href=&quot;#X509-Client-Certs&quot; class=&quot;headerlink&quot; title=&quot;X509 Client Certs&quot;&gt;&lt;/a&gt;X509 Client Certs&lt;/h2&gt;&lt;p&gt;也叫作双向数字证书认证，HTTPS证书认证，是基于CA根证书签名的双向数字证书认证方式，是所有认证方式中最严格的认证。默认在kubeadm创建的集群中是enabled的，可以在master node上查看kube-apiserver的pod配置文件：&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ cat /usr/lib/systemd/system/kube-apiserver.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;ExecStart&lt;/span&gt;=/usr/local/bin/kube-apiserver &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--v&lt;/span&gt;=2  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--logtostderr&lt;/span&gt;=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--allow-privileged&lt;/span&gt;=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--bind-address&lt;/span&gt;=0.0.0.0  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--secure-port&lt;/span&gt;=6443  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--insecure-port&lt;/span&gt;=0  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--advertise-address&lt;/span&gt;=192.168.56.110 &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--service-cluster-ip-range&lt;/span&gt;=10.96.0.0/12  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--service-node-port-range&lt;/span&gt;=30000-32767  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--etcd-servers&lt;/span&gt;=https://192.168.56.111:2379,https://192.168.56.112:2379,https://192.168.56.113:2379 &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--etcd-cafile&lt;/span&gt;=/etc/etcd/ssl/etcd-ca.pem  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--etcd-certfile&lt;/span&gt;=/etc/etcd/ssl/etcd.pem  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--etcd-keyfile&lt;/span&gt;=/etc/etcd/ssl/etcd-key.pem  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--client-ca-file&lt;/span&gt;=/etc/kubernetes/pki/ca.pem  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--tls-cert-file&lt;/span&gt;=/etc/kubernetes/pki/apiserver.pem  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--tls-private-key-file&lt;/span&gt;=/etc/kubernetes/pki/apiserver-key.pem  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--kubelet-client-certificate&lt;/span&gt;=/etc/kubernetes/pki/apiserver.pem  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attribute&quot;&gt;--kubelet-client-key&lt;/span&gt;=/etc/kubernetes/pki/apiserver-key.pem  &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;..&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/tags/kubernetes/"/>
    
    <category term="ServiceAccount" scheme="https://blog.sctux.cc/tags/ServiceAccount/"/>
    
    <category term="Kubeconfig" scheme="https://blog.sctux.cc/tags/Kubeconfig/"/>
    
    <category term="RBAC" scheme="https://blog.sctux.cc/tags/RBAC/"/>
    
    <category term="Admission" scheme="https://blog.sctux.cc/tags/Admission/"/>
    
    <category term="PodSecurityContext" scheme="https://blog.sctux.cc/tags/PodSecurityContext/"/>
    
    <category term="NetworkPolicy" scheme="https://blog.sctux.cc/tags/NetworkPolicy/"/>
    
  </entry>
  
  <entry>
    <title>理解kubernetes中的Storage</title>
    <link href="https://blog.sctux.cc/2018/12/15/kubernetes-storage/"/>
    <id>https://blog.sctux.cc/2018/12/15/kubernetes-storage/</id>
    <published>2018-12-15T00:27:08.000Z</published>
    <updated>2025-09-01T01:59:08.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序、为何需要存储卷"><a href="#序、为何需要存储卷" class="headerlink" title="序、为何需要存储卷"></a>序、为何需要存储卷</h1><p>容器部署过程中一般有以下三种数据:</p><ul><li>启动时需要的初始数据，可以是配置文件</li><li>启动过程中产生的临时数据，该临时数据需要多个容器间共享</li><li>启动过程中产生的持久化数据</li></ul><p>以上三种数据都不希望在容器重启时就消失，存储卷由此而来，它可以根据不同场景提供不同类型的存储能力。<br>各类卷:</p><div style="width: 50%; margin: auto">![截图来源华为云cce课堂](kubernetes-storage/volume.png)</div><ul><li>spec.volumes：通过此字段提供指定的存储卷</li><li>spec.containers.volumeMounts：通过此字段将存储卷挂接到容器中</li></ul><h1 id="一、普通存储卷的用法"><a href="#一、普通存储卷的用法" class="headerlink" title="一、普通存储卷的用法:"></a>一、普通存储卷的用法:</h1><h2 id="容器启动时依赖数据"><a href="#容器启动时依赖数据" class="headerlink" title="容器启动时依赖数据"></a>容器启动时依赖数据</h2><h3 id="1-ConfigMap"><a href="#1-ConfigMap" class="headerlink" title="1. ConfigMap"></a>1. ConfigMap</h3><p>上图也说了它是在容器启动的时候以来的数据来源</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建configmap预制数据卷</span></span><br><span class="line">cat <span class="operator">&gt;</span><span class="operator">&gt;</span> configmap.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">data:</span></span><br><span class="line">  <span class="params">guomaoqiu:</span> hello-world</span><br><span class="line"><span class="params">kind:</span> ConfigMap</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> test</span><br><span class="line">EOF</span><br><span class="line">$ kubectl create <span class="operator">-</span>f configmap.yaml</span><br><span class="line">configmap<span class="symbol">/test</span> created</span><br><span class="line"><span class="comment"># 2. 创建pod来使用这个configmap</span></span><br><span class="line"><span class="comment"># 这里我创建了一个nginx pod 让他启动是挂载这个数据</span></span><br><span class="line">$ cat nginx-deployment.yaml</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">    <span class="params">spec:</span></span><br><span class="line">      <span class="params">containers:</span></span><br><span class="line">      <span class="operator">-</span> <span class="params">image:</span> nginx</span><br><span class="line">        <span class="params">name:</span> nginx</span><br><span class="line">        <span class="params">resources:</span> {}</span><br><span class="line">        <span class="params">volumeMounts:</span></span><br><span class="line">        <span class="operator">-</span> <span class="params">name:</span> test</span><br><span class="line">          <span class="params">mountPath:</span> <span class="symbol">/tmp</span>  <span class="comment"># 挂载点</span></span><br><span class="line">      <span class="params">volumes:</span></span><br><span class="line">      <span class="operator">-</span> <span class="params">name:</span> test</span><br><span class="line">        <span class="params">configMap:</span> </span><br><span class="line">          <span class="params">name:</span> test       <span class="comment"># ConfigMap name</span></span><br><span class="line">          <span class="params">defaultMode:</span> <span class="number">420</span> <span class="comment"># 指定挂载到pod文件的权限</span></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.检查数据是否挂载进pod</span></span><br><span class="line">kubectl exec  nginx-<span class="number">7</span>d8bb9c4fc-bxxkt <span class="operator">-</span>- ls <span class="symbol">/tmp</span></span><br><span class="line">guomaoqiu</span><br><span class="line">kubectl exec  nginx-<span class="number">7</span>d8bb9c4fc-bxxkt <span class="operator">-</span>- cat <span class="symbol">/tmp/guomaoqiu</span></span><br><span class="line">hello-world                                                                                                                                                                                                                                 $</span><br><span class="line"><span class="comment"># 以上可以看到将configmap的key作为了文件名，将value作为了文件的内容。</span></span><br><span class="line"><span class="comment"># 他的作用也就是允许您将配置文件从容器镜像中解耦，从而增强容器应用的可移植性</span></span><br><span class="line"><span class="comment"># 更多可查看: https://k8smeetup.github.io/docs/tasks/configure-pod-container/configmap/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-Serect"><a href="#2-Serect" class="headerlink" title="2. Serect"></a>2. Serect</h3><p>Secret 是一种包含少量敏感信息例如密码、token 或 key 的对象。这样的信息可能会被放在 Pod spec 中或者镜像中；将其放在一个 secret 对象中可以更好地控制它的用途，并降低意外暴露的风险。</p><p>用户可以创建 secret，同时系统也创建了一些 secret。<br>要使用 secret，pod 需要引用 secret。Pod 可以用两种方式使用 secret：作为 volume 中的文件被挂载到 pod 中的一个或者多个容器里，或者当 kubelet 为 pod 拉取镜像时使用。</p><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><p>假设有些 pod 需要访问数据库。这些 pod 需要使用的用户名和密码在您本地机器的 ./username.txt 和 ./password.txt 文件里。</p><figure class="highlight jboss-cli"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create files needed for rest of example.</span></span><br><span class="line"><span class="keyword">echo</span> -n <span class="string">"admin"</span> &gt; <span class="string">./username.txt</span></span><br><span class="line"><span class="keyword">echo</span> -n <span class="string">"1f2d1e2e67df"</span> &gt; <span class="string">./password.txt</span></span><br></pre></td></tr></tbody></table></figure><p>kubectl create secret 命令将这些文件打包到一个 Secret 中并在 API server 中创建了一个对象。</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create secret generic db-user-pass <span class="operator">-</span>-from-file<span class="operator">=</span><span class="symbol">./username.txt</span> <span class="operator">-</span>-from-file<span class="operator">=</span><span class="symbol">./password.txt</span></span><br><span class="line">secret<span class="symbol">/db-user-pass</span> created</span><br><span class="line"></span><br><span class="line">$ kubectl describe secret db-user-pass</span><br><span class="line"><span class="params">Name:</span>         db-user-pass</span><br><span class="line"><span class="params">Namespace:</span>    default</span><br><span class="line"><span class="params">Labels:</span>       <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">Annotations:</span>  <span class="symbol">&lt;none&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">Type:</span>  Opaque</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line"><span class="operator">==</span><span class="operator">==</span></span><br><span class="line">password.<span class="params">txt:</span>  <span class="number">12</span> bytes</span><br><span class="line">username.<span class="params">txt:</span>  <span class="number">5</span> bytes</span><br><span class="line"><span class="comment"># 默认情况下，get 和 describe 命令都不会显示文件的内容。</span></span><br><span class="line"><span class="comment"># 这是为了防止将 secret 中的内容被意外暴露给从终端日志记录中刻意寻找它们的人。</span></span><br></pre></td></tr></tbody></table></figure><p>在 Pod 中使用 Secret 文件<br>在挂载的 secret volume 的容器内，secret key 将作为文件，并且 secret 的值使用 base-64 解码并存储在这些文件中。这是在上面的示例容器内执行的命令的结果：</p><figure class="highlight swift"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> kubectl exec <span class="operator">-</span>it mypod <span class="regexp">/bin/</span>bash</span><br><span class="line">root<span class="meta">@mypod</span>:<span class="regexp">/# cat /</span>etc<span class="regexp">/foo/</span>username.txt</span><br><span class="line">admin</span><br><span class="line">root<span class="meta">@mypod</span>:<span class="regexp">/# cat /</span>etc<span class="regexp">/foo/</span>password.txt</span><br><span class="line">1f2d1e2e67df</span><br></pre></td></tr></tbody></table></figure><p>容器中的程序负责从文件中读取 secret。<br>关于secret挂载使用方法 更多：<a href="https://kubernetes.io/zh/docs/concepts/configuration/secret/#secret-%E4%B8%8E-pod-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E8%81%94%E7%B3%BB">https://kubernetes.io/zh/docs/concepts/configuration/secret/#secret-%E4%B8%8E-pod-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E8%81%94%E7%B3%BB</a></p><h2 id="临时数据存储"><a href="#临时数据存储" class="headerlink" title="临时数据存储"></a>临时数据存储</h2><h3 id="1-emptryDir"><a href="#1-emptryDir" class="headerlink" title="1. emptryDir"></a>1. emptryDir</h3><p>当 Pod 被分配给节点时，首先创建 emptyDir 卷，并且只要该 Pod 在该节点上运行，该卷就会存在。正如卷的名字所述，它最初是空的。Pod 中的容器可以读取和写入 emptyDir 卷中的相同文件，尽管该卷可以挂载到每个容器中的相同或不同路径上。当出于任何原因从节点中删除 Pod 时，emptyDir 中的数据将被永久删除。</p><p>注意：容器崩溃不会从节点中移除 pod，因此 emptyDir 卷中的数据在容器崩溃时是安全的。</p><p>缺省情况下，EmptyDir 是使用主机磁盘进行存储的，也可以设置emptyDir.medium 字段的值为Memory，来提高运行速度，但是这种设置，对该卷的占用会消耗容器的内存份额。</p><p>emptyDir 的用法有：</p><ul><li>暂存空间，例如用于基于磁盘的合并排序</li><li>用作长时间计算崩溃恢复时的检查点</li><li>Web服务器容器提供数据时，保存内容管理器容器提取的文件</li><li>可以在同一 Pod 内的不同容器之间共享工作过程中产生的文件。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Pod</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> test-emptydir-pod</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">containers:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">image:</span> nginx</span><br><span class="line">    <span class="params">imagePullPolicy:</span> IfNotPresent</span><br><span class="line">    <span class="params">name:</span> test-emptydir-pod</span><br><span class="line">    <span class="params">volumeMounts:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">mountPath:</span> <span class="symbol">/temp-data</span>      <span class="comment"># 挂载点</span></span><br><span class="line">      <span class="params">name:</span> temp-data</span><br><span class="line">  <span class="params">volumes:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">name:</span> temp-data</span><br><span class="line">    <span class="params">emptyDir:</span> {}</span><br></pre></td></tr></tbody></table></figure><p>创建pod</p><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> kubectl create -f test-emptydir-pod.yaml</span><br><span class="line">pod/test-emptydir-pod created</span><br><span class="line">$ kubectl get pods -o wide</span><br><span class="line">NAME                READY     STATUS    RESTARTS   AGE       IP            <span class="keyword">NODE</span>      <span class="title">NOMINATED</span> <span class="keyword">NODE</span></span><br><span class="line"><span class="title">test-emptydir-pod</span>   <span class="number">1</span>/<span class="number">1</span>       Running   <span class="number">0</span>          <span class="number">18s</span>       <span class="number">10.244</span>.<span class="number">0.23</span>   k8s-m3    <span class="tag">&lt;none&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>此时Emptydir已经创建成功，在宿主机上的访问路径为/var/lib/kubelet/pods/<pod uid="">/volumes/kubernetes.io~empty-dir/temp-data,如果在此目录中创建删除文件，都将对容器中的/data目录有影响，如果删除Pod，文件将全部删除，即使是在宿主机上创建的文件也是如此，在宿主机上删除容器则k8s会再自动创建一个容器，此时文件仍然存在。</pod></p><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 pod uid</span></span><br><span class="line"><span class="attribute">kubectl</span> get pod test-emptydir-pod -o yaml | grep -n uid</span><br><span class="line"><span class="attribute">11</span>:  uid: <span class="number">3328</span>c9e1-ff8f-<span class="number">11</span>e8-b6d6-<span class="number">00505621</span>dd5b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录到节点k8s-m3 查看</span></span><br><span class="line"> <span class="attribute">ll</span> /var/lib/kubelet/pods/<span class="number">3328</span>c9e1-ff8f-<span class="number">11</span>e8-b6d6-<span class="number">00505621</span>dd5b/volumes/kubernetes.io~empty-dir/</span><br><span class="line"><span class="attribute">total</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">drwxrwxrwx</span> <span class="number">2</span> root root <span class="number">6</span> Dec <span class="number">14</span> <span class="number">05</span>:<span class="number">58</span> temp-data</span><br></pre></td></tr></tbody></table></figure><h3 id="2-hostPath"><a href="#2-hostPath" class="headerlink" title="2. hostPath"></a>2. hostPath</h3><p>hostPath volume映射node文件系统中的文件或者目录到pod里。大多数Pod都不需要这个功能，但对于一些特定的场景，该特性还是很有作用的。这些场景包括： </p><ul><li>运行的容器需要访问Docker内部结构：使用hostPath映射/var/lib/docker </li><li>在容器中运行cAdvisor，使用hostPath映射/dev/cgroups</li></ul><p>不过，使用这种volume要小心，因为： </p><ul><li>配置相同的pod（如通过podTemplate创建），可能在不同的Node上表现不同，因为不同节点上映射的文件内容不同 </li><li>当Kubernetes增加了资源敏感的调度程序，hostPath使用的资源不会被计算在内 </li><li>宿主机下创建的目录只有root有写权限。你需要让你的程序运行在privileged container上，或者修改宿主机上的文件权限。</li></ul><p>　</p><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><p>假设我们在创建docker镜像的时候忘记了更改容器中的时区文件；这时候想把宿主机的/usr/share/zoneinfo/Asia/Shanghai挂到pod中的容器内(这里为了学习挂载方式，暂且不谈不同系统或不同宿主机的一些配置或路径)</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Pod</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> test-emptydir-pod</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">containers:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">image:</span> nginx</span><br><span class="line">    <span class="params">imagePullPolicy:</span> IfNotPresent</span><br><span class="line">    <span class="params">name:</span> test-emptydir-pod</span><br><span class="line">    <span class="params">volumeMounts:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">name:</span> container-time</span><br><span class="line">      <span class="params">mountPath:</span> <span class="symbol">/etc/localtime</span>  <span class="comment"># 挂载点，container启动后直接挂载覆盖此文件</span></span><br><span class="line">  <span class="params">volumes:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">name:</span> container-time</span><br><span class="line">    <span class="params">hostPath:</span> </span><br><span class="line">      <span class="params">path:</span> <span class="symbol">/usr/share/zoneinfo/Asia/Shanghai</span>  <span class="comment"># 挂载时区文件到container中</span></span><br></pre></td></tr></tbody></table></figure><p>通过创建pod后登录检查时区正常.</p><h1 id="二、持久存储卷的用法"><a href="#二、持久存储卷的用法" class="headerlink" title="二、持久存储卷的用法:"></a>二、持久存储卷的用法:</h1><p>学习持久化存储之前需要学习一下以下概念：<br>Volume 提供了非常好的数据持久化方案，不过在可管理性上还有不足。<br>拿前面 AWS EBS 的例子来说，要使用 Volume，Pod 必须事先知道如下信息：</p><ul><li>当前 Volume 来自 AWS EBS。</li><li>EBS Volume 已经提前创建，并且知道确切的 volume-id。</li></ul><p>Pod 通常是由应用的开发人员维护，而 Volume 则通常是由存储系统的管理员维护。开发人员要获得上面的信息：</p><ul><li>要么询问管理员。</li><li>要么自己就是管理员。</li></ul><p>这样就带来一个管理上的问题：应用开发人员和系统管理员的职责耦合在一起了。如果系统规模较小或者对于开发环境这样的情况还可以接受。但当集群规模变大，特别是对于生成环境，考虑到效率和安全性，这就成了必须要解决的问题。</p><p>Kubernetes 给出的解决方案是 PersistentVolume 和 PersistentVolumeClaim。</p><p>PersistentVolume (PV) 是外部存储系统中的一块存储空间，由管理员创建和维护。与 Volume 一样，PV 具有持久性，生命周期独立于 Pod。</p><p>PersistentVolumeClaim (PVC) 是对 PV 的申请 (Claim)。PVC 通常由普通用户创建和维护。需要为 Pod 分配存储资源时，用户可以创建一个 PVC，指明存储资源的容量大小和访问模式（比如只读）等信息，Kubernetes 会查找并提供满足条件的 PV。</p><p>有了 PersistentVolumeClaim，用户只需要告诉 Kubernetes 需要什么样的存储资源，而不必关心真正的空间从哪里分配，如何访问等底层细节信息。这些 Storage Provider 的底层信息交给管理员来处理，只有管理员才应该关心创建 PersistentVolume 的细节信息。</p><p>Kubernetes 支持多种类型的 PersistentVolume，比如 AWS EBS、Ceph、NFS 等，完整列表请参考 <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes</a></p><p>主要包括:<code>NFS</code>/<code>GlusterFS</code>/<code>CephFS</code>/<code>AWS</code>/<code>GCE</code>等等<br>作为一个容器集群，支持网络存储自然是重中之重了,Kubernetes支持为数众多的云提供商和网络存储方案。<br>不同公司选择的方案也是不相同。</p><p>下节我用 NFS 来体会它存储的使用方法。</p><h2 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h2><h3 id="NFS的搭建"><a href="#NFS的搭建" class="headerlink" title="NFS的搭建"></a>NFS的搭建</h3><h4 id="1-在NFS存储的服务器创建存储目录"><a href="#1-在NFS存储的服务器创建存储目录" class="headerlink" title="1. 在NFS存储的服务器创建存储目录:"></a>1. 在NFS存储的服务器创建存储目录:</h4><figure class="highlight autohotkey"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这里先创建三个共享目录稍后会用到.</span><br><span class="line">$ mkdir /{nfs_dat<span class="built_in">a_1</span>,nfs_dat<span class="built_in">a_2</span>,nfs_dat<span class="built_in">a_3</span>}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-安装nfs"><a href="#2-安装nfs" class="headerlink" title="2. 安装nfs:"></a>2. 安装nfs:</h4><figure class="highlight cmake"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y <span class="keyword">install</span> nfs-utils rpcbind</span><br></pre></td></tr></tbody></table></figure><h4 id="3-写入配置"><a href="#3-写入配置" class="headerlink" title="3. 写入配置"></a>3. 写入配置</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"/nfs_data_1 *(rw,sync,no_subtree_check,no_root_squash)"</span> &gt; /etc/exports</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/nfs_data_2 *(rw,sync,no_subtree_check,no_root_squash)"</span> &gt;&gt; /etc/exports</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/nfs_data_3 *(rw,sync,no_subtree_check,no_root_squash)"</span> &gt;&gt; /etc/exports</span><br></pre></td></tr></tbody></table></figure><h4 id="4-重启nfs服务验证"><a href="#4-重启nfs服务验证" class="headerlink" title="4. 重启nfs服务验证"></a>4. 重启nfs服务验证</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nfs-server</span><br><span class="line">showmount -e 192.168.56.113  <span class="comment"># NFS Server</span></span><br><span class="line">Export list <span class="keyword">for</span> 192.168.56.113:</span><br><span class="line">/nfs_data_3 *</span><br><span class="line">/nfs_data_2 *</span><br><span class="line">/nfs_data_1 *</span><br><span class="line"></span><br><span class="line"><span class="comment"># nfs安装并且共享目录已经创建完毕</span></span><br></pre></td></tr></tbody></table></figure><h3 id="NFS作为普通存储卷"><a href="#NFS作为普通存储卷" class="headerlink" title="NFS作为普通存储卷"></a>NFS作为普通存储卷</h3><p>在Kubernetes中，可以通过nfs类型的存储卷将现有的NFS（网络文件系统）到的挂接到Pod中。在移除Pod时，NFS存储卷中的内容被不会被删除，只是将存储卷卸载而已。这意味着在NFS存储卷总可以预先填充数据，并且可以在Pod之间共享数据。NFS可以被同时挂接到多个Pod中，并能同时进行写入。需要注意的是：在使用nfs存储卷之前，必须已正确部署和运行NFS服务器，并已经设置了共享目录。</p><h4 id="创建一个pod，让其挂载上面创建的共享目录"><a href="#创建一个pod，让其挂载上面创建的共享目录" class="headerlink" title="创建一个pod，让其挂载上面创建的共享目录"></a>创建一个pod，让其挂载上面创建的共享目录</h4><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="operator">&gt;</span><span class="operator">&gt;</span> nfs-busybox <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Pod</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> nfs-busybox-pod</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">containers:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">name:</span> nfs-busybox-pod</span><br><span class="line">    <span class="params">image:</span> busybox</span><br><span class="line">    <span class="params">imagePullPolicy:</span> IfNotPresent</span><br><span class="line">    <span class="params">command:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"/bin/sh"</span></span><br><span class="line">    <span class="params">args:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"-c"</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"touch /mnt/SUCCESS &amp;&amp; exit 0 || exit 1"</span></span><br><span class="line">    <span class="params">volumeMounts:</span></span><br><span class="line">      <span class="operator">-</span> <span class="params">name:</span> nfs-busybox-storage</span><br><span class="line">        <span class="params">mountPath:</span> <span class="string">"/mnt"</span></span><br><span class="line">  <span class="params">restartPolicy:</span> <span class="string">"Never"</span></span><br><span class="line">  <span class="params">volumes:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">name:</span> nfs-busybox-storage</span><br><span class="line">      <span class="params">nfs:</span></span><br><span class="line">        <span class="params">path:</span> <span class="symbol">/nfs_data_1</span>       <span class="comment"># NFS 共享目录</span></span><br><span class="line">        <span class="params">server:</span> <span class="number">192.168</span>.<span class="number">56.113</span>  <span class="comment"># NFS Server</span></span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><p>启动POD，一会儿POD就是completed状态，说明执行完毕。</p><figure class="highlight processing"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f <span class="built_in">nfs</span>-busybox.<span class="property">yaml</span></span><br><span class="line">pod/<span class="built_in">nfs</span>-busybox-pod created</span><br><span class="line">$ kubectl <span class="built_in">get</span> pods</span><br><span class="line">NAME              READY     STATUS      RESTARTS   AGE</span><br><span class="line"><span class="built_in">nfs</span>-busybox-pod   <span class="number">0</span>/<span class="number">1</span>       Completed   <span class="number">0</span>          <span class="number">7</span>s</span><br></pre></td></tr></tbody></table></figure><p>我们去NFS Server共享目录查看有没有SUCCESS文件。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /nfs_data_1/</span><br><span class="line">SUCCESS</span><br></pre></td></tr></tbody></table></figure><p>说明当NFS作为普通存储卷时我们挂载到pod容器中产生数据将会保存到这个存储卷当中，并且删除pod不会影响数据。</p><hr><h3 id="如何基于NFS文件系统创建持久化存储？"><a href="#如何基于NFS文件系统创建持久化存储？" class="headerlink" title="如何基于NFS文件系统创建持久化存储？"></a>如何基于NFS文件系统创建持久化存储？</h3><p>Provisioning: PV的预制创建有两种模式：<code>静态</code>和<code>动态</code>供给模式，他们的含义是：</p><p><code>静态供给模式</code>: 需要先手动创建PV, 然后通过 PVC 申请 PV 并在 Pod 中使用，这种方式叫做静态供给（Static Provision）。<br><code>动态供给模式</code>: 只需要创建PVC，系统根据PVC创建PV, 如果没有满足 PVC 条件的 PV，会动态创建 PV。相比静态供给，动态供给(Dynamical Provision）有明显的优势：不需要提前创建 PV，减少了管理员的工作量，效率高.</p><p>动态供给是通过 StorageClass 实现的，StorageClass 定义了如何创建 PV。<br><img src="/2018/12/15/kubernetes-storage/k8s-pvc.png" alt="k8s-pv"></p><p>下面就分别实践这两种模式的创建跟使用:</p><h3 id="NFS作为静态供给模式持久化存储卷"><a href="#NFS作为静态供给模式持久化存储卷" class="headerlink" title="NFS作为静态供给模式持久化存储卷"></a>NFS作为静态供给模式持久化存储卷</h3><figure class="highlight brainfuck"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">手动创建PV</span><span class="literal">---</span>&gt;<span class="comment">手动创建PVC</span><span class="literal">---</span>&gt;<span class="comment">POD挂载使用</span></span><br></pre></td></tr></tbody></table></figure><h4 id="1-创建PV"><a href="#1-创建PV" class="headerlink" title="1. 创建PV"></a>1. 创建PV</h4><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="operator">&gt;</span><span class="operator">&gt;</span> nfs-test-pv.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> PersistentVolume</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> nfs-test-pv</span><br><span class="line">  <span class="params">namespace:</span> default</span><br><span class="line">  <span class="params">labels:</span></span><br><span class="line">    <span class="params">app:</span> nfs-test-pv</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">capacity:</span></span><br><span class="line">    <span class="params">storage:</span> <span class="number">5</span>Gi   <span class="comment"># 指定PV容量为5G</span></span><br><span class="line">  <span class="params">accessModes:</span></span><br><span class="line">    <span class="operator">-</span> ReadWriteOnce <span class="comment">#  指定访问模式为 ReadWriteOnce</span></span><br><span class="line">  <span class="params">persistentVolumeReclaimPolicy:</span> Recycle <span class="comment"># 指定当 PV 的回收策略为 Recycle</span></span><br><span class="line">  <span class="params">storageClassName:</span> nfs   <span class="comment"># 定 PV 的 class 为 nfs。相当于为 PV 设置了一个分类，PVC 可以指定 class 申请相应 class 的 PV。</span></span><br><span class="line">  <span class="params">nfs:</span></span><br><span class="line">    <span class="params">path:</span> <span class="symbol">/nfs_data_2</span> <span class="comment"># 指定 PV 在 NFS 服务器上对应的目录</span></span><br><span class="line">    <span class="params">server:</span> <span class="number">192.168</span>.<span class="number">56.113</span> <span class="comment"># NFS Server地址</span></span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><p><img src="/2018/12/15/kubernetes-storage/create_pv.png" alt="create_pv"></p><p>STATUS 为 Available，表示 nfs-test-pv 就绪，可以被 PVC 申请。<br>接下来创建 PVC nfs-test-pv-claim：</p><h4 id="2-创建PVC"><a href="#2-创建PVC" class="headerlink" title="2. 创建PVC"></a>2. 创建PVC</h4><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="operator">&gt;</span><span class="operator">&gt;</span> nfs-test-pv-claim.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> PersistentVolumeClaim</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> nfs-test-pv-claim</span><br><span class="line">  <span class="params">namespace:</span> default</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">accessModes:</span> <span class="comment"># 存储访问模式，此能力依赖存储厂商能力</span></span><br><span class="line">    <span class="operator">-</span> ReadWriteOnce</span><br><span class="line">  <span class="params">resources:</span></span><br><span class="line">    <span class="params">requests:</span></span><br><span class="line">      <span class="params">storage:</span> <span class="number">2</span>Gi <span class="comment"># 请求获得的pvc存储大小</span></span><br><span class="line">  <span class="params">storageClassName:</span> nfs </span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><p><img src="/2018/12/15/kubernetes-storage/create_pvc.png" alt="create_pvc"></p><p>从 kubectl get pvc 和 kubectl get pv 的输出可以看到 nfs-test-pv-claim 已经 Bound 到 nfs-test-pv，申请成功。<br>接下来就可以在 Pod 中使用存储了：</p><h4 id="3-创建Pod"><a href="#3-创建Pod" class="headerlink" title="3. 创建Pod"></a>3. 创建Pod</h4><figure class="highlight nestedtext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cat &gt;&gt; nfs-test-pod.yaml &lt;&lt; EOF</span></span><br><span class="line"><span class="attribute">apiVersion</span><span class="punctuation">:</span> <span class="string">v1</span></span><br><span class="line"><span class="attribute">kind</span><span class="punctuation">:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attribute">metadata</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">name</span><span class="punctuation">:</span> <span class="string"> nfs-test-pod</span></span><br><span class="line"><span class="attribute">spec</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">containers</span><span class="punctuation">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">name:  nfs-test-pod</span></span><br><span class="line">    <span class="attribute">image</span><span class="punctuation">:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attribute">args</span><span class="punctuation">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sleep 30000</span></span><br><span class="line">    <span class="attribute">volumeMounts</span><span class="punctuation">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mountPath: "/nfs-data"</span></span><br><span class="line">      <span class="attribute">name</span><span class="punctuation">:</span> <span class="string">nfs-data</span></span><br><span class="line">  <span class="attribute">volumes</span><span class="punctuation">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">name: nfs-data</span></span><br><span class="line">      <span class="attribute">persistentVolumeClaim</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">claimName</span><span class="punctuation">:</span> <span class="string"> nfs-test-pv-claim</span></span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><p>与使用普通 Volume 的格式类似，在 volumes 中通过 persistentVolumeClaim 指定使用 nfs-test-pv-claim 申请的 Volume。<br><img src="/2018/12/15/kubernetes-storage/create_pod.png" alt="create_pod"><br>验证 PV 是否可用：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> nfs-test-pod <span class="built_in">touch</span> /nfs-data/SUCCESS</span><br></pre></td></tr></tbody></table></figure><div style="width: 50%; margin: auto">![create_result](kubernetes-storage/create_result.png)</div><p>可见，在 Pod 中创建的文件 /nfs-data/SUCCESS 确实已经保存到了 NFS 服务器目录 /nfs_data_2/中。<br>如果不再需要使用 PV，可用删除 PVC 回收 PV:</p><h4 id="4-回收PVC"><a href="#4-回收PVC" class="headerlink" title="4. 回收PVC"></a>4. 回收PVC</h4><p><strong>持久化卷声明的保护</strong><br>PVC 保护的目的是确保由 pod 正在使用的 PVC 不会从系统中移除，因为如果被移除的话可能会导致数据丢失。<br>注意：当 pod 状态为 Pending 并且 pod 已经分配给节点或 pod 为 Running 状态时，PVC 处于活动状态。<br>当启用<a href="https://k8smeetup.github.io/docs/tasks/administer-cluster/pvc-protection/#lichuqiang">PVC保护</a>功能时，如果用户删除了一个 pod 正在使用的 PVC，则该 PVC 不会被立即删除。PVC 的删除将被推迟，直到 PVC 不再被任何 pod 使用。<br>您可以看到，当我直接删除上面POD正在使用的PVC时命令直接hang住了，此时虽然为 Teminatiing，但PVC 受到保护，<code>Finalizers</code> 列表中包含 kubernetes.io/pvc-protection：</p><figure class="highlight maxima"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">delete</span> pvc nfs-test-<span class="built_in">pv</span>-claim</span><br></pre></td></tr></tbody></table></figure><p><img src="/2018/12/15/kubernetes-storage/pvc_delete_status.png" alt="pvc_delete_status"><br>等待 pod 状态变为 Terminated（删除 pod 或者等到它结束），然后检查，确认 PVC 被移除。</p><p>反之，如果一个PVC没有被pod使用则可以直接删除。</p><p>用户用完 volume 后，可以从允许回收资源的 API 中删除 PVC 对象。PersistentVolume 的回收策略告诉集群在存储卷声明释放后应如何处理该卷。目前，volume 的处理策略有:</p><ul><li>Retain，不清理, 保留 Volume（需要手动清理）</li><li>Recycle，删除数据，即 rm -rf /thevolume/*（只有 NFS 和 HostPath 支持）</li><li>Delete，删除存储资源，比如删除 AWS EBS 卷（只有 AWS EBS, GCE PD, Azure Disk 和 Cinder 支持）</li></ul><p>OK 以上是NFS创建静态模式创建PVC,以及PVC跟POD生命周期的一些实践，下面实践动态模式</p><h3 id="NFS作为动态持久化存储卷"><a href="#NFS作为动态持久化存储卷" class="headerlink" title="NFS作为动态持久化存储卷"></a>NFS作为动态持久化存储卷</h3><p>利用NFS client provisioner动态提供Kubernetes后端存储卷</p><p>想要动态生成PV，需要运行一个NFS-Provisioner服务，将已配置好的NFS系统相关参数录入，并向用户提供创建PV的服务。官方推荐使用Deployment运行一个replica来实现，当然也可以使用Daemonset等其他方式，这些都在官方文档中提供了。</p><p>前提条件是有已经安装好的NFS服务器，并且NFS服务器与Kubernetes的Slave节点都能网络连通。 所有下文用到的文件来自于<code>git clone https://github.com/kubernetes-incubator/external-storage.git</code> 的nfs-client目录</p><p>nfs-client-provisioner 是一个Kubernetes的简易NFS的外部provisioner，本身不提供NFS，需要现有的NFS服务器提供存储</p><ul><li>PV以 <code>${namespace}-${pvcName}-${pvName}</code>的命名格式提供（在NFS服务器上）</li><li>PV回收的时候以 <code>archieved-${namespace}-${pvcName}-${pvName}</code> 的命名格式（在NFS服务器上）</li></ul><h4 id="1-获取nfs-client-provisioner配置文件"><a href="#1-获取nfs-client-provisioner配置文件" class="headerlink" title="1. 获取nfs-client-provisioner配置文件"></a>1. 获取nfs-client-provisioner配置文件</h4><figure class="highlight crmsh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/kubernetes-incubator/external-storage.git</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="2-安装部署"><a href="#2-安装部署" class="headerlink" title="2. 安装部署:"></a>2. 安装部署:</h4><h5 id="1-修改deployment文件并部署-deploy-deployment-yaml"><a href="#1-修改deployment文件并部署-deploy-deployment-yaml" class="headerlink" title="1. 修改deployment文件并部署 deploy/deployment.yaml"></a>1. 修改deployment文件并部署 deploy/deployment.yaml</h5><p>需要修改的地方只有NFS服务器所在的IP地址（192.168.56.113），以及NFS服务器共享的路径（/nfs_data_3），两处都需要修改为你实际的NFS服务器和共享目录</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">deploy/deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/external_storage/nfs-client-provisioner:latest</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">fuseim.pri/ifs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.113</span> </span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/nfs_data_3</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.113</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/nfs_data_3</span></span><br><span class="line"></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">deploy/deployment.yaml</span> <span class="comment"># 执行部署</span></span><br><span class="line"><span class="string">serviceaccount/nfs-client-provisioner</span> <span class="string">created</span></span><br><span class="line"><span class="string">deployment.extensions/nfs-client-provisioner</span> <span class="string">created</span></span><br></pre></td></tr></tbody></table></figure><h5 id="2-修改StorageClass文件并部署-deploy-class-yaml"><a href="#2-修改StorageClass文件并部署-deploy-class-yaml" class="headerlink" title="2. 修改StorageClass文件并部署 deploy/class.yaml"></a>2. 修改StorageClass文件并部署 deploy/class.yaml</h5><p>此处可以不修改，或者修改provisioner的名字，需要与上面的deployment的PROVISIONER_NAME名字一致。</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cat deploy<span class="symbol">/class.yaml</span></span><br><span class="line"><span class="params">apiVersion:</span> storage.k8s.io<span class="symbol">/v1</span></span><br><span class="line"><span class="params">kind:</span> StorageClass</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> managed-nfs-storage</span><br><span class="line"><span class="params">provisioner:</span> fuseim.pri<span class="symbol">/ifs</span> <span class="comment"># or choose another name, must match deployment's env PROVISIONER_NAME'</span></span><br><span class="line"><span class="params">parameters:</span></span><br><span class="line">  <span class="params">archiveOnDelete:</span> <span class="string">"false"</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 执行部署 </span></span><br><span class="line">kubectl apply <span class="operator">-</span>f deploy<span class="symbol">/class.yaml</span></span><br><span class="line">storageclass.storage.k8s.io<span class="symbol">/managed-nfs-storage</span> created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看StorageClass</span></span><br><span class="line">kubectl get sc</span><br><span class="line">NAME                  PROVISIONER      AGE</span><br><span class="line">managed-nfs-storage   fuseim.pri<span class="symbol">/ifs</span>   <span class="number">16</span>m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置这个managed-nfs-storage名字的SC为Kubernetes的默认存储后端</span></span><br><span class="line">kubectl patch storageclass managed-nfs-storage <span class="operator">-</span>p '{<span class="string">"metadata"</span>: {<span class="string">"annotations"</span>:{<span class="string">"storageclass.kubernetes.io/is-default-class"</span>:<span class="string">"true"</span>}}}'</span><br><span class="line">$ kubectl get sc</span><br><span class="line">NAME                            PROVISIONER      AGE</span><br><span class="line">managed-nfs-storage (default)   fuseim.pri<span class="symbol">/ifs</span>   <span class="number">19</span>m</span><br></pre></td></tr></tbody></table></figure><h5 id="3-授权"><a href="#3-授权" class="headerlink" title="3. 授权"></a>3. 授权</h5><p>如果您的集群启用了RBAC，或者您正在运行OpenShift，则必须授权provisioner。 如果你在非默认的“default”名称空间/项目之外部署，可以编辑deploy/rbac.yaml或编辑`oadm policy“指令。</p><p><em>如果启用了RBAC</em><br>需要执行如下的命令来授权。</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">cat deploy<span class="symbol">/rbac.yaml</span></span><br><span class="line"><span class="params">kind:</span> ClusterRole</span><br><span class="line"><span class="params">apiVersion:</span> rbac.authorization.k8s.io<span class="symbol">/v1</span></span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> nfs-client-provisioner-runner</span><br><span class="line"><span class="params">rules:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">apiGroups:</span> [<span class="string">""</span>]</span><br><span class="line">    <span class="params">resources:</span> [<span class="string">"persistentvolumes"</span>]</span><br><span class="line">    <span class="params">verbs:</span> [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"delete"</span>]</span><br><span class="line">  <span class="operator">-</span> <span class="params">apiGroups:</span> [<span class="string">""</span>]</span><br><span class="line">    <span class="params">resources:</span> [<span class="string">"persistentvolumeclaims"</span>]</span><br><span class="line">    <span class="params">verbs:</span> [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"update"</span>]</span><br><span class="line">  <span class="operator">-</span> <span class="params">apiGroups:</span> [<span class="string">"storage.k8s.io"</span>]</span><br><span class="line">    <span class="params">resources:</span> [<span class="string">"storageclasses"</span>]</span><br><span class="line">    <span class="params">verbs:</span> [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>]</span><br><span class="line">  <span class="operator">-</span> <span class="params">apiGroups:</span> [<span class="string">""</span>]</span><br><span class="line">    <span class="params">resources:</span> [<span class="string">"events"</span>]</span><br><span class="line">    <span class="params">verbs:</span> [<span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line"><span class="operator">-</span>--</span><br><span class="line"><span class="params">kind:</span> ClusterRoleBinding</span><br><span class="line"><span class="params">apiVersion:</span> rbac.authorization.k8s.io<span class="symbol">/v1</span></span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> run-nfs-client-provisioner</span><br><span class="line"><span class="params">subjects:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">kind:</span> ServiceAccount</span><br><span class="line">    <span class="params">name:</span> nfs-client-provisioner</span><br><span class="line">    <span class="params">namespace:</span> default</span><br><span class="line"><span class="params">roleRef:</span></span><br><span class="line">  <span class="params">kind:</span> ClusterRole</span><br><span class="line">  <span class="params">name:</span> nfs-client-provisioner-runner</span><br><span class="line">  <span class="params">apiGroup:</span> rbac.authorization.k8s.io</span><br><span class="line"><span class="operator">-</span>--</span><br><span class="line"><span class="params">kind:</span> Role</span><br><span class="line"><span class="params">apiVersion:</span> rbac.authorization.k8s.io<span class="symbol">/v1</span></span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> leader-locking-nfs-client-provisioner</span><br><span class="line"><span class="params">rules:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">apiGroups:</span> [<span class="string">""</span>]</span><br><span class="line">    <span class="params">resources:</span> [<span class="string">"endpoints"</span>]</span><br><span class="line">    <span class="params">verbs:</span> [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line"><span class="operator">-</span>--</span><br><span class="line"><span class="params">kind:</span> RoleBinding</span><br><span class="line"><span class="params">apiVersion:</span> rbac.authorization.k8s.io<span class="symbol">/v1</span></span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> leader-locking-nfs-client-provisioner</span><br><span class="line"><span class="params">subjects:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">kind:</span> ServiceAccount</span><br><span class="line">    <span class="params">name:</span> nfs-client-provisioner</span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="params">namespace:</span> default</span><br><span class="line"><span class="params">roleRef:</span></span><br><span class="line">  <span class="params">kind:</span> Role</span><br><span class="line">  <span class="params">name:</span> leader-locking-nfs-client-provisioner</span><br><span class="line">  <span class="params">apiGroup:</span> rbac.authorization.k8s.io</span><br><span class="line"></span><br><span class="line">kubectl create <span class="operator">-</span>f deploy<span class="symbol">/rbac.yaml</span></span><br><span class="line">clusterrole.rbac.authorization.k8s.io<span class="symbol">/nfs-client-provisioner-runner</span> created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io<span class="symbol">/run-nfs-client-provisioner</span> created</span><br><span class="line">role.rbac.authorization.k8s.io<span class="symbol">/leader-locking-nfs-client-provisioner</span> created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io<span class="symbol">/leader-locking-nfs-client-provisioner</span> created</span><br></pre></td></tr></tbody></table></figure><h5 id="4-执行部署"><a href="#4-执行部署" class="headerlink" title="4. 执行部署:"></a>4. 执行部署:</h5><h6 id="测试创建PVC"><a href="#测试创建PVC" class="headerlink" title="测试创建PVC"></a>测试创建PVC</h6><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat deploy<span class="symbol">/test-claim.yaml</span></span><br><span class="line"><span class="params">kind:</span> PersistentVolumeClaim</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> test-claim</span><br><span class="line">  <span class="params">annotations:</span></span><br><span class="line">    volume.beta.kubernetes.io<span class="operator">/</span><span class="params">storage-class:</span> <span class="string">"managed-nfs-storage"</span></span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">accessModes:</span></span><br><span class="line">    <span class="operator">-</span> ReadWriteMany</span><br><span class="line">  <span class="params">resources:</span></span><br><span class="line">    <span class="params">requests:</span></span><br><span class="line">      <span class="params">storage:</span> <span class="number">1</span>Mi</span><br><span class="line"></span><br><span class="line">$ kubectl create <span class="operator">-</span>f deploy<span class="symbol">/test-claim.yaml</span></span><br><span class="line">persistentvolumeclaim<span class="symbol">/test-claim</span> created</span><br><span class="line"></span><br><span class="line">$ kubectl get pv,pvc</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                STORAGECLASS          REASON    AGE</span><br><span class="line">persistentvolume<span class="symbol">/pvc-137f0450-0048-11e9-af7a-00505621dd5b</span>   <span class="number">1</span>Mi        RWX            Delete           Bound     default<span class="symbol">/test-claim</span>   managed-nfs-storage             <span class="number">9</span>m</span><br><span class="line"></span><br><span class="line">NAME                               STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line">persistentvolumeclaim<span class="symbol">/test-claim</span>   Bound     pvc-<span class="number">137</span>f0450-<span class="number">004</span>8-<span class="number">11</span>e9-af7a-<span class="number">00505621</span>dd5b   <span class="number">1</span>Mi        RWX            managed-nfs-storage   <span class="number">9</span>m</span><br><span class="line"><span class="comment"># 以上可以看到我们的pvc已经申请成功，等待POD挂载使用</span></span><br></pre></td></tr></tbody></table></figure><h6 id="测试创建POD"><a href="#测试创建POD" class="headerlink" title="测试创建POD"></a>测试创建POD</h6><p>POD文件如下，作用就是在test-claim的PV里touch一个SUCCESS文件。</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cat deploy<span class="symbol">/test-pod.yaml</span></span><br><span class="line"><span class="params">kind:</span> Pod</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> test-pod</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">containers:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">name:</span> test-pod</span><br><span class="line">    <span class="params">image:</span> gcr.io<span class="operator">/</span>google_containers<span class="operator">/</span>busybox:<span class="number">1.24</span></span><br><span class="line">    <span class="params">command:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"/bin/sh"</span></span><br><span class="line">    <span class="params">args:</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"-c"</span></span><br><span class="line">      <span class="operator">-</span> <span class="string">"touch /mnt/SUCCESS &amp;&amp; exit 0 || exit 1"</span></span><br><span class="line">    <span class="params">volumeMounts:</span></span><br><span class="line">      <span class="operator">-</span> <span class="params">name:</span> nfs-pvc</span><br><span class="line">        <span class="params">mountPath:</span> <span class="string">"/mnt"</span></span><br><span class="line">  <span class="params">restartPolicy:</span> <span class="string">"Never"</span></span><br><span class="line">  <span class="params">volumes:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">name:</span> nfs-pvc</span><br><span class="line">      <span class="params">persistentVolumeClaim:</span></span><br><span class="line">        <span class="params">claimName:</span> test-claim</span><br><span class="line">        </span><br><span class="line">kubectl create <span class="operator">-</span>f deploy<span class="symbol">/test-pod.yaml</span></span><br><span class="line">pod<span class="symbol">/test-pod</span> created</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动POD，一会儿POD就是completed状态，说明执行完毕。</span></span><br><span class="line">kubectl get pod | grep test-pod</span><br><span class="line">NAME                                      READY     STATUS      RESTARTS   AGE</span><br><span class="line">test-pod                                  <span class="number">0</span><span class="symbol">/1</span>       Completed   <span class="number">0</span>          <span class="number">18</span>s</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h6 id="在NFS服务器上的共享目录下的卷子目录中检查创建的NFS-PV卷下是否有”SUCCESS”-文件。"><a href="#在NFS服务器上的共享目录下的卷子目录中检查创建的NFS-PV卷下是否有”SUCCESS”-文件。" class="headerlink" title="在NFS服务器上的共享目录下的卷子目录中检查创建的NFS PV卷下是否有”SUCCESS” 文件。"></a>在NFS服务器上的共享目录下的卷子目录中检查创建的NFS PV卷下是否有”SUCCESS” 文件。</h6><p><img src="/2018/12/15/kubernetes-storage/SUCCESS.png" alt="SUCCESS"><br>以上，说明我们部署正常，并且可以通过动态分配NFS的持久共享卷</p><p><strong>参考</strong><br><a href="https://k8smeetup.github.io/docs/concepts/storage/volumes/">https://k8smeetup.github.io/docs/concepts/storage/volumes/</a><br><a href="https://k8smeetup.github.io/docs/concepts/storage/persistent-volumes/#%E5%9B%9E%E6%94%B6-1">https://k8smeetup.github.io/docs/concepts/storage/persistent-volumes/#回收-1</a><br><a href="https://k8smeetup.github.io/docs/tasks/administer-cluster/pvc-protection/#lichuqiang">https://k8smeetup.github.io/docs/tasks/administer-cluster/pvc-protection/#lichuqiang</a><br><a href="https://jimmysong.io/kubernetes-handbook/practice/using-nfs-for-persistent-storage.html">https://jimmysong.io/kubernetes-handbook/practice/using-nfs-for-persistent-storage.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;序、为何需要存储卷&quot;&gt;&lt;a href=&quot;#序、为何需要存储卷&quot; class=&quot;headerlink&quot; title=&quot;序、为何需要存储卷&quot;&gt;&lt;/a&gt;序、为何需要存储卷&lt;/h1&gt;&lt;p&gt;容器部署过程中一般有以下三种数据:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动时需要的初始数据，可以是配置文件&lt;/li&gt;
&lt;li&gt;启动过程中产生的临时数据，该临时数据需要多个容器间共享&lt;/li&gt;
&lt;li&gt;启动过程中产生的持久化数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上三种数据都不希望在容器重启时就消失，存储卷由此而来，它可以根据不同场景提供不同类型的存储能力。&lt;br&gt;各类卷:&lt;/p&gt;
&lt;div style=&quot;width: 50%; margin: auto&quot;&gt;![截图来源华为云cce课堂](kubernetes-storage/volume.png)&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;spec.volumes：通过此字段提供指定的存储卷&lt;/li&gt;
&lt;li&gt;spec.containers.volumeMounts：通过此字段将存储卷挂接到容器中&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;一、普通存储卷的用法&quot;&gt;&lt;a href=&quot;#一、普通存储卷的用法&quot; class=&quot;headerlink&quot; title=&quot;一、普通存储卷的用法:&quot;&gt;&lt;/a&gt;一、普通存储卷的用法:&lt;/h1&gt;&lt;h2 id=&quot;容器启动时依赖数据&quot;&gt;&lt;a href=&quot;#容器启动时依赖数据&quot; class=&quot;headerlink&quot; title=&quot;容器启动时依赖数据&quot;&gt;&lt;/a&gt;容器启动时依赖数据&lt;/h2&gt;&lt;h3 id=&quot;1-ConfigMap&quot;&gt;&lt;a href=&quot;#1-ConfigMap&quot; class=&quot;headerlink&quot; title=&quot;1. ConfigMap&quot;&gt;&lt;/a&gt;1. ConfigMap&lt;/h3&gt;&lt;p&gt;上图也说了它是在容器启动的时候以来的数据来源&lt;/p&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/categories/kubernetes/"/>
    
    
    <category term="kubernets" scheme="https://blog.sctux.cc/tags/kubernets/"/>
    
    <category term="持久化存储" scheme="https://blog.sctux.cc/tags/%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/"/>
    
    <category term="Storage" scheme="https://blog.sctux.cc/tags/Storage/"/>
    
    <category term="NFS PV静态供给" scheme="https://blog.sctux.cc/tags/NFS-PV%E9%9D%99%E6%80%81%E4%BE%9B%E7%BB%99/"/>
    
    <category term="NFS PV动态供给" scheme="https://blog.sctux.cc/tags/NFS-PV%E5%8A%A8%E6%80%81%E4%BE%9B%E7%BB%99/"/>
    
  </entry>
  
  <entry>
    <title>理解kubernetes中的有状态服务StatefulSet</title>
    <link href="https://blog.sctux.cc/2018/12/14/kubernetes-statefulset/"/>
    <id>https://blog.sctux.cc/2018/12/14/kubernetes-statefulset/</id>
    <published>2018-12-14T07:10:56.000Z</published>
    <updated>2025-09-01T01:59:08.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>StatefulSet 是为了解决有状态服务的问题（对应 Deployments 和 ReplicaSets 是为无状态服务而设计），其应用场景包括</p><ul><li>稳定的持久化存储，即 Pod 重新调度后还是能访问到相同的持久化数据，基于 PVC 来实现</li><li>稳定的网络标志，即 Pod 重新调度后其 PodName 和 HostName 不变，基于 Headless Service（即没有 Cluster IP 的 Service）来实现</li><li>有序部署，有序扩展，即 Pod 是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依序进行（即从 0 到 N-1，在下一个 Pod 运行之前所有之前的 Pod 必须都是 Running 和 Ready 状态），基于 init containers 来实现</li><li>有序收缩，有序删除（即从 N-1 到 0）</li></ul><p>从上面的应用场景可以发现，StatefulSet 由以下几个部分组成：</p><ul><li>用于定义网络标志（DNS domain）的 Headless Service</li><li>用于创建 PersistentVolumes 的 volumeClaimTemplates</li><li>定义具体应用的 StatefulSet</li></ul><p>StatefulSet 中每个 Pod 的 DNS 格式为 statefulSetName-{0..N-1}.serviceName.namespace.svc.cluster.local，其中</p><ul><li>serviceName 为 Headless Service 的名字</li><li>0..N-1 为 Pod 所在的序号，从 0 开始到 N-1</li><li>statefulSetName 为 StatefulSet 的名字</li><li>namespace 为服务所在的 namespace，Headless Service 和 StatefulSet 必须在相同的 namespace</li><li>.cluster.local 为 Cluster Domain</li></ul><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul><li>给定 Pod 的存储必须由 PersistentVolume Provisioner 根据请求的 storage class 进行配置，或由管理员预先配置。</li><li>删除或 scale StatefulSet 将不会删除与 StatefulSet 相关联的 volume。 这样做是为了确保数据安全性，这通常比自动清除所有相关 StatefulSet 资源更有价值。</li><li>StatefulSets 目前要求 Headless Service 负责 Pod 的网络身份。 您有责任创建此服务。</li></ul><h1 id="部署Statefulset服务"><a href="#部署Statefulset服务" class="headerlink" title="部署Statefulset服务"></a>部署Statefulset服务</h1><p>首先我们下面使用的是用前面<a href="https://blog.sctux.com/2018/12/15/kubernetes-storage/#NFS%E4%BD%9C%E4%B8%BA%E5%8A%A8%E6%80%81%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8%E5%8D%B7">博文</a>中使用到的NFS做动态供给PVC作为持久化存储。那么他的创建步骤这里不在赘述，我们在编排yaml文件中申请即可。</p><h2 id="获取动态卷信息"><a href="#获取动态卷信息" class="headerlink" title="获取动态卷信息"></a>获取动态卷信息</h2><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe storageclass managed-nfs-storage</span><br><span class="line"><span class="params">Name:</span>                  managed-nfs-storage</span><br><span class="line"><span class="params">IsDefaultClass:</span>        No</span><br><span class="line"><span class="params">Annotations:</span>           <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">Provisioner:</span>           fuseim.pri<span class="symbol">/ifs</span></span><br><span class="line"><span class="params">Parameters:</span>            archiveOnDelete<span class="operator">=</span><span class="literal">false</span></span><br><span class="line"><span class="params">AllowVolumeExpansion:</span>  <span class="symbol">&lt;unset&gt;</span></span><br><span class="line"><span class="params">MountOptions:</span>          <span class="symbol">&lt;none&gt;</span></span><br><span class="line"><span class="params">ReclaimPolicy:</span>         Delete</span><br><span class="line"><span class="params">VolumeBindingMode:</span>     Immediate</span><br><span class="line"><span class="params">Events:</span>                <span class="symbol">&lt;none&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="编写service"><a href="#编写service" class="headerlink" title="编写service"></a>编写service</h2><p>一个名为 nginx 的 headless service，用于控制网络域。</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="operator">&gt;</span><span class="operator">&gt;</span> statefulset_service.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Service</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> nginx</span><br><span class="line">  <span class="params">labels:</span></span><br><span class="line">    <span class="params">app:</span> nginx</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">ports:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="params">name:</span> web</span><br><span class="line">  <span class="params">clusterIP:</span> None</span><br><span class="line">  <span class="params">selector:</span></span><br><span class="line">    <span class="params">app:</span> nginx</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行创建</span></span><br><span class="line">$ kubectl create <span class="operator">-</span>f statefulset_service.yaml</span><br><span class="line">service<span class="symbol">/nginx</span> created</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="编写statefulset-yaml"><a href="#编写statefulset-yaml" class="headerlink" title="编写statefulset yaml"></a>编写statefulset yaml</h2><ul><li>一个名为 web 的 StatefulSet，它的 Spec 中指定在有 2 个运行 nginx 容器的 Pod。</li><li><code>volumeClaimTemplates</code> 使用 PersistentVolume Provisioner 提供的 <code>PersistentVolumes</code> 作为稳定存储。</li></ul><p>volumeClaimTemplates: 表示一类PVC的模板，系统会根据Statefulset配置的replicas数量，创建相应数量的PVC。这些PVC除了名字不一样之外其他配置都是一样的。</p><p>下面storageClassName配置为我之前通过NFS创建的。</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="operator">&gt;</span><span class="operator">&gt;</span> statefulset.yaml <span class="operator">&lt;</span><span class="operator">&lt;</span> EOF</span><br><span class="line"><span class="params">apiVersion:</span> apps<span class="symbol">/v1beta1</span></span><br><span class="line"><span class="params">kind:</span> StatefulSet</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> web</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">serviceName:</span> <span class="string">"nginx"</span></span><br><span class="line">  <span class="params">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="params">template:</span></span><br><span class="line">    <span class="params">metadata:</span></span><br><span class="line">      <span class="params">labels:</span></span><br><span class="line">        <span class="params">app:</span> nginx</span><br><span class="line">    <span class="params">spec:</span></span><br><span class="line">      <span class="params">containers:</span></span><br><span class="line">      <span class="operator">-</span> <span class="params">name:</span> nginx</span><br><span class="line">        <span class="params">image:</span> nginx</span><br><span class="line">        <span class="params">ports:</span></span><br><span class="line">        <span class="operator">-</span> <span class="params">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="params">name:</span> web</span><br><span class="line">        <span class="params">volumeMounts:</span></span><br><span class="line">        <span class="operator">-</span> <span class="params">name:</span> www-disk</span><br><span class="line">          <span class="params">mountPath:</span> <span class="symbol">/usr/share/nginx/html</span></span><br><span class="line">  <span class="params">volumeClaimTemplates:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">metadata:</span></span><br><span class="line">      <span class="params">name:</span> www-disk</span><br><span class="line">      <span class="params">annotations:</span></span><br><span class="line">        volume.beta.kubernetes.io<span class="operator">/</span><span class="params">storage-class:</span> <span class="string">"managed-nfs-storage"</span></span><br><span class="line">    <span class="params">spec:</span></span><br><span class="line">      <span class="params">accessModes:</span> [ <span class="string">"ReadWriteOnce"</span> ]</span><br><span class="line">      <span class="params">storageClassName:</span> <span class="string">"managed-nfs-storage"</span></span><br><span class="line">      <span class="params">resources:</span></span><br><span class="line">        <span class="params">requests:</span></span><br><span class="line">          <span class="params">storage:</span> <span class="number">1</span>Gi</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure><h2 id="验证服务伸缩性"><a href="#验证服务伸缩性" class="headerlink" title="验证服务伸缩性"></a>验证服务伸缩性</h2><h3 id="创建Statefulset服务："><a href="#创建Statefulset服务：" class="headerlink" title="创建Statefulset服务："></a>创建Statefulset服务：</h3><figure class="highlight subunit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 执行创建</span><br><span class="line">$ kubectl create -f statefulset.yaml</span><br><span class="line">statefulset.apps/web created</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                          READY     STATUS    RESTARTS   AGE</span><br><span class="line">pod/nfs-client-provisioner<span class="string">-6</span>c6997c674-z7m9r   1/1       Running   0          18m</span><br><span class="line">pod/web<span class="string">-0</span>                                     1/1       Running   0          13m</span><br><span class="line">pod/web<span class="string">-1</span>                                     1/1       Running   0          12m</span><br><span class="line"></span><br><span class="line">$ kubectl get pvc</span><br><span class="line">NAME                                   STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line">persistentvolumeclaim/www-disk-web<span class="string">-0</span>   Bound     pvc-a440540e<span class="string">-01</span>dd<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   13m</span><br><span class="line">persistentvolumeclaim/www-disk-web<span class="string">-1</span>   Bound     pvc-af5c7006<span class="string">-01</span>dd<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   12m</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="扩容服务到3个Pod，显示会创建新的云盘卷："><a href="#扩容服务到3个Pod，显示会创建新的云盘卷：" class="headerlink" title="扩容服务到3个Pod，显示会创建新的云盘卷："></a>扩容服务到3个Pod，显示会创建新的云盘卷：</h3><figure class="highlight subunit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale sts web --replicas=3</span><br><span class="line">statefulset.apps/web scaled</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                      READY     STATUS    RESTARTS   AGE</span><br><span class="line">nfs-client-provisioner<span class="string">-6</span>c6997c674-z7m9r   1/1       Running   0          19m</span><br><span class="line">web<span class="string">-0</span>                                     1/1       Running   0          14m</span><br><span class="line">web<span class="string">-1</span>                                     1/1       Running   0          14m</span><br><span class="line">web<span class="string">-2</span>                                     1/1       Running   0          40s</span><br><span class="line"></span><br><span class="line">$ kubectl get pvc</span><br><span class="line">NAME             STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line">www-disk-web<span class="string">-0</span>   Bound     pvc-a440540e<span class="string">-01</span>dd<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   14m</span><br><span class="line">www-disk-web<span class="string">-1</span>   Bound     pvc-af5c7006<span class="string">-01</span>dd<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   14m</span><br><span class="line">www-disk-web<span class="string">-2</span>   Bound     pvc<span class="string">-97</span>afce59<span class="string">-01</span>df<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   38s</span><br></pre></td></tr></tbody></table></figure><h3 id="缩容服务到1个Pod，显示pvc-pv并不会一同删除："><a href="#缩容服务到1个Pod，显示pvc-pv并不会一同删除：" class="headerlink" title="缩容服务到1个Pod，显示pvc/pv并不会一同删除："></a>缩容服务到1个Pod，显示pvc/pv并不会一同删除：</h3><figure class="highlight subunit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale sts web --replicas=1</span><br><span class="line">statefulset.apps/web scaled</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                      READY     STATUS    RESTARTS   AGE</span><br><span class="line">nfs-client-provisioner<span class="string">-6</span>c6997c674-z7m9r   1/1       Running   0          21m</span><br><span class="line">web<span class="string">-0</span>                                     1/1       Running   0          16m</span><br><span class="line"></span><br><span class="line">$ kubectl get pvc</span><br><span class="line">NAME             STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line">www-disk-web<span class="string">-0</span>   Bound     pvc-a440540e<span class="string">-01</span>dd<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   16m</span><br><span class="line">www-disk-web<span class="string">-1</span>   Bound     pvc-af5c7006<span class="string">-01</span>dd<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   16m</span><br><span class="line">www-disk-web<span class="string">-2</span>   Bound     pvc<span class="string">-97</span>afce59<span class="string">-01</span>df<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   2m</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="再次扩容到3个Pod，新的pod会复用原来的PVC-PV："><a href="#再次扩容到3个Pod，新的pod会复用原来的PVC-PV：" class="headerlink" title="再次扩容到3个Pod，新的pod会复用原来的PVC/PV："></a>再次扩容到3个Pod，新的pod会复用原来的PVC/PV：</h3><figure class="highlight subunit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale sts web --replicas=3</span><br><span class="line">statefulset.apps/web scaled</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                          READY     STATUS    RESTARTS   AGE</span><br><span class="line">pod/nfs-client-provisioner<span class="string">-6</span>c6997c674-z7m9r   1/1       Running   1          46m</span><br><span class="line">pod/web<span class="string">-0</span>                                     1/1       Running   0          3m</span><br><span class="line">pod/web<span class="string">-1</span>                                     1/1       Running   0          1m</span><br><span class="line">pod/web<span class="string">-2</span>                                     1/1       Running   0          18s</span><br><span class="line"></span><br><span class="line">$ kubectl get pvc</span><br><span class="line">NAME                                   STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line">persistentvolumeclaim/www-disk-web<span class="string">-0</span>   Bound     pvc-a440540e<span class="string">-01</span>dd<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   41m</span><br><span class="line">persistentvolumeclaim/www-disk-web<span class="string">-1</span>   Bound     pvc-af5c7006<span class="string">-01</span>dd<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   40m</span><br><span class="line">persistentvolumeclaim/www-disk-web<span class="string">-2</span>   Bound     pvc<span class="string">-97</span>afce59<span class="string">-01</span>df<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   27m</span><br></pre></td></tr></tbody></table></figure><h3 id="删除一个pod-web0前，Pod引用PVC：www-disk-web-0"><a href="#删除一个pod-web0前，Pod引用PVC：www-disk-web-0" class="headerlink" title="删除一个pod/web0前，Pod引用PVC：www-disk-web-0"></a>删除一个pod/web0前，Pod引用PVC：www-disk-web-0</h3><figure class="highlight apache"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">kubectl</span> describe pod/web-<span class="number">0</span> | grep ClaimName</span><br><span class="line">    <span class="attribute">ClaimName</span>:  www-disk-web-<span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删除Pod后，重新创建的Pod名字与删除的一致，且使用同一个PVC："><a href="#删除Pod后，重新创建的Pod名字与删除的一致，且使用同一个PVC：" class="headerlink" title="删除Pod后，重新创建的Pod名字与删除的一致，且使用同一个PVC："></a>删除Pod后，重新创建的Pod名字与删除的一致，且使用同一个PVC：</h3><figure class="highlight subunit"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl delete pod/web<span class="string">-0</span></span><br><span class="line">pod "web<span class="string">-0</span>" deleted</span><br><span class="line"></span><br><span class="line">$ kubectl get pod</span><br><span class="line">NAME                                          READY     STATUS    RESTARTS   AGE</span><br><span class="line">pod/nfs-client-provisioner<span class="string">-6</span>c6997c674-z7m9r   1/1       Running   1          49m</span><br><span class="line">pod/web<span class="string">-0</span>                                     1/1       Running   0          10s</span><br><span class="line">pod/web<span class="string">-1</span>                                     1/1       Running   0          4m</span><br><span class="line">pod/web<span class="string">-2</span>                                     1/1       Running   0          3m</span><br><span class="line"></span><br><span class="line">$ kubectl describe pod/web<span class="string">-0</span> | grep ClaimName</span><br><span class="line">    ClaimName:  www-disk-web<span class="string">-0</span></span><br><span class="line"></span><br><span class="line">$ kubectl get pvc</span><br><span class="line">NAME                                   STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS          AGE</span><br><span class="line">persistentvolumeclaim/www-disk-web<span class="string">-0</span>   Bound     pvc-a440540e<span class="string">-01</span>dd<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   44m</span><br><span class="line">persistentvolumeclaim/www-disk-web<span class="string">-1</span>   Bound     pvc-af5c7006<span class="string">-01</span>dd<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   43m</span><br><span class="line">persistentvolumeclaim/www-disk-web<span class="string">-2</span>   Bound     pvc<span class="string">-97</span>afce59<span class="string">-01</span>df<span class="string">-11</span>e9-b006<span class="string">-00505621</span>dd5b   1Gi        RWO            managed-nfs-storage   30m</span><br></pre></td></tr></tbody></table></figure><h2 id="验证服务高可用性"><a href="#验证服务高可用性" class="headerlink" title="验证服务高可用性"></a>验证服务高可用性</h2><h3 id="共享持久卷中新建文件"><a href="#共享持久卷中新建文件" class="headerlink" title="共享持久卷中新建文件"></a>共享持久卷中新建文件</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> web-1 <span class="built_in">ls</span> /usr/share/nginx/html</span></span><br><span class="line">statefulset</span><br></pre></td></tr></tbody></table></figure><h3 id="删除Pod，验证数据持久性："><a href="#删除Pod，验证数据持久性：" class="headerlink" title="删除Pod，验证数据持久性："></a>删除Pod，验证数据持久性：</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl delete pod web-1</span></span><br><span class="line">pod "web-1" deleted</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">待新的pod创建之后再次检查文件是否还在</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl <span class="built_in">exec</span> web-1 <span class="built_in">ls</span> /usr/share/nginx/html</span></span><br><span class="line">statefulset</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以上说明删除pod对pvc没有任何的影响，我们的数据还是保存着的。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="数据保存"><a href="#数据保存" class="headerlink" title="数据保存:"></a>数据保存:</h3><p>上面也说啦, 删除或 scale StatefulSet 将不会删除与 StatefulSet 相关联的 volume。 这样做是为了确保数据安全性，这通常比自动清除所有相关 StatefulSet 资源更有价值。</p><p>所以我到NFS Server上面check一下:<br><img src="/2018/12/14/kubernetes-statefulset/nfs.png"></p><p>可见 我们在pod/web-1上创建的文件还是保存着的。</p><h3 id="附"><a href="#附" class="headerlink" title="附:"></a>附:</h3><p>该yaml为华为云那边的PV申请，以及StatefulSet应用的创建</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># PVC存储申请</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pvc-evs-auto-example</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">volume.beta.kubernetes.io/storage-class:</span> <span class="string">sata</span></span><br><span class="line">    <span class="attr">volume.beta.kubernetes.io/storage-provisioner:</span> <span class="string">flexvolume-huawei.com/fuxivol</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">failure-domain.beta.kubernetes.io/region:</span> <span class="string">cn-north-1</span></span><br><span class="line">    <span class="attr">failure-domain.beta.kubernetes.io/zone:</span> <span class="string">cn-north-1a</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># StatefulSet应用创建</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cce21days-app11-guomaoqiu</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">podManagementPolicy:</span> <span class="string">OrderedReady</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">cce21days-app11-guomaoqiu</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span>  </span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">cce21days-app11-guomaoqiu</span></span><br><span class="line">      <span class="attr">failure-domain.beta.kubernetes.io/region:</span> <span class="string">cn-north-1</span></span><br><span class="line">      <span class="attr">failure-domain.beta.kubernetes.io/zone:</span> <span class="string">cn-north-1a</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">cce21days-app11-guomaoqiu</span></span><br><span class="line">        <span class="attr">failure-domain.beta.kubernetes.io/region:</span> <span class="string">cn-north-1</span></span><br><span class="line">        <span class="attr">failure-domain.beta.kubernetes.io/zone:</span> <span class="string">cn-north-1a</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span> {}</span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="number">100.125</span><span class="number">.0</span><span class="number">.198</span><span class="string">:20202/guomaoqiu/tank:1.0.1</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">container-0</span></span><br><span class="line">        <span class="attr">resources:</span> {}</span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">pvc-evs-example</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">imagePullSecrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default-secret</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> {}</span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pvc-evs-example</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">pvc-evs-auto-example</span></span><br><span class="line">  <span class="attr">updateStrategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;StatefulSet 是为了解决有状态服务的问题（对应 Deployments 和 ReplicaSets 是为无状态服务而设计），其应用场景包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;稳定的持久化存储，即 Pod 重新调度后还是能访问到相同的持久化数据，基于 PVC 来实现&lt;/li&gt;
&lt;li&gt;稳定的网络标志，即 Pod 重新调度后其 PodName 和 HostName 不变，基于 Headless Service（即没有 Cluster IP 的 Service）来实现&lt;/li&gt;
&lt;li&gt;有序部署，有序扩展，即 Pod 是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依序进行（即从 0 到 N-1，在下一个 Pod 运行之前所有之前的 Pod 必须都是 Running 和 Ready 状态），基于 init containers 来实现&lt;/li&gt;
&lt;li&gt;有序收缩，有序删除（即从 N-1 到 0）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上面的应用场景可以发现，StatefulSet 由以下几个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于定义网络标志（DNS domain）的 Headless Service&lt;/li&gt;
&lt;li&gt;用于创建 PersistentVolumes 的 volumeClaimTemplates&lt;/li&gt;
&lt;li&gt;定义具体应用的 StatefulSet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;StatefulSet 中每个 Pod 的 DNS 格式为 statefulSetName-{0..N-1}.serviceName.namespace.svc.cluster.local，其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;serviceName 为 Headless Service 的名字&lt;/li&gt;
&lt;li&gt;0..N-1 为 Pod 所在的序号，从 0 开始到 N-1&lt;/li&gt;
&lt;li&gt;statefulSetName 为 StatefulSet 的名字&lt;/li&gt;
&lt;li&gt;namespace 为服务所在的 namespace，Headless Service 和 StatefulSet 必须在相同的 namespace&lt;/li&gt;
&lt;li&gt;.cluster.local 为 Cluster Domain&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;限制&quot;&gt;&lt;a href=&quot;#限制&quot; class=&quot;headerlink&quot; title=&quot;限制&quot;&gt;&lt;/a&gt;限制&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;给定 Pod 的存储必须由 PersistentVolume Provisioner 根据请求的 storage class 进行配置，或由管理员预先配置。&lt;/li&gt;
&lt;li&gt;删除或 scale StatefulSet 将不会删除与 StatefulSet 相关联的 volume。 这样做是为了确保数据安全性，这通常比自动清除所有相关 StatefulSet 资源更有价值。&lt;/li&gt;
&lt;li&gt;StatefulSets 目前要求 Headless Service 负责 Pod 的网络身份。 您有责任创建此服务。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/categories/kubernetes/"/>
    
    
    <category term="StatefulSet" scheme="https://blog.sctux.cc/tags/StatefulSet/"/>
    
    <category term="有状态" scheme="https://blog.sctux.cc/tags/%E6%9C%89%E7%8A%B6%E6%80%81/"/>
    
    <category term="持久化存储" scheme="https://blog.sctux.cc/tags/%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>管理Kubernetes日志</title>
    <link href="https://blog.sctux.cc/2018/12/13/kubernetes-logs/"/>
    <id>https://blog.sctux.cc/2018/12/13/kubernetes-logs/</id>
    <published>2018-12-13T12:47:40.000Z</published>
    <updated>2025-09-01T01:59:08.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>日志是我们在运维部署当中非常重要的一个东西，对于我个人工作经验而言，一般出现问题，第一步事情就是查看日志，其次是服务器资源查看这样去定位问题，那么在kubernets集群当中呢，我主要给其分了两种类型:</p><ul><li>kubernetes组件日志</li><li>运行于kubernetes上的容器应用日志</li></ul><h2 id="kubernetes组件日志"><a href="#kubernetes组件日志" class="headerlink" title="kubernetes组件日志"></a>kubernetes组件日志</h2><p>我们知道在kubernetes集群是有多个组件组成，协同为我们提供一个运行容器的环境。当运行当中出现问题，也是需要查看对应组件的日志，进行问题排查、处理。那么常见的日志如下：</p><figure class="highlight arcade"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">var</span>/<span class="built_in">log</span>/kube-apiserver.<span class="built_in">log</span></span><br><span class="line">/<span class="keyword">var</span>/<span class="built_in">log</span>/kube-proxy.<span class="built_in">log</span></span><br><span class="line">/<span class="keyword">var</span>/<span class="built_in">log</span>/kube-controller-manager.<span class="built_in">log</span></span><br><span class="line">/<span class="keyword">var</span>/<span class="built_in">log</span>/kube-scheduler.<span class="built_in">log</span></span><br><span class="line">/<span class="keyword">var</span>/<span class="built_in">log</span>/kubelet.<span class="built_in">log</span></span><br></pre></td></tr></tbody></table></figure><p>当然根据搭建集群的方式不同，我们配置的日志目录也不尽相同，所以只是列举一下；<br>如果组件的安装方式由systemd来管理的话 我们还可以通过以下命令进行排错</p><figure class="highlight fortran"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">journalctl -u kubelet</span><br><span class="line">或</span><br><span class="line">systemctl <span class="keyword">status</span> kubelet -l</span><br></pre></td></tr></tbody></table></figure><p>如果使用的是kuernetes插件式方式部署的组件则使用以下命令</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs -f <span class="tag">&lt;<span class="name">组件名称</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="运行于kubernetes上的容器应用日志"><a href="#运行于kubernetes上的容器应用日志" class="headerlink" title="运行于kubernetes上的容器应用日志"></a>运行于kubernetes上的容器应用日志</h2><p>运行于kubernetes上的，比如一个nginx容器；我们如何查看这个应用的日志呢？</p><h3 id="从容器标准输出截获"><a href="#从容器标准输出截获" class="headerlink" title="从容器标准输出截获"></a>从容器标准输出截获</h3><p>用法类似于docker</p><figure class="highlight dust"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">kubectl logs -f </span><span class="template-variable">{POD_NAME}</span><span class="language-xml"> -c </span><span class="template-variable">{Container_NAME}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="进入容器进行查看"><a href="#进入容器进行查看" class="headerlink" title="进入容器进行查看"></a>进入容器进行查看</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">exec</span> -it {POD_NAME} -c {Container_NAME} /bin/sh</span><br><span class="line">docker <span class="built_in">exec</span> -it {Container_NAME} /bin/sh</span><br></pre></td></tr></tbody></table></figure><h3 id="将日志文件挂载到主机目录"><a href="#将日志文件挂载到主机目录" class="headerlink" title="将日志文件挂载到主机目录"></a>将日志文件挂载到主机目录</h3><p>比如我要把nginx的日志挂载到运行于该POD的宿主机的某个目录</p><figure class="highlight nix"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写yaml文件</span></span><br><span class="line"><span class="comment"># 这里我们知道手写一个yaml是很烦的，而且那么多关键词不是那么容易记住，</span></span><br><span class="line"><span class="comment"># 那么此时就需要在现有环境中找一个pod然后把他的yaml导出再做修改</span></span><br><span class="line"><span class="comment"># 如果环境中还是没有pod，那就直接run一个</span></span><br><span class="line"></span><br><span class="line">$ kubectl get pod nginx-<span class="number">67</span>ccc95d8c-fd5nk <span class="operator">-</span>o yaml <span class="operator">-</span>-export <span class="operator">&gt;</span> nginx.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一些不必要的字段</span></span><br><span class="line">$ vim nginx.yaml </span><br><span class="line"></span><br><span class="line"><span class="params">apiVersion:</span> v1</span><br><span class="line"><span class="params">kind:</span> Pod</span><br><span class="line"><span class="params">metadata:</span></span><br><span class="line">  <span class="params">name:</span> nginx</span><br><span class="line">  <span class="params">labels:</span></span><br><span class="line">    <span class="params">run:</span> nginx</span><br><span class="line"><span class="params">spec:</span></span><br><span class="line">  <span class="params">containers:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">image:</span> nginx:latest</span><br><span class="line">    <span class="params">imagePullPolicy:</span> IfNotPresent</span><br><span class="line">    <span class="params">name:</span> nginx</span><br><span class="line">    <span class="params">volumeMounts:</span></span><br><span class="line">    <span class="operator">-</span> <span class="params">mountPath:</span> <span class="symbol">/var/log/nginx</span>  <span class="comment"># nginx应用默认日志目录</span></span><br><span class="line">      <span class="params">name:</span> nginx-log-volume     </span><br><span class="line">  <span class="params">volumes:</span></span><br><span class="line">  <span class="operator">-</span> <span class="params">name:</span> nginx-log-volume</span><br><span class="line">    <span class="params">hostPath:</span></span><br><span class="line">      <span class="params">path:</span> <span class="symbol">/var/k8s/log</span>         <span class="comment"># 宿主机目录</span></span><br><span class="line">      </span><br><span class="line">$ kubectl create <span class="operator">-</span>f nginx.yaml</span><br><span class="line">pod <span class="string">"nginx"</span> created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看宿主机，这样容器的日志目录我就挂到了宿主</span></span><br><span class="line"><span class="comment"># 而不用在进入容器中查看了</span></span><br><span class="line">$ ll <span class="operator">/</span>var<span class="operator">/</span>k8s<span class="operator">/</span>log<span class="symbol">/</span> </span><br><span class="line">total <span class="number">0</span></span><br><span class="line"><span class="operator">-</span>rw-r----- <span class="number">1</span> root root <span class="number">0</span> Dec <span class="number">18</span> <span class="number">15</span>:<span class="number">17</span> access.log</span><br><span class="line"><span class="operator">-</span>rw-r----- <span class="number">1</span> root root <span class="number">0</span> Dec <span class="number">18</span> <span class="number">15</span>:<span class="number">17</span> error.log</span><br></pre></td></tr></tbody></table></figure><p>注意点: 写yaml的时候一定要养成导出现有资源类型的yaml的习惯再去修改；这样能避免手动编写时格式的一些问题，如果关键字记不住那就一定要用<code>kubectl explain</code>获取资源文档</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;日志是我们在运维部署当中非常重要的一个东西，对于我个人工作经验而言，一般出现问题，第一步事情就是查看日志，其次是服务器资源查看这样去定位问题，那么在kubernets集群当中呢，我主要给其分了两种类型:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubernetes组件日志&lt;/li&gt;
&lt;li&gt;运行于kubernetes上的容器应用日志&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;kubernetes组件日志&quot;&gt;&lt;a href=&quot;#kubernetes组件日志&quot; class=&quot;headerlink&quot; title=&quot;kubernetes组件日志&quot;&gt;&lt;/a&gt;kubernetes组件日志&lt;/h2&gt;&lt;p&gt;我们知道在kubernetes集群是有多个组件组成，协同为我们提供一个运行容器的环境。当运行当中出现问题，也是需要查看对应组件的日志，进行问题排查、处理。那么常见的日志如下：&lt;/p&gt;
&lt;figure class=&quot;highlight arcade&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/kube-apiserver.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/kube-proxy.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/kube-controller-manager.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/kube-scheduler.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/kubelet.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然根据搭建集群的方式不同，我们配置的日志目录也不尽相同，所以只是列举一下；&lt;br&gt;如果组件的安装方式由systemd来管理的话 我们还可以通过以下命令进行排错&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;journalctl -u kubelet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl &lt;span class=&quot;keyword&quot;&gt;status&lt;/span&gt; kubelet -l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果使用的是kuernetes插件式方式部署的组件则使用以下命令&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubectl logs -f &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;组件名称&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/categories/kubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://blog.sctux.cc/tags/kubernetes/"/>
    
    <category term="log" scheme="https://blog.sctux.cc/tags/log/"/>
    
  </entry>
  
</feed>
